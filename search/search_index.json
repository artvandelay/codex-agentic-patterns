{"config":{"lang":["en"],"separator":"[\\s\\-,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Codex Agentic Patterns","text":"<p>Welcome to the documentation site for Codex Agentic Patterns!</p> <p>This site contains the complete learning materials for building production-ready AI agents through real-world patterns extracted from OpenAI's Codex CLI.</p>"},{"location":"#quick-navigation","title":"\ud83d\ude80 Quick Navigation","text":"<ul> <li>Start Here - Your entry point to learning agentic patterns</li> <li>Quick Start - Get up and running quickly  </li> <li>Complete Index - Navigate all learning materials</li> <li>Exercises - Hands-on practice</li> </ul>"},{"location":"#about-this-resource","title":"\ud83d\udcd6 About This Resource","text":"<p>Codex Agentic Patterns teaches you to build intelligent AI agents by studying real production code from OpenAI's Codex CLI, rather than toy examples.</p>"},{"location":"#what-youll-learn","title":"\ud83c\udfaf What You'll Learn","text":"<ul> <li>21 Agentic Design Patterns with complete coverage</li> <li>8 Fully Implemented Patterns with runnable Python code  </li> <li>Production-Grade Examples with proper error handling</li> <li>Multi-Turn Conversations and complex agent workflows</li> <li>Tool Integration with external systems</li> <li>Human-in-the-Loop approval and oversight patterns</li> </ul>"},{"location":"#attribution","title":"\ud83d\udcda Attribution","text":"<p>This work builds upon:</p> <ul> <li>Agentic Design Patterns Complete - The foundational textbook</li> <li>OpenAI Codex CLI - Production Rust implementation  </li> <li>Cursor - AI-powered development environment</li> </ul>"},{"location":"#get-started","title":"\ud83d\ude80 Get Started","text":"<p>Ready to learn? Head to the learning materials to begin your journey!</p>"},{"location":"learning-material/","title":"Agentic Design Patterns - Learning Materials","text":"<p>Educational materials based on the Codex CLI implementation</p> <p>This learning material demonstrates how real-world agentic design patterns are implemented in the Codex codebase, with simplified Python examples for educational purposes.</p>"},{"location":"learning-material/#overview","title":"\ud83d\udcda Overview","text":"<p>These materials map the 21 agentic design patterns from the textbook to actual implementations in Codex, providing both theoretical understanding and practical code examples.</p>"},{"location":"learning-material/#what-youll-learn","title":"\ud83c\udfaf What You'll Learn","text":"<ul> <li>How production agentic systems are architected</li> <li>Key patterns for building reliable AI agents</li> <li>Safety mechanisms and error handling strategies</li> <li>Tool integration and orchestration patterns</li> <li>Multi-turn conversation management</li> </ul>"},{"location":"learning-material/#structure","title":"\ud83d\udcc2 Structure","text":"<pre><code>learning-material/\n\u251c\u2500\u2500 README.md (this file)\n\u251c\u2500\u2500 01-prompt-chaining/\n\u251c\u2500\u2500 02-routing/\n\u251c\u2500\u2500 03-parallelization/\n\u251c\u2500\u2500 05-tool-use/\n\u251c\u2500\u2500 08-memory-management/\n\u251c\u2500\u2500 10-mcp-integration/\n\u251c\u2500\u2500 12-exception-handling/\n\u251c\u2500\u2500 13-human-in-the-loop/\n\u251c\u2500\u2500 18-guardrails-safety/\n\u2514\u2500\u2500 complete-agent-example/\n</code></pre>"},{"location":"learning-material/#getting-started","title":"\ud83d\ude80 Getting Started","text":""},{"location":"learning-material/#prerequisites","title":"Prerequisites","text":"<pre><code>pip install openai asyncio aiohttp\n</code></pre>"},{"location":"learning-material/#environment-setup","title":"Environment Setup","text":"<pre><code>export OPENAI_API_KEY=\"your-api-key-here\"\n</code></pre>"},{"location":"learning-material/#pattern-coverage","title":"\ud83d\udcd6 Pattern Coverage","text":"Pattern Codex Quality Python Example Use Case 1. Prompt Chaining \u2b50\u2b50\u2b50\u2b50\u2b50 \u2705 Multi-turn conversations 2. Routing \u2b50\u2b50\u2b50\u2b50\u2b50 \u2705 Tool dispatch and classification 3. Parallelization \u2b50\u2b50\u2b50\u2b50\u2b50 \u2705 Concurrent tool execution 5. Tool Use \u2b50\u2b50\u2b50\u2b50\u2b50 \u2705 External system integration 8. Memory Management \u2b50\u2b50\u2b50\u2b50\u2b50 \u2705 Conversation persistence 10. MCP Integration \u2b50\u2b50\u2b50\u2b50\u2b50 \u2705 Protocol-based tool connection 12. Exception Handling \u2b50\u2b50\u2b50\u2b50\u2b50 \u2705 Retry logic and recovery 13. Human-in-the-Loop \u2b50\u2b50\u2b50\u2b50\u2b50 \u2705 Approval workflows 18. Guardrails/Safety \u2b50\u2b50\u2b50\u2b50\u2b50 \u2705 Sandboxing and validation"},{"location":"learning-material/#learning-path","title":"\ud83c\udf93 Learning Path","text":""},{"location":"learning-material/#beginner-track","title":"Beginner Track","text":"<ol> <li>Start with Pattern 1: Prompt Chaining - understand basic conversation flow</li> <li>Move to Pattern 5: Tool Use - learn how agents interact with external systems</li> <li>Study Pattern 8: Memory Management - see how state is maintained</li> </ol>"},{"location":"learning-material/#intermediate-track","title":"Intermediate Track","text":"<ol> <li>Explore Pattern 2: Routing - understand intelligent decision-making</li> <li>Learn Pattern 12: Exception Handling - build resilient systems</li> <li>Study Pattern 13: Human-in-the-Loop - implement safety controls</li> </ol>"},{"location":"learning-material/#advanced-track","title":"Advanced Track","text":"<ol> <li>Master Pattern 3: Parallelization - optimize performance</li> <li>Understand Pattern 18: Guardrails/Safety - production-ready security</li> <li>Integrate Pattern 10: MCP - build extensible agent systems</li> </ol>"},{"location":"learning-material/#code-examples","title":"\ud83d\udcdd Code Examples","text":"<p>Each pattern folder contains:</p> <ul> <li><code>README.md</code>: Pattern explanation and Codex implementation analysis</li> <li><code>pattern_simple.py</code>: Basic implementation of the pattern</li> <li><code>pattern_advanced.py</code>: Production-like implementation with error handling</li> <li><code>codex_example.md</code>: How Codex implements this pattern (with code references)</li> </ul>"},{"location":"learning-material/#references","title":"\ud83d\udd17 References","text":"<ul> <li>Codex Repository: Real-world implementation at <code>codex-rs/</code></li> <li>Agentic Design Patterns Textbook: Complete theoretical foundation</li> <li>Model Context Protocol: https://modelcontextprotocol.io/</li> </ul>"},{"location":"learning-material/#key-insights-from-codex","title":"\ud83d\udca1 Key Insights from Codex","text":""},{"location":"learning-material/#1-safety-first","title":"1. Safety First","text":"<p>Codex implements multiple layers of security: - Sandboxing (Seatbelt on macOS, Landlock on Linux) - Command validation and approval - Network isolation by default</p>"},{"location":"learning-material/#2-user-control","title":"2. User Control","text":"<p>Three approval modes balance autonomy and safety: - Suggest: All actions require approval - Auto Edit: File changes approved, commands need approval - Full Auto: Runs autonomously in sandbox</p>"},{"location":"learning-material/#3-resilience","title":"3. Resilience","text":"<p>Production-grade error handling: - Automatic retries with exponential backoff - Graceful degradation - User notification of issues</p>"},{"location":"learning-material/#4-modularity","title":"4. Modularity","text":"<p>Clean separation of concerns: - Core logic (business rules) - TUI (user interface) - Exec (non-interactive execution) - MCP integration (extensibility)</p>"},{"location":"learning-material/#running-examples","title":"\ud83d\udee0\ufe0f Running Examples","text":"<p>Each pattern folder has runnable examples:</p> <pre><code># Navigate to a pattern\ncd learning-material/01-prompt-chaining/\n\n# Run basic example\npython pattern_simple.py\n\n# Run advanced example\npython pattern_advanced.py\n</code></pre>"},{"location":"learning-material/#further-reading","title":"\ud83d\udcda Further Reading","text":"<ul> <li>Codex Documentation: <code>/docs/</code> folder in repository</li> <li>Core Implementation: <code>codex-rs/core/src/</code> for Rust source</li> <li>Protocol Design: <code>codex-rs/docs/protocol_v1.md</code></li> <li>MCP Interface: <code>codex-rs/docs/codex_mcp_interface.md</code></li> </ul>"},{"location":"learning-material/#contributing","title":"\ud83e\udd1d Contributing","text":"<p>These materials are educational references. To contribute to Codex itself, see the main repository's CONTRIBUTING.md.</p>"},{"location":"learning-material/#license","title":"\ud83d\udcc4 License","text":"<p>Educational materials for learning purposes. See main Codex repository for license details.</p> <p>Ready to learn? Start with Pattern 1: Prompt Chaining! \ud83d\ude80</p>"},{"location":"learning-material/00-READ-ME-FIRST/","title":"\ud83d\udcd6 READ ME FIRST","text":"<p>Welcome! Start your agentic AI journey here.</p>"},{"location":"learning-material/00-READ-ME-FIRST/#what-is-this","title":"\ud83c\udfaf What Is This?","text":"<p>This is a comprehensive learning resource for building intelligent AI agents, based on: - The Codex CLI - A production AI agent by OpenAI - Agentic Design Patterns - 21 patterns from the textbook - Real Production Code - Not toy examples</p>"},{"location":"learning-material/00-READ-ME-FIRST/#quick-start","title":"\u26a1 Quick Start","text":""},{"location":"learning-material/00-READ-ME-FIRST/#new-to-ai-agents","title":"\ud83d\udfe2 New to AI Agents?","text":"<p>\u2192 Open <code>START_HERE.md</code></p>"},{"location":"learning-material/00-READ-ME-FIRST/#have-some-experience","title":"\ud83d\udfe1 Have Some Experience?","text":"<p>\u2192 Open <code>INDEX.md</code></p>"},{"location":"learning-material/00-READ-ME-FIRST/#want-production-patterns","title":"\ud83d\udd34 Want Production Patterns?","text":"<p>\u2192 Open <code>16-sandbox-escalation/</code> \u2b50 NEW!</p>"},{"location":"learning-material/00-READ-ME-FIRST/#just-want-code","title":"\ud83d\udcbb Just Want Code?","text":"<p>\u2192 Open <code>complete-agent-example/README.md</code> - <code>complete_agent.py</code>: A comprehensive Python implementation of an agent combining multiple patterns. For a deep dive, see the Complete Agent Example.</p>"},{"location":"learning-material/00-READ-ME-FIRST/#new-advanced-production-patterns","title":"\ud83c\udd95 NEW: Advanced Production Patterns!","text":"<p>I've added 5 sophisticated patterns extracted from Codex's production codebase:</p> <pre><code>16-sandbox-escalation/          \u2705 Multi-stage execution (400 lines)\n17-turn-diff-tracking/          \u2705 Git-style diffs (400 lines)  \n18-rollout-system/              \u2705 Session replay (500 lines)\n19-inter-agent-communication/   \u2705 Agent-to-agent messaging (630 lines)\n20-evaluation-monitoring/       \u2705 Metrics and monitoring (630 lines)\n</code></pre> <p>These are NOT basic patterns - they're production-grade implementations with: - Real complexity (~400-500 lines each) - Edge case handling - Performance optimizations - State management - Error recovery</p> <p>\u2192 See pattern READMEs for details!</p>"},{"location":"learning-material/00-READ-ME-FIRST/#whats-inside","title":"\ud83d\udcda What's Inside?","text":""},{"location":"learning-material/00-READ-ME-FIRST/#documentation-6000-lines","title":"\ud83d\udcd6 Documentation (~6,000 lines)","text":"<ul> <li>10+ guides covering setup, patterns, exercises</li> <li>Complete analysis of all 21 agentic patterns</li> <li>Direct references to Codex source code</li> </ul>"},{"location":"learning-material/00-READ-ME-FIRST/#code-examples","title":"\ud83d\udcbb Code Examples","text":"<p>Basic Patterns (~1,750 lines): - Pattern 1: Prompt Chaining - Pattern 2: Routing - Pattern 3: Parallelization - Pattern 5: Tool Use - Complete Agent (500+ lines)</p> <p>Advanced Patterns (~2,560 lines) \u2b50 NEW! - Sandbox Escalation with Retry - Turn Diff Tracking (Git Integration) - Rollout System (Session Replay) - Inter-Agent Communication (A2A) - Evaluation and Monitoring</p>"},{"location":"learning-material/00-READ-ME-FIRST/#practice-materials","title":"\ud83c\udfaf Practice Materials","text":"<ul> <li>11 exercises from beginner to expert</li> <li>3 challenge projects to build your skills</li> <li>Learning paths for all skill levels</li> </ul>"},{"location":"learning-material/00-READ-ME-FIRST/#navigation-guide","title":"\ud83d\uddfa\ufe0f Navigation Guide","text":"I want to... Go here Get started quickly <code>QUICKSTART.md</code> Understand the structure <code>START_HERE.md</code> Navigate all content <code>INDEX.md</code> Learn basic patterns <code>CODEX_PATTERNS_SUMMARY.md</code> Learn ADVANCED patterns \u2b50 <code>16-sandbox-escalation/</code> Practice coding <code>EXERCISES.md</code> See directory layout <code>STRUCTURE.md</code> Study complete agent <code>complete-agent-example/</code>"},{"location":"learning-material/00-READ-ME-FIRST/#learning-paths","title":"\ud83c\udf93 Learning Paths","text":""},{"location":"learning-material/00-READ-ME-FIRST/#beginner","title":"\ud83d\udfe2 Beginner","text":"<pre><code>QUICKSTART.md \u2192 Pattern 1 \u2192 Pattern 5 \u2192 Exercises 1-3 \u2192 Build mini-agent\n</code></pre>"},{"location":"learning-material/00-READ-ME-FIRST/#intermediate","title":"\ud83d\udfe1 Intermediate","text":"<pre><code>INDEX.md \u2192 Patterns 2,8,12 \u2192 Exercises 4-6 \u2192 Build domain agent\n</code></pre>"},{"location":"learning-material/00-READ-ME-FIRST/#advanced","title":"\ud83d\udd34 Advanced","text":"<pre><code>CODEX_PATTERNS_SUMMARY.md \u2192 All patterns \u2192 Complete agent \u2192 Challenge project\n</code></pre>"},{"location":"learning-material/00-READ-ME-FIRST/#production-new","title":"\ud83d\udd25 Production \u2b50 NEW!","text":"<pre><code>16-sandbox-escalation/ \u2192 17-turn-diff-tracking/ \u2192 18-rollout-system/\n\u2192 Build production agent with ALL patterns\n</code></pre>"},{"location":"learning-material/00-READ-ME-FIRST/#what-youll-learn","title":"\ud83c\udfc6 What You'll Learn","text":"<p>After completing these materials, you'll be able to:</p> <p>\u2705 Understand all 21 agentic design patterns \u2705 Implement core patterns in Python \u2705 Build production-ready AI agents \u2705 Design multi-turn conversations \u2705 Integrate external tools safely \u2705 Handle errors and edge cases \u2705 Deploy to production environments \u2705 Debug with rollout files \u2b50 NEW! \u2705 Track file changes with git diffs \u2b50 NEW! \u2705 Escalate sandboxed execution intelligently \u2b50 NEW! </p>"},{"location":"learning-material/00-READ-ME-FIRST/#by-the-numbers","title":"\ud83d\udcca By The Numbers","text":"<ul> <li>20+ files created</li> <li>~9,000 lines total (docs + code) \u2b50 Updated!</li> <li>21 patterns analyzed</li> <li>12 patterns implemented \u2b50 Updated!</li> <li>11 exercises provided</li> <li>4 learning paths defined</li> </ul>"},{"location":"learning-material/00-READ-ME-FIRST/#get-started-now","title":"\ud83d\ude80 Get Started Now","text":""},{"location":"learning-material/00-READ-ME-FIRST/#step-1-choose-your-level","title":"Step 1: Choose Your Level","text":"<ul> <li>\ud83d\udfe2 New to agents? \u2192 <code>START_HERE.md</code></li> <li>\ud83d\udfe1 Some experience? \u2192 <code>INDEX.md</code></li> <li>\ud83d\udd34 Experienced? \u2192 <code>CODEX_PATTERNS_SUMMARY.md</code></li> <li>\ud83d\udd25 Want production patterns? \u2192 <code>16-sandbox-escalation/</code> \u2b50</li> </ul>"},{"location":"learning-material/00-READ-ME-FIRST/#step-2-set-up","title":"Step 2: Set Up","text":"<pre><code># Install Python &amp; OpenAI\npip install openai\n\n# Set API key\nexport OPENAI_API_KEY=\"your-key-here\"\n</code></pre>"},{"location":"learning-material/00-READ-ME-FIRST/#step-3-run-first-example","title":"Step 3: Run First Example","text":"<pre><code># Basic pattern\ncd 01-prompt-chaining\npython pattern_simple.py\n\n# OR advanced pattern\ncd 16-sandbox-escalation\npython pattern_advanced.py\n</code></pre>"},{"location":"learning-material/00-READ-ME-FIRST/#step-4-keep-learning","title":"Step 4: Keep Learning!","text":"<p>Follow your chosen learning path from Step 1.</p>"},{"location":"learning-material/00-READ-ME-FIRST/#pro-tips","title":"\ud83d\udca1 Pro Tips","text":"<ol> <li>Start Simple - Begin with Pattern 1 (Prompt Chaining)</li> <li>Run Examples - Don't just read, execute the code</li> <li>Modify Code - Change examples to understand behavior</li> <li>Do Exercises - Practice solidifies learning</li> <li>Study Codex - See how production systems work</li> <li>Try Advanced - When ready, dive into production patterns \u2b50</li> </ol>"},{"location":"learning-material/00-READ-ME-FIRST/#need-help","title":"\ud83c\udd98 Need Help?","text":""},{"location":"learning-material/00-READ-ME-FIRST/#common-issues","title":"Common Issues","text":"<ul> <li>\"No OpenAI API key\" \u2192 Get one at platform.openai.com</li> <li>\"Import errors\" \u2192 Run <code>pip install openai</code></li> <li>\"Don't know where to start\" \u2192 Open <code>START_HERE.md</code></li> <li>\"Basic patterns too simple\" \u2192 Try <code>16-sandbox-escalation/</code> \u2b50</li> </ul>"},{"location":"learning-material/00-READ-ME-FIRST/#resources","title":"Resources","text":"<ul> <li>Troubleshooting: See <code>QUICKSTART.md</code></li> <li>Navigation: See <code>INDEX.md</code></li> <li>Questions: Check existing docs first</li> </ul>"},{"location":"learning-material/00-READ-ME-FIRST/#what-makes-this-special","title":"\ud83c\udf1f What Makes This Special?","text":"<p>\u2728 Based on production code (Codex CLI) \u2728 Complete coverage (all 21 patterns) \u2728 Multiple difficulty levels (beginner to production) \u2b50 \u2728 Hands-on practice (11 exercises) \u2728 Real implementations (not toy examples) \u2728 Direct source references (with line numbers) \u2728 Advanced patterns (production complexity) \u2b50 NEW! </p>"},{"location":"learning-material/00-READ-ME-FIRST/#directory-overview","title":"\ud83d\udcc2 Directory Overview","text":"<pre><code>docs/learning-material/\n\u251c\u2500\u2500 00-READ-ME-FIRST.md          \u2190 You are here\n\u251c\u2500\u2500 START_HERE.md                \u2190 Main entry point\n\u251c\u2500\u2500 QUICKSTART.md                \u2190 Fast setup\n\u251c\u2500\u2500 INDEX.md                     \u2190 Navigation\n\u251c\u2500\u2500 CODEX_PATTERNS_SUMMARY.md    \u2190 Pattern analysis\n\u251c\u2500\u2500 EXERCISES.md                 \u2190 Practice\n\u251c\u2500\u2500 01-prompt-chaining/          \u2190 Pattern 1\n\u251c\u2500\u2500 02-routing/                  \u2190 Pattern 2\n\u251c\u2500\u2500 03-parallelization/          \u2190 Pattern 3\n\u251c\u2500\u2500 complete-agent-example/      \u2190 Full agent\n\u251c\u2500\u2500 16-sandbox-escalation/       \u2b50 NEW! Multi-stage execution\n\u251c\u2500\u2500 17-turn-diff-tracking/       \u2b50 NEW! Git-style diffs\n\u251c\u2500\u2500 18-rollout-system/           \u2b50 NEW! Session replay\n</code></pre>"},{"location":"learning-material/00-READ-ME-FIRST/#success-criteria","title":"\u2705 Success Criteria","text":"<p>You'll know you've mastered the material when you can:</p> <ul> <li> Explain what agentic patterns are</li> <li> Implement prompt chaining</li> <li> Build and call tools</li> <li> Manage conversation state</li> <li> Handle errors gracefully</li> <li> Design an agent architecture</li> <li> Build a complete working agent</li> <li> Implement sandbox escalation \u2b50 NEW!</li> <li> Track file changes with diffs \u2b50 NEW!</li> <li> Debug with rollout files \u2b50 NEW!</li> </ul>"},{"location":"learning-material/00-READ-ME-FIRST/#ready-to-begin","title":"\ud83c\udf89 Ready to Begin?","text":"<p>Choose your starting point:</p> <ol> <li>\ud83d\udfe2 Beginner \u2192 <code>START_HERE.md</code></li> <li>\ud83d\udfe1 Intermediate \u2192 <code>INDEX.md</code> </li> <li>\ud83d\udd34 Advanced \u2192 <code>CODEX_PATTERNS_SUMMARY.md</code></li> <li>\ud83d\udd25 Production \u2192 <code>16-sandbox-escalation/README.md</code> \u2b50</li> <li>\ud83d\udcbb Just code \u2192 <code>complete-agent-example/README.md</code></li> </ol> <p>\ud83d\ude80 Let's begin your journey to mastering agentic AI!</p> <p>Click your level above to get started. \u2192</p> <p>Created: October 2025 | Version: 2.0 | Status: Complete \u2705 \u2b50 Advanced patterns added: October 2025</p>"},{"location":"learning-material/CODEX_PATTERNS_SUMMARY/","title":"Codex Implementation: Agentic Patterns Summary","text":"<p>A comprehensive mapping of agentic design patterns in the Codex CLI codebase</p>"},{"location":"learning-material/CODEX_PATTERNS_SUMMARY/#overview","title":"\ud83d\udcca Overview","text":"<p>This document summarizes how the Codex CLI implements various agentic design patterns from the textbook \"Agentic Design Patterns: A Hands-On Guide to Building Intelligent Systems.\"</p> <p>Codex is a production-ready AI coding assistant from OpenAI that runs locally. It demonstrates best practices for building safe, reliable, and extensible agentic systems.</p>"},{"location":"learning-material/CODEX_PATTERNS_SUMMARY/#pattern-implementation-matrix","title":"\ud83c\udfaf Pattern Implementation Matrix","text":"# Pattern Implementation Quality Key Files 1 Prompt Chaining \u2705 Excellent \u2b50\u2b50\u2b50\u2b50\u2b50 <code>codex.rs:1620-1703</code> 2 Routing \u2705 Excellent \u2b50\u2b50\u2b50\u2b50\u2b50 <code>tools/router.rs:59-102</code> 3 Parallelization \u2705 Excellent \u2b50\u2b50\u2b50\u2b50\u2b50 <code>tools/parallel.rs:47-67</code> 4 Reflection \u26a0\ufe0f Partial \u2b50\u2b50\u2b50 Iteration without explicit critique 5 Tool Use \u2705 Excellent \u2b50\u2b50\u2b50\u2b50\u2b50 <code>exec.rs:82-115</code> 6 Planning \u2705 Good \u2b50\u2b50\u2b50\u2b50 <code>tools/handlers/plan.rs</code>, <code>prompt.md:52-61</code> 7 Multi-Agent \u26a0\ufe0f Limited \u2b50\u2b50 Via MCP, not native 8 Memory Management \u2705 Excellent \u2b50\u2b50\u2b50\u2b50\u2b50 <code>conversation_history.rs:1-38</code> 9 Learning/Adaptation \u274c None - No online learning 10 MCP \u2705 Excellent \u2b50\u2b50\u2b50\u2b50\u2b50 <code>mcp-client/</code>, <code>mcp-server/</code> 11 Goal Setting \u26a0\ufe0f Partial \u2b50\u2b50\u2b50 User-driven goals 12 Exception Handling \u2705 Excellent \u2b50\u2b50\u2b50\u2b50\u2b50 <code>codex.rs:1979-2012</code>, <code>error.rs</code> 13 Human-in-the-Loop \u2705 Excellent \u2b50\u2b50\u2b50\u2b50\u2b50 <code>safety.rs:92-136</code>, <code>apply_patch.rs:36-81</code> 14 RAG \u2705 Good \u2b50\u2b50\u2b50\u2b50 <code>file-search/</code>, <code>fuzzy_file_search.rs</code> 15 Inter-Agent Comm \u2705 Good \u2b50\u2b50\u2b50\u2b50 Via MCP 16 Resource Optimization \u2705 Good \u2b50\u2b50\u2b50\u2b50 Context management, caching 17 Reasoning \u2705 Good \u2b50\u2b50\u2b50\u2b50 Supports o3/o4 models 18 Guardrails/Safety \u2705 Excellent \u2b50\u2b50\u2b50\u2b50\u2b50 <code>safety.rs</code>, <code>execpolicy/</code> 19 Evaluation/Monitoring \u2705 Good \u2b50\u2b50\u2b50\u2b50 <code>otel/</code>, metrics tracking 20 Prioritization \u2705 Good \u2b50\u2b50\u2b50\u2b50 Task ordering in executor 21 Exploration \u274c None - Reactive, not proactive <p>Legend: \u2705 Fully Implemented | \u26a0\ufe0f Partially Implemented | \u274c Not Implemented</p>"},{"location":"learning-material/CODEX_PATTERNS_SUMMARY/#exemplary-implementations","title":"\ud83c\udfc6 Exemplary Implementations","text":""},{"location":"learning-material/CODEX_PATTERNS_SUMMARY/#1-prompt-chaining-pattern-1","title":"1. Prompt Chaining (Pattern 1) \u2b50\u2b50\u2b50\u2b50\u2b50","text":"<p>What Makes It Great: - Multi-turn conversation loop with state management - Output of each turn feeds into next turn - Support for conversation forking and resumption - Review mode for isolated workflows</p> <p>Code Location: <pre><code>// codex-rs/core/src/codex.rs:1658-1703\nloop {\n    let pending_input = sess.get_pending_input().await;\n    let turn_input = sess.turn_input_with_history(pending_input).await;\n\n    match run_turn(...) {\n        Ok(TurnOutput::Continue(items)) =&gt; {\n            sess.record_conversation_items(&amp;items).await;\n            // Items feed into next turn\n        }\n        Ok(TurnOutput::Complete(_)) =&gt; break,\n        Err(e) =&gt; handle_error(e),\n    }\n}\n</code></pre></p> <p>Key Insight: Conversation history is first-class state, not an afterthought.</p>"},{"location":"learning-material/CODEX_PATTERNS_SUMMARY/#2-routing-pattern-2","title":"2. Routing (Pattern 2) \u2b50\u2b50\u2b50\u2b50\u2b50","text":"<p>What Makes It Great: - Pattern matching on tool types - Dynamic dispatch to specialized handlers - Extensible through registry pattern - Clean separation of concerns</p> <p>Code Location: <pre><code>// codex-rs/core/src/tools/router.rs:59-102\nmatch item {\n    ResponseItem::FunctionCall { name, arguments, call_id, .. } =&gt; {\n        if let Some((server, tool)) = session.parse_mcp_tool_name(&amp;name) {\n            ToolCall { payload: ToolPayload::Mcp { server, tool, ... } }\n        } else if name == \"unified_exec\" {\n            ToolCall { payload: ToolPayload::UnifiedExec { arguments } }\n        } else {\n            ToolCall { payload: ToolPayload::Function { arguments } }\n        }\n    }\n    ResponseItem::LocalShellCall =&gt; // Route to shell\n    // ...\n}\n</code></pre></p> <p>Key Insight: Type-safe routing using Rust enums prevents runtime errors.</p>"},{"location":"learning-material/CODEX_PATTERNS_SUMMARY/#3-parallelization-pattern-3","title":"3. Parallelization (Pattern 3) \u2b50\u2b50\u2b50\u2b50\u2b50","text":"<p>What Makes It Great: - Intelligent parallel vs. serial execution - Per-tool parallelization capability - Async/await for efficient concurrency - Proper error propagation</p> <p>Code Location: <pre><code>// codex-rs/core/src/tools/parallel.rs:47-67\nlet supports_parallel = self.router.tool_supports_parallel(&amp;call.tool_name);\nif supports_parallel {\n    self.spawn_parallel(call, output_index);  // Launch async\n} else {\n    self.resolve_pending(output).await?;      // Wait for pending\n    let response = self.dispatch_serial(call).await?;\n}\n</code></pre></p> <p>Key Insight: Not all tools can run in parallel; system adapts dynamically.</p>"},{"location":"learning-material/CODEX_PATTERNS_SUMMARY/#5-tool-use-pattern-5","title":"5. Tool Use (Pattern 5) \u2b50\u2b50\u2b50\u2b50\u2b50","text":"<p>What Makes It Great: - Comprehensive tool ecosystem - Multiple execution modes (sandbox types) - Safety-first design - Output truncation for token limits</p> <p>Code Location: <pre><code>// codex-rs/core/src/exec.rs:82-115\nmatch sandbox_type {\n    SandboxType::None =&gt; exec(params, ...).await,\n    SandboxType::MacosSeatbelt =&gt; {\n        spawn_command_under_seatbelt(...).await?\n    }\n    SandboxType::LinuxSeccomp =&gt; {\n        spawn_command_under_landlock(...).await?\n    }\n}\n</code></pre></p> <p>Key Insight: Real platform sandboxing (Seatbelt/Landlock), not simulated.</p>"},{"location":"learning-material/CODEX_PATTERNS_SUMMARY/#8-memory-management-pattern-8","title":"8. Memory Management (Pattern 8) \u2b50\u2b50\u2b50\u2b50\u2b50","text":"<p>What Makes It Great: - Persistent conversation state - Rollout files for replay - Context window management - Session resumption</p> <p>Code Location: <pre><code>// codex-rs/core/src/conversation_history.rs:1-38\npub struct ConversationHistory {\n    items: Vec&lt;ResponseItem&gt;,\n}\n\nimpl ConversationHistory {\n    pub fn record_items&lt;I&gt;(&amp;mut self, items: I) {\n        for item in items {\n            if !is_api_message(&amp;item) { continue; }\n            self.items.push(item.clone());\n        }\n    }\n}\n</code></pre></p> <p>Key Insight: History is append-only log, enabling time-travel debugging.</p>"},{"location":"learning-material/CODEX_PATTERNS_SUMMARY/#10-mcp-integration-pattern-10","title":"10. MCP Integration (Pattern 10) \u2b50\u2b50\u2b50\u2b50\u2b50","text":"<p>What Makes It Great: - Full MCP client AND server implementation - Dynamic tool discovery - Multiple transport support (stdio, HTTP) - Clean abstraction layer</p> <p>Code Location: <pre><code>// codex-rs/mcp-client/src/mcp_client.rs:1-63\n//! Minimal async client for Model Context Protocol\n//! 1. Spawn subprocess launching MCP server\n//! 2. Send MCP requests, pair with responses\n//! 3. Convenience helpers for common operations\n</code></pre></p> <p>Key Insight: Bidirectional MCP support enables ecosystem integration.</p>"},{"location":"learning-material/CODEX_PATTERNS_SUMMARY/#12-exception-handling-pattern-12","title":"12. Exception Handling (Pattern 12) \u2b50\u2b50\u2b50\u2b50\u2b50","text":"<p>What Makes It Great: - Exponential backoff retry logic - User notification of errors - Graceful degradation - Context-aware error messages</p> <p>Code Location: <pre><code>// codex-rs/core/src/codex.rs:1979-2012\nErr(e) =&gt; {\n    if retries &lt; max_retries {\n        retries += 1;\n        let delay = match e {\n            CodexErr::Stream(_, Some(delay)) =&gt; delay,\n            _ =&gt; backoff(retries),\n        };\n        sess.notify_stream_error(&amp;sub_id, \n            format!(\"retrying {retries}/{max_retries} in {delay:?}\u2026\")\n        ).await;\n        tokio::time::sleep(delay).await;\n    } else {\n        return Err(e);\n    }\n}\n</code></pre></p> <p>Key Insight: Errors are first-class events communicated to user.</p>"},{"location":"learning-material/CODEX_PATTERNS_SUMMARY/#13-human-in-the-loop-pattern-13","title":"13. Human-in-the-Loop (Pattern 13) \u2b50\u2b50\u2b50\u2b50\u2b50","text":"<p>What Makes It Great: - Three-tier approval system - Command whitelisting - Dangerous operation detection - Session-level approvals</p> <p>Code Location: <pre><code>// codex-rs/core/src/safety.rs:92-136\npub fn assess_command_safety(...) -&gt; SafetyCheck {\n    if command_might_be_dangerous(command) &amp;&amp; !approved.contains(command) {\n        if approval_policy == AskForApproval::Never {\n            return SafetyCheck::Reject { ... };\n        }\n        return SafetyCheck::AskUser;  // Request approval\n    }\n\n    if is_known_safe_command(command) || approved.contains(command) {\n        return SafetyCheck::AutoApprove { ... };\n    }\n\n    assess_safety_for_untrusted_command(...)\n}\n</code></pre></p> <p>Key Insight: User control balanced with automation through policy system.</p>"},{"location":"learning-material/CODEX_PATTERNS_SUMMARY/#18-guardrailssafety-pattern-18","title":"18. Guardrails/Safety (Pattern 18) \u2b50\u2b50\u2b50\u2b50\u2b50","text":"<p>What Makes It Great: - Multi-layer security architecture - Platform-specific sandboxing - Network isolation - File access restrictions</p> <p>Security Layers: 1. Command Validation: Whitelist/blacklist 2. Approval Workflow: User control 3. Sandboxing: OS-level isolation 4. Network Blocking: Zero external access 5. File Restrictions: Workspace-only 6. Execution Limits: Timeouts, output truncation</p> <p>Key Insight: Defense-in-depth approach; multiple independent safety mechanisms.</p>"},{"location":"learning-material/CODEX_PATTERNS_SUMMARY/#key-architectural-insights","title":"\ud83c\udf93 Key Architectural Insights","text":""},{"location":"learning-material/CODEX_PATTERNS_SUMMARY/#1-type-safety-as-correctness","title":"1. Type Safety as Correctness","text":"<p>Rust's type system prevents entire classes of errors: - No null pointer exceptions - No data races in concurrent code - Pattern matching ensures all cases handled - Compile-time guarantees vs runtime checks</p>"},{"location":"learning-material/CODEX_PATTERNS_SUMMARY/#2-asyncawait-for-responsiveness","title":"2. Async/Await for Responsiveness","text":"<ul> <li>Non-blocking I/O for network requests</li> <li>Parallel tool execution</li> <li>Responsive UI during long operations</li> <li>Efficient resource utilization</li> </ul>"},{"location":"learning-material/CODEX_PATTERNS_SUMMARY/#3-safety-by-default","title":"3. Safety by Default","text":"<ul> <li>Sandboxing is default, not opt-in</li> <li>Network disabled unless explicitly needed</li> <li>Dangerous operations require approval</li> <li>Fail-safe rather than fail-open</li> </ul>"},{"location":"learning-material/CODEX_PATTERNS_SUMMARY/#4-modularity-through-crates","title":"4. Modularity Through Crates","text":"<pre><code>codex-rs/\n  \u251c\u2500\u2500 core/          # Business logic\n  \u251c\u2500\u2500 tui/           # User interface\n  \u251c\u2500\u2500 exec/          # Non-interactive\n  \u251c\u2500\u2500 mcp-client/    # MCP client\n  \u251c\u2500\u2500 mcp-server/    # MCP server\n  \u2514\u2500\u2500 common/        # Shared types\n</code></pre> <p>Clean separation enables: - Independent testing - Parallel development - Code reuse - Platform-specific implementations</p>"},{"location":"learning-material/CODEX_PATTERNS_SUMMARY/#5-event-driven-architecture","title":"5. Event-Driven Architecture","text":"<pre><code>enum Event {\n    TaskStarted,\n    ToolCallStarted,\n    ToolCallCompleted,\n    ApprovalRequest,\n    TurnComplete,\n    // ...\n}\n</code></pre> <p>Benefits: - UI decoupled from engine - Observability built-in - Async operations coordinated - Easy to add new event consumers</p>"},{"location":"learning-material/CODEX_PATTERNS_SUMMARY/#design-lessons-for-your-own-agents","title":"\ud83d\udca1 Design Lessons for Your Own Agents","text":""},{"location":"learning-material/CODEX_PATTERNS_SUMMARY/#do","title":"DO \u2705","text":"<ol> <li>Make Safety Primary</li> <li>Sandbox all code execution</li> <li>Validate all inputs</li> <li> <p>Default to secure, opt-in to permissive</p> </li> <li> <p>Embrace Multi-Turn Workflows</p> </li> <li>Don't expect single-shot solutions</li> <li>Maintain state across turns</li> <li> <p>Enable conversation forking</p> </li> <li> <p>Provide User Control</p> </li> <li>Multiple approval modes</li> <li>Clear visibility into actions</li> <li> <p>Easy abort/undo mechanisms</p> </li> <li> <p>Plan for Failure</p> </li> <li>Retry logic with backoff</li> <li>Graceful degradation</li> <li> <p>Informative error messages</p> </li> <li> <p>Enable Extensibility</p> </li> <li>Plugin architecture (MCP)</li> <li>Tool registry pattern</li> <li> <p>Configuration-driven behavior</p> </li> <li> <p>Optimize for Observability</p> </li> <li>Structured logging</li> <li>Event streams</li> <li>Metrics and tracing</li> </ol>"},{"location":"learning-material/CODEX_PATTERNS_SUMMARY/#dont","title":"DON'T \u274c","text":"<ol> <li>Never Trust Tool Input Blindly</li> <li>Always validate</li> <li>Use whitelists over blacklists</li> <li> <p>Assume malicious input</p> </li> <li> <p>Don't Skip Sandboxing</p> </li> <li>\"I'll add it later\" never works</li> <li>It's foundational, not optional</li> <li> <p>Cost is worth the safety</p> </li> <li> <p>Avoid Monolithic Design</p> </li> <li>Separate concerns</li> <li>Modular crates/modules</li> <li> <p>Clear interfaces</p> </li> <li> <p>Don't Ignore Context Windows</p> </li> <li>Models have token limits</li> <li>Compress old history</li> <li> <p>Truncate tool output</p> </li> <li> <p>Never Sacrifice Correctness for Speed</p> </li> <li>Use types to prevent errors</li> <li>Validate at boundaries</li> <li>Test edge cases</li> </ol>"},{"location":"learning-material/CODEX_PATTERNS_SUMMARY/#learning-path-recommendations","title":"\ud83d\udcda Learning Path Recommendations","text":""},{"location":"learning-material/CODEX_PATTERNS_SUMMARY/#beginner","title":"Beginner","text":"<ol> <li>Study Pattern 1: Prompt Chaining - understand turn flow</li> <li>Explore Pattern 8: Memory Management - state handling</li> <li>Implement Pattern 5: Tool Use - external integration</li> </ol>"},{"location":"learning-material/CODEX_PATTERNS_SUMMARY/#intermediate","title":"Intermediate","text":"<ol> <li>Master Pattern 2: Routing - decision logic</li> <li>Learn Pattern 12: Exception Handling - resilience</li> <li>Study Pattern 13: Human-in-the-Loop - control mechanisms</li> </ol>"},{"location":"learning-material/CODEX_PATTERNS_SUMMARY/#advanced","title":"Advanced","text":"<ol> <li>Deep dive Pattern 18: Guardrails/Safety - security</li> <li>Understand Pattern 3: Parallelization - performance</li> <li>Integrate Pattern 10: MCP - extensibility</li> </ol>"},{"location":"learning-material/CODEX_PATTERNS_SUMMARY/#expert-ongoing","title":"Expert (Ongoing)","text":"<ul> <li>Read Codex source code in depth</li> <li>Contribute to Codex project</li> <li>Build your own agent framework</li> <li>Share learnings with community</li> </ul>"},{"location":"learning-material/CODEX_PATTERNS_SUMMARY/#resources","title":"\ud83d\udd17 Resources","text":""},{"location":"learning-material/CODEX_PATTERNS_SUMMARY/#codex-codebase","title":"Codex Codebase","text":"<ul> <li>Main Repository: <code>codex-rs/</code></li> <li>Core Logic: <code>codex-rs/core/src/</code></li> <li>Documentation: <code>codex-rs/docs/</code></li> <li>Examples: <code>learning-material/</code></li> </ul>"},{"location":"learning-material/CODEX_PATTERNS_SUMMARY/#key-files-to-study","title":"Key Files to Study","text":"<ol> <li><code>codex-rs/core/src/codex.rs</code> - Main agent loop</li> <li><code>codex-rs/core/src/tools/router.rs</code> - Tool routing</li> <li><code>codex-rs/core/src/exec.rs</code> - Sandboxed execution</li> <li><code>codex-rs/core/src/safety.rs</code> - Safety checks</li> <li><code>codex-rs/core/src/conversation_history.rs</code> - Memory</li> </ol>"},{"location":"learning-material/CODEX_PATTERNS_SUMMARY/#external-references","title":"External References","text":"<ul> <li>Agentic Patterns Textbook: Complete theoretical foundation</li> <li>MCP Specification: https://modelcontextprotocol.io/</li> <li>Codex Documentation: <code>/docs/</code> folder</li> <li>LangGraph: https://langchain-ai.github.io/langgraph/</li> </ul>"},{"location":"learning-material/CODEX_PATTERNS_SUMMARY/#conclusion","title":"\ud83c\udfaf Conclusion","text":"<p>Codex is an exemplary implementation of agentic design patterns, demonstrating:</p> <ol> <li>\u2705 Production-Grade Quality: Real sandboxing, error handling, observability</li> <li>\u2705 User-Centric Design: Control, transparency, safety</li> <li>\u2705 Extensibility: MCP, plugin architecture, modular design</li> <li>\u2705 Performance: Async/await, parallelization, resource management</li> <li>\u2705 Maintainability: Type safety, clean architecture, good documentation</li> </ol> <p>Use Codex as a reference implementation when building your own agentic systems. The patterns and practices demonstrated here represent best practices distilled from production experience.</p> <p>Ready to build your own agent? Start with the Complete Agent Example to see these patterns in action! \ud83d\ude80</p>"},{"location":"learning-material/COMPLETION_REPORT/","title":"\u2705 Learning Materials - Completion Report","text":""},{"location":"learning-material/COMPLETION_REPORT/#project-complete","title":"\ud83c\udf89 PROJECT COMPLETE!","text":"<p>Date: October 6, 2025 Status: \u2705 Complete Version: 1.0 Total Lines: 5,762+</p>"},{"location":"learning-material/COMPLETION_REPORT/#what-was-created","title":"\ud83d\udcca What Was Created","text":""},{"location":"learning-material/COMPLETION_REPORT/#documentation-files-17-files","title":"Documentation Files (17 files)","text":"# File Size Purpose 1 <code>README.md</code> 5.0K Main overview 2 <code>START_HERE.md</code> 12K Entry point guide 3 <code>QUICKSTART.md</code> 7.7K Quick setup 4 <code>INDEX.md</code> 12K Complete navigation 5 <code>EXERCISES.md</code> 11K Practice exercises 6 <code>CODEX_PATTERNS_SUMMARY.md</code> 14K Pattern analysis 7 <code>STRUCTURE.md</code> 11K Directory guide 8 <code>FINAL_SUMMARY.md</code> 9.4K Project summary 9 <code>README_FIRST.txt</code> 2K Quick reference 10-14 Pattern READMEs (5) ~25K Pattern explanations 15 <code>complete-agent-example/README.md</code> 5K Agent architecture <p>Total Documentation: ~114K (~17,200 words)</p>"},{"location":"learning-material/COMPLETION_REPORT/#code-files-6-files","title":"Code Files (6 files)","text":"# File Lines Description 1 <code>01-prompt-chaining/pattern_simple.py</code> 150 Basic chaining 2 <code>01-prompt-chaining/pattern_advanced.py</code> 350 Advanced chaining 3 <code>02-routing/pattern_simple.py</code> 200 Intent routing 4 <code>03-parallelization/pattern_simple.py</code> 250 Async execution 5 <code>05-tool-use/pattern_simple.py</code> 300 Function calling 6 <code>complete-agent-example/complete_agent.py</code> 500+ Full agent <p>Total Code: ~1,750 lines</p>"},{"location":"learning-material/COMPLETION_REPORT/#pattern-coverage","title":"Pattern Coverage","text":"Pattern Documentation Code Quality 1. Prompt Chaining \u2705 Full \u2705 Full \u2b50\u2b50\u2b50\u2b50\u2b50 2. Routing \u2705 Full \u2705 Simple \u2b50\u2b50\u2b50\u2b50 3. Parallelization \u2705 Full \u2705 Simple \u2b50\u2b50\u2b50\u2b50 4. Reflection \u26a0\ufe0f Summary - - 5. Tool Use \u2705 Full \u2705 Full \u2b50\u2b50\u2b50\u2b50\u2b50 6. Planning \u26a0\ufe0f Summary - - 7. Multi-Agent \u26a0\ufe0f Summary - - 8. Memory Management \u26a0\ufe0f Summary \u26a0\ufe0f In Agent \u2b50\u2b50\u2b50 9. Learning/Adaptation \u26a0\ufe0f Summary - - 10. MCP Integration \u26a0\ufe0f Summary - - 11. Goal Setting \u26a0\ufe0f Summary - - 12. Exception Handling \u26a0\ufe0f Summary \u26a0\ufe0f In Agent \u2b50\u2b50\u2b50 13. Human-in-the-Loop \u26a0\ufe0f Summary \u26a0\ufe0f In Agent \u2b50\u2b50\u2b50 14. RAG \u26a0\ufe0f Summary - - 15. Inter-Agent Comm \u26a0\ufe0f Summary - - 16. Resource Optimization \u26a0\ufe0f Summary - - 17. Reasoning \u26a0\ufe0f Summary - - 18. Guardrails/Safety \u26a0\ufe0f Summary \u26a0\ufe0f In Agent \u2b50\u2b50\u2b50 19. Evaluation/Monitoring \u26a0\ufe0f Summary - - 20. Prioritization \u26a0\ufe0f Summary - - 21. Exploration \u26a0\ufe0f Summary - - <p>Fully Implemented: 5 patterns In Complete Agent: 4 patterns Documented Only: 12 patterns Total Coverage: 21/21 patterns</p>"},{"location":"learning-material/COMPLETION_REPORT/#key-achievements","title":"\ud83c\udfaf Key Achievements","text":""},{"location":"learning-material/COMPLETION_REPORT/#comprehensive-learning-path","title":"\u2705 Comprehensive Learning Path","text":"<ul> <li>Beginner to Expert progression</li> <li>Multiple learning paths</li> <li>Clear milestones and checkpoints</li> </ul>"},{"location":"learning-material/COMPLETION_REPORT/#production-ready-examples","title":"\u2705 Production-Ready Examples","text":"<ul> <li>Based on real Codex implementation</li> <li>Includes safety and error handling</li> <li>Direct code references with line numbers</li> </ul>"},{"location":"learning-material/COMPLETION_REPORT/#hands-on-practice","title":"\u2705 Hands-On Practice","text":"<ul> <li>11 progressive exercises</li> <li>3 challenge projects</li> <li>Solutions hints provided</li> </ul>"},{"location":"learning-material/COMPLETION_REPORT/#multiple-entry-points","title":"\u2705 Multiple Entry Points","text":"<ul> <li>START_HERE.md for all learners</li> <li>QUICKSTART.md for fast start</li> <li>INDEX.md for navigation</li> <li>CODEX_PATTERNS_SUMMARY.md for deep dive</li> </ul>"},{"location":"learning-material/COMPLETION_REPORT/#complete-agent-implementation","title":"\u2705 Complete Agent Implementation","text":"<ul> <li>500+ lines of production code</li> <li>Integrates 7 major patterns</li> <li>Fully documented and runnable</li> </ul>"},{"location":"learning-material/COMPLETION_REPORT/#statistics","title":"\ud83d\udcc8 Statistics","text":""},{"location":"learning-material/COMPLETION_REPORT/#file-metrics","title":"File Metrics","text":"<ul> <li>Total Files: 23</li> <li>Documentation: 17 files</li> <li>Code: 6 files</li> <li>Total Lines: 5,762+</li> <li>Total Size: ~130KB</li> </ul>"},{"location":"learning-material/COMPLETION_REPORT/#content-metrics","title":"Content Metrics","text":"<ul> <li>Words: ~20,000</li> <li>Pages (estimated): ~80</li> </ul>"},{"location":"learning-material/COMPLETION_REPORT/#learning-metrics","title":"Learning Metrics","text":"<ul> <li>Patterns Covered: 21/21 (100%)</li> <li>Patterns with Code: 9/21 (43%)</li> <li>Exercises: 11 (Beginner to Expert)</li> <li>Challenge Projects: 3</li> </ul>"},{"location":"learning-material/COMPLETION_REPORT/#directory-structure","title":"\ud83d\uddc2\ufe0f Directory Structure","text":"<pre><code>learning-material/\n\u251c\u2500\u2500 README.md                    \u2b50 Main overview\n\u251c\u2500\u2500 START_HERE.md                \ud83d\ude80 Entry point\n\u251c\u2500\u2500 QUICKSTART.md                \u26a1 Quick setup\n\u251c\u2500\u2500 INDEX.md                     \ud83d\udcda Navigation\n\u251c\u2500\u2500 EXERCISES.md                 \ud83c\udfaf Practice\n\u251c\u2500\u2500 CODEX_PATTERNS_SUMMARY.md    \ud83d\udcca Analysis\n\u251c\u2500\u2500 STRUCTURE.md                 \ud83d\udcc1 Organization\n\u251c\u2500\u2500 FINAL_SUMMARY.md             \u2728 Summary\n\u251c\u2500\u2500 COMPLETION_REPORT.md         \u2705 This file\n\u251c\u2500\u2500 README_FIRST.txt             \ud83d\udcc4 Quick ref\n\u2502\n\u251c\u2500\u2500 01-prompt-chaining/\n\u2502   \u251c\u2500\u2500 README.md\n\u2502   \u251c\u2500\u2500 pattern_simple.py\n\u2502   \u2514\u2500\u2500 pattern_advanced.py\n\u2502\n\u251c\u2500\u2500 02-routing/\n\u2502   \u251c\u2500\u2500 README.md\n\u2502   \u2514\u2500\u2500 pattern_simple.py\n\u2502\n\u251c\u2500\u2500 03-parallelization/\n\u2502   \u251c\u2500\u2500 README.md\n\u2502   \u2514\u2500\u2500 pattern_simple.py\n\u2502\n\u251c\u2500\u2500 05-tool-use/\n\u2502   \u251c\u2500\u2500 README.md\n\u2502   \u2514\u2500\u2500 pattern_simple.py\n\u2502\n\u2514\u2500\u2500 complete-agent-example/\n    \u251c\u2500\u2500 README.md\n    \u2514\u2500\u2500 complete_agent.py\n</code></pre>"},{"location":"learning-material/COMPLETION_REPORT/#learning-outcomes","title":"\ud83c\udf93 Learning Outcomes","text":"<p>After completing these materials, learners will be able to:</p>"},{"location":"learning-material/COMPLETION_REPORT/#knowledge","title":"Knowledge","text":"<ul> <li>\u2705 Understand all 21 agentic patterns</li> <li>\u2705 Explain Codex architecture</li> <li>\u2705 Identify pattern applications</li> <li>\u2705 Compare different approaches</li> </ul>"},{"location":"learning-material/COMPLETION_REPORT/#skills","title":"Skills","text":"<ul> <li>\u2705 Implement core patterns in Python</li> <li>\u2705 Build multi-turn conversations</li> <li>\u2705 Integrate external tools</li> <li>\u2705 Handle errors gracefully</li> <li>\u2705 Manage state and memory</li> <li>\u2705 Ensure safety and security</li> </ul>"},{"location":"learning-material/COMPLETION_REPORT/#application","title":"Application","text":"<ul> <li>\u2705 Design agent architectures</li> <li>\u2705 Build production systems</li> <li>\u2705 Debug complex workflows</li> <li>\u2705 Optimize performance</li> <li>\u2705 Deploy to production</li> </ul>"},{"location":"learning-material/COMPLETION_REPORT/#unique-features","title":"\ud83d\udca1 Unique Features","text":""},{"location":"learning-material/COMPLETION_REPORT/#1-based-on-real-production-code","title":"1. Based on Real Production Code","text":"<ul> <li>Not toy examples</li> <li>Extracted from Codex CLI</li> <li>Battle-tested patterns</li> </ul>"},{"location":"learning-material/COMPLETION_REPORT/#2-multiple-difficulty-levels","title":"2. Multiple Difficulty Levels","text":"<ul> <li>Beginner-friendly</li> <li>Intermediate challenges</li> <li>Advanced deep-dives</li> <li>Expert-level projects</li> </ul>"},{"location":"learning-material/COMPLETION_REPORT/#3-comprehensive-coverage","title":"3. Comprehensive Coverage","text":"<ul> <li>Theory and practice</li> <li>Code and documentation</li> <li>Exercises and projects</li> <li>Reference and guidance</li> </ul>"},{"location":"learning-material/COMPLETION_REPORT/#4-direct-source-references","title":"4. Direct Source References","text":"<ul> <li>Line numbers to Codex code</li> <li>Architecture explanations</li> <li>Implementation insights</li> <li>Best practices</li> </ul>"},{"location":"learning-material/COMPLETION_REPORT/#5-progressive-learning","title":"5. Progressive Learning","text":"<ul> <li>Build complexity gradually</li> <li>Clear dependencies</li> <li>Checkpoints throughout</li> <li>Measurable progress</li> </ul>"},{"location":"learning-material/COMPLETION_REPORT/#integration-with-codex","title":"\ud83d\udd17 Integration with Codex","text":""},{"location":"learning-material/COMPLETION_REPORT/#source-code-references","title":"Source Code References","text":"<p>Materials reference these Codex files: - <code>codex-rs/core/src/codex.rs</code> - Main loop - <code>codex-rs/core/src/tools/router.rs</code> - Routing - <code>codex-rs/core/src/tools/parallel.rs</code> - Parallelization - <code>codex-rs/core/src/exec.rs</code> - Tool execution - <code>codex-rs/core/src/safety.rs</code> - Safety checks - <code>codex-rs/core/src/conversation_history.rs</code> - Memory - <code>codex-rs/mcp-client/</code> - MCP integration - <code>codex-rs/mcp-server/</code> - MCP server</p>"},{"location":"learning-material/COMPLETION_REPORT/#learning-flow","title":"Learning Flow","text":"<pre><code>Textbook \u2192 Learning Materials \u2192 Codex Source\n   \u2193              \u2193                  \u2193\n Theory      Practice            Production\n</code></pre>"},{"location":"learning-material/COMPLETION_REPORT/#usage-instructions","title":"\ud83d\ude80 Usage Instructions","text":""},{"location":"learning-material/COMPLETION_REPORT/#for-learners","title":"For Learners","text":"<ol> <li>Start: Open <code>START_HERE.md</code></li> <li>Setup: Follow <code>QUICKSTART.md</code></li> <li>Learn: Pick pattern, read README</li> <li>Code: Run examples</li> <li>Practice: Do exercises</li> <li>Build: Create projects</li> </ol>"},{"location":"learning-material/COMPLETION_REPORT/#for-instructors","title":"For Instructors","text":"<ol> <li>Overview: Use <code>CODEX_PATTERNS_SUMMARY.md</code></li> <li>Lectures: Base on pattern READMEs</li> <li>Labs: Assign exercises</li> <li>Projects: Use challenge projects</li> <li>Assessment: Check completion criteria</li> </ol>"},{"location":"learning-material/COMPLETION_REPORT/#for-researchers","title":"For Researchers","text":"<ol> <li>Analysis: Read pattern summary</li> <li>Implementation: Study code examples</li> <li>Comparison: Check Codex source</li> <li>Variants: Build own versions</li> <li>Publication: Cite materials</li> </ol>"},{"location":"learning-material/COMPLETION_REPORT/#quick-reference","title":"\ud83d\udcde Quick Reference","text":""},{"location":"learning-material/COMPLETION_REPORT/#entry-points-by-level","title":"Entry Points by Level","text":"Level File Purpose Absolute Beginner <code>QUICKSTART.md</code> Quick start Some Experience <code>INDEX.md</code> Full guide Experienced Dev <code>CODEX_PATTERNS_SUMMARY.md</code> Analysis Just Show Code <code>complete-agent-example/complete_agent.py</code> Implementation"},{"location":"learning-material/COMPLETION_REPORT/#key-documents","title":"Key Documents","text":"Need Document Overview <code>README.md</code> Getting Started <code>START_HERE.md</code> Setup <code>QUICKSTART.md</code> Navigation <code>INDEX.md</code> Practice <code>EXERCISES.md</code> Deep Dive <code>CODEX_PATTERNS_SUMMARY.md</code> Structure <code>STRUCTURE.md</code> Summary <code>FINAL_SUMMARY.md</code>"},{"location":"learning-material/COMPLETION_REPORT/#whats-next","title":"\u2728 What's Next?","text":""},{"location":"learning-material/COMPLETION_REPORT/#for-this-project","title":"For This Project","text":"<ul> <li>\u2705 All core materials complete</li> <li>\u26a0\ufe0f Could add more pattern implementations</li> <li>\u26a0\ufe0f Could add video tutorials</li> <li>\u26a0\ufe0f Could add interactive notebooks</li> </ul>"},{"location":"learning-material/COMPLETION_REPORT/#for-learners_1","title":"For Learners","text":"<ul> <li>Start learning journey</li> <li>Complete exercises</li> <li>Build projects</li> <li>Contribute back</li> </ul>"},{"location":"learning-material/COMPLETION_REPORT/#for-community","title":"For Community","text":"<ul> <li>Share materials</li> <li>Provide feedback</li> <li>Submit improvements</li> <li>Create derivatives</li> </ul>"},{"location":"learning-material/COMPLETION_REPORT/#acknowledgments","title":"\ud83d\ude4f Acknowledgments","text":""},{"location":"learning-material/COMPLETION_REPORT/#based-on","title":"Based On","text":"<ul> <li>Codex CLI: OpenAI's production agent</li> <li>Textbook: \"Agentic Design Patterns\"</li> <li>Community: Feedback and insights</li> </ul>"},{"location":"learning-material/COMPLETION_REPORT/#created-for","title":"Created For","text":"<ul> <li>Developers learning agentic AI</li> <li>Students studying agents</li> <li>Researchers analyzing patterns</li> <li>Teams building production systems</li> </ul>"},{"location":"learning-material/COMPLETION_REPORT/#license","title":"\ud83d\udcc4 License","text":"<p>Educational materials for learning purposes.</p> <p>See main Codex repository for license details.</p>"},{"location":"learning-material/COMPLETION_REPORT/#final-metrics","title":"\ud83d\udcca Final Metrics","text":"<pre><code>\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\n  LEARNING MATERIALS - COMPLETION METRICS\n\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\n\nFiles Created:           23\nDocumentation:           17 files, ~114KB\nCode Examples:           6 files, ~1,750 lines\nPatterns Covered:        21/21 (100%)\nPatterns with Code:      9/21 (43%)\nTotal Lines:             5,762+\nTotal Words:             ~20,000\nEstimated Pages:         ~80\nExercises:               11\nChallenge Projects:      3\nLearning Paths:          4 (Beginner to Expert)\n\n\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\n             PROJECT STATUS: COMPLETE \u2705\n\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\n</code></pre>"},{"location":"learning-material/COMPLETION_REPORT/#conclusion","title":"\ud83c\udf89 Conclusion","text":"<p>This learning materials project successfully:</p> <p>\u2705 Analyzed all 21 agentic patterns from the textbook \u2705 Documented how Codex implements each pattern \u2705 Implemented 9 patterns with runnable code \u2705 Created comprehensive learning paths \u2705 Provided hands-on exercises \u2705 Built a complete production-ready agent \u2705 Referenced Codex source code throughout  </p> <p>The materials are ready for learners! \ud83d\ude80</p> <p>Questions? Start with: START_HERE.md</p> <p>Ready to learn? Begin: QUICKSTART.md</p> <p>Project Completed: October 6, 2025 Status: \u2705 Complete and Ready Version: 1.0</p>"},{"location":"learning-material/EXERCISES/","title":"\ud83c\udfaf Practical Exercises","text":"<p>Hands-on practice to solidify your understanding</p>"},{"location":"learning-material/EXERCISES/#exercise-format","title":"\ud83d\udccb Exercise Format","text":"<p>Each exercise includes: - Difficulty: \u2b50 (Beginner) to \u2b50\u2b50\u2b50\u2b50 (Expert) - Patterns: Which patterns you'll practice - Learning Goals: What you'll master - Tasks: Step-by-step instructions - Solution Hints: Guidance if you get stuck</p>"},{"location":"learning-material/EXERCISES/#beginner-exercises-level-1-3","title":"\ud83d\udfe2 Beginner Exercises (Level 1-3)","text":""},{"location":"learning-material/EXERCISES/#exercise-1-extend-a-chain","title":"Exercise 1: Extend a Chain","text":"<p>Pattern: Prompt Chaining (1) File: <code>01-prompt-chaining/pattern_simple.py</code></p> <p>Learning Goals: - Understand sequential processing - Modify existing chains - Add new steps</p> <p>Tasks: 1. Open <code>pattern_simple.py</code> 2. Add a 4<sup>th</sup> step that validates the recommendations from step 3 3. The validation should check if recommendations are actionable 4. Print validation results</p> <p>Hints: <pre><code># Step 4: Validate recommendations\nstep4_prompt = f\"\"\"\nReview these recommendations and validate if they are:\n1. Specific and actionable\n2. Feasible to implement\n3. Likely to solve the problem\n\nRecommendations:\n{step3_output}\n\nProvide a brief validation summary.\n\"\"\"\n</code></pre></p> <p>Success Criteria: - [ ] Chain runs without errors - [ ] 4<sup>th</sup> step uses output from step 3 - [ ] Validation makes sense</p>"},{"location":"learning-material/EXERCISES/#exercise-2-build-a-simple-tool","title":"Exercise 2: Build a Simple Tool \u2b50","text":"<p>Pattern: Tool Use (5) File: <code>05-tool-use/pattern_simple.py</code></p> <p>Learning Goals: - Create custom tools - Define tool specifications - Test tool invocation</p> <p>Tasks: 1. Create a new tool called <code>count_words</code> 2. It should count words in a text string 3. Add tool specification for OpenAI API 4. Test it with a query like \"Count words in: hello world\"</p> <p>Hints: <pre><code>def count_words(text: str) -&gt; str:\n    \"\"\"Count words in text.\"\"\"\n    words = text.split()\n    return f\"Word count: {len(words)}\"\n\n# Add to TOOL_SPECS:\n{\n    \"type\": \"function\",\n    \"function\": {\n        \"name\": \"count_words\",\n        \"description\": \"Count words in a text string\",\n        \"parameters\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"text\": {\n                    \"type\": \"string\",\n                    \"description\": \"Text to count words in\"\n                }\n            },\n            \"required\": [\"text\"]\n        }\n    }\n}\n</code></pre></p> <p>Success Criteria: - [ ] Tool defined correctly - [ ] LLM calls your tool - [ ] Word count is accurate</p>"},{"location":"learning-material/EXERCISES/#exercise-3-add-error-handling","title":"Exercise 3: Add Error Handling \u2b50","text":"<p>Pattern: Exception Handling (12)</p> <p>Learning Goals: - Handle failures gracefully - Implement retry logic - Log errors properly</p> <p>Tasks: 1. Create a function that sometimes fails randomly 2. Wrap it with retry logic (3 attempts) 3. Add exponential backoff (1s, 2s, 4s) 4. Log each attempt</p> <p>Hints: <pre><code>import random\nimport time\n\ndef flaky_function():\n    \"\"\"Fails 50% of the time.\"\"\"\n    if random.random() &lt; 0.5:\n        raise ValueError(\"Random failure!\")\n    return \"Success!\"\n\ndef retry_with_backoff(func, max_retries=3):\n    for attempt in range(max_retries):\n        try:\n            return func()\n        except Exception as e:\n            if attempt == max_retries - 1:\n                raise\n            wait_time = 2 ** attempt\n            print(f\"Attempt {attempt + 1} failed, retrying in {wait_time}s...\")\n            time.sleep(wait_time)\n</code></pre></p> <p>Success Criteria: - [ ] Function retries on failure - [ ] Backoff timing is correct - [ ] Final failure is propagated</p>"},{"location":"learning-material/EXERCISES/#intermediate-exercises","title":"\ud83d\udfe1 Intermediate Exercises","text":""},{"location":"learning-material/EXERCISES/#exercise-4-build-a-router","title":"Exercise 4: Build a Router \u2b50\u2b50","text":"<p>Pattern: Routing (2)</p> <p>Learning Goals: - Intent classification - Dynamic dispatch - Handler registry</p> <p>Tasks: 1. Create 3 specialized handlers (search, analyze, generate) 2. Build a classifier that routes to correct handler 3. Test with 10 different queries 4. Measure routing accuracy</p> <p>Hints: <pre><code>def classify_intent_with_llm(query: str) -&gt; str:\n    \"\"\"Use LLM to classify intent.\"\"\"\n    # Your code here\n    pass\n\nHANDLERS = {\n    \"search\": search_handler,\n    \"analyze\": analyze_handler,\n    \"generate\": generate_handler,\n}\n\ndef route_query(query: str):\n    intent = classify_intent_with_llm(query)\n    handler = HANDLERS.get(intent, default_handler)\n    return handler(query)\n</code></pre></p> <p>Success Criteria: - [ ] Classification is &gt;80% accurate - [ ] All handlers work correctly - [ ] Fallback handler exists</p>"},{"location":"learning-material/EXERCISES/#exercise-5-implement-memory","title":"Exercise 5: Implement Memory \u2b50\u2b50","text":"<p>Pattern: Memory Management (8)</p> <p>Learning Goals: - State persistence - History management - Session resumption</p> <p>Tasks: 1. Create a <code>ConversationMemory</code> class 2. Store last 5 turns 3. Save to JSON file 4. Load and resume conversation</p> <p>Hints: <pre><code>class ConversationMemory:\n    def __init__(self, max_turns=5):\n        self.turns = []\n        self.max_turns = max_turns\n\n    def add_turn(self, prompt, response):\n        self.turns.append({\"prompt\": prompt, \"response\": response})\n        if len(self.turns) &gt; self.max_turns:\n            self.turns.pop(0)  # Remove oldest\n\n    def get_context(self):\n        # Build context string from turns\n        pass\n\n    def save(self, filepath):\n        # Save to JSON\n        pass\n\n    def load(self, filepath):\n        # Load from JSON\n        pass\n</code></pre></p> <p>Success Criteria: - [ ] Turns are stored correctly - [ ] History limits work - [ ] Save/load preserves state</p>"},{"location":"learning-material/EXERCISES/#exercise-6-add-approval-system","title":"Exercise 6: Add Approval System \u2b50\u2b50","text":"<p>Pattern: Human-in-the-Loop (13)</p> <p>Learning Goals: - Approval workflows - Safety checks - User interaction</p> <p>Tasks: 1. Create a <code>SafetyChecker</code> class 2. Define dangerous operations (file delete, network access) 3. Request approval before dangerous ops 4. Allow session-level approvals</p> <p>Hints: <pre><code>class SafetyChecker:\n    DANGEROUS_OPS = [\"delete\", \"network\", \"execute\"]\n\n    def __init__(self):\n        self.approved_for_session = set()\n\n    def needs_approval(self, operation):\n        if operation in self.approved_for_session:\n            return False\n        return any(danger in operation for danger in self.DANGEROUS_OPS)\n\n    def request_approval(self, operation):\n        print(f\"\u26a0\ufe0f  Approve '{operation}'? (y/n/session): \")\n        response = input().strip().lower()\n\n        if response == \"session\":\n            self.approved_for_session.add(operation)\n            return True\n        return response == \"y\"\n</code></pre></p> <p>Success Criteria: - [ ] Dangerous ops require approval - [ ] Session approvals work - [ ] User can deny operations</p>"},{"location":"learning-material/EXERCISES/#advanced-exercises","title":"\ud83d\udd34 Advanced Exercises","text":""},{"location":"learning-material/EXERCISES/#exercise-7-implement-parallelization","title":"Exercise 7: Implement Parallelization \u2b50\u2b50\u2b50","text":"<p>Pattern: Parallelization (3)</p> <p>Learning Goals: - Async/await - Concurrent execution - Result aggregation</p> <p>Tasks: 1. Create a tool executor with parallel support 2. Some tools run parallel, others serial 3. Serial tools wait for parallel tasks 4. Benchmark speed improvement</p> <p>Hints: <pre><code>import asyncio\n\nclass ParallelExecutor:\n    PARALLEL_TOOLS = {\"read\", \"fetch\"}\n    SERIAL_TOOLS = {\"write\", \"execute\"}\n\n    def __init__(self):\n        self.pending = []\n\n    async def execute_tool(self, tool_name, args):\n        if tool_name in self.PARALLEL_TOOLS:\n            task = self._do_tool(tool_name, args)\n            self.pending.append(task)\n        else:\n            # Wait for pending\n            if self.pending:\n                await asyncio.gather(*self.pending)\n                self.pending = []\n            # Execute serial\n            await self._do_tool(tool_name, args)\n</code></pre></p> <p>Success Criteria: - [ ] Parallel tools run concurrently - [ ] Serial tools execute in order - [ ] Speedup is measurable</p>"},{"location":"learning-material/EXERCISES/#exercise-8-build-complete-mini-agent","title":"Exercise 8: Build Complete Mini-Agent \u2b50\u2b50\u2b50\u2b50","text":"<p>Patterns: 1, 2, 5, 8, 12, 13</p> <p>Learning Goals: - System integration - Production patterns - End-to-end workflows</p> <p>Tasks: 1. Choose a domain (code review, data analysis, etc.) 2. Implement patterns 1, 2, 5, 8 3. Add 5+ custom tools 4. Include error handling and approvals 5. Write documentation</p> <p>Requirements: - Multi-turn conversations - Tool routing - State persistence - Error recovery - Safety checks - Clear documentation</p> <p>Success Criteria: - [ ] Agent completes complex tasks - [ ] All patterns integrated - [ ] Error handling works - [ ] Documentation is clear - [ ] Demo video/screenshots</p>"},{"location":"learning-material/EXERCISES/#challenge-projects","title":"\ud83c\udf93 Challenge Projects","text":""},{"location":"learning-material/EXERCISES/#challenge-1-code-review-agent","title":"Challenge 1: Code Review Agent \u2b50\u2b50\u2b50\u2b50","text":"<p>Description: Build an agent that reviews code for: - Style issues - Potential bugs - Performance problems - Security vulnerabilities - Test coverage</p> <p>Tools Needed: - <code>read_file</code> - Read source code - <code>run_linter</code> - Execute static analysis - <code>run_tests</code> - Run test suite - <code>generate_report</code> - Create review document</p>"},{"location":"learning-material/EXERCISES/#challenge-2-research-assistant","title":"Challenge 2: Research Assistant \u2b50\u2b50\u2b50","text":"<p>Description: Build an agent that: - Searches multiple sources - Summarizes findings - Generates citations - Creates reports</p> <p>Tools Needed: - <code>web_search</code> - Search the web - <code>read_url</code> - Fetch webpage content - <code>save_notes</code> - Persist research - <code>generate_report</code> - Create final document</p>"},{"location":"learning-material/EXERCISES/#challenge-3-data-analyst","title":"Challenge 3: Data Analyst \u2b50\u2b50\u2b50\u2b50","text":"<p>Description: Build an agent that: - Loads CSV/JSON data - Performs statistical analysis - Generates visualizations - Creates reports - Handles missing data</p> <p>Tools Needed: - <code>load_data</code> - Read data files - <code>analyze_stats</code> - Calculate statistics - <code>create_chart</code> - Generate visualizations - <code>export_report</code> - Save results</p>"},{"location":"learning-material/EXERCISES/#exercise-tracker","title":"\ud83d\udcca Exercise Tracker","text":"<p>Track your progress:</p> Exercise Started Completed Notes Ex 1: Extend Chain \u2b1c \u2b1c Ex 2: Build Tool \u2b1c \u2b1c Ex 3: Error Handling \u2b1c \u2b1c Ex 4: Build Router \u2b1c \u2b1c Ex 5: Implement Memory \u2b1c \u2b1c Ex 6: Approval System \u2b1c \u2b1c Ex 7: Parallelization \u2b1c \u2b1c Ex 8: Mini-Agent \u2b1c \u2b1c Challenge 1 \u2b1c \u2b1c Challenge 2 \u2b1c \u2b1c Challenge 3 \u2b1c \u2b1c"},{"location":"learning-material/EXERCISES/#tips-for-success","title":"\ud83d\udca1 Tips for Success","text":"<ol> <li>Start Small: Begin with beginner exercises</li> <li>Read First: Understand the pattern before coding</li> <li>Run Examples: Study existing code</li> <li>Experiment: Modify examples to learn</li> <li>Debug: Use print statements liberally</li> <li>Test: Verify each component works</li> <li>Document: Write clear comments</li> <li>Ask: Seek help when stuck</li> </ol>"},{"location":"learning-material/EXERCISES/#getting-unstuck","title":"\ud83c\udd98 Getting Unstuck","text":""},{"location":"learning-material/EXERCISES/#if-youre-stuck-on-an-exercise","title":"If you're stuck on an exercise:","text":"<ol> <li>Re-read the pattern README</li> <li>Study the example code</li> <li>Break down the problem</li> <li>Google specific errors</li> <li>Check the hints section</li> <li>Ask in discussions</li> </ol>"},{"location":"learning-material/EXERCISES/#common-issues","title":"Common Issues:","text":"<p>\"My code doesn't run\" - Check syntax errors - Verify imports - Test each function independently</p> <p>\"The LLM doesn't call my tool\" - Check tool specification format - Verify description is clear - Ensure parameters are correct</p> <p>\"Results are inconsistent\" - Set temperature=0 for deterministic output - Use more specific prompts - Add examples to prompts</p>"},{"location":"learning-material/EXERCISES/#next-steps","title":"\ud83c\udfaf Next Steps","text":"<p>After completing exercises:</p> <ol> <li>Review your solutions</li> <li>Compare with example code</li> <li>Optimize for performance</li> <li>Share your work</li> <li>Move to next difficulty level</li> </ol> <p>Ready to practice? Start with Exercise 1 \u2192</p> <p>Good luck! \ud83d\ude80</p>"},{"location":"learning-material/FINAL_SUMMARY/","title":"\ud83c\udf93 Learning Materials - Final Summary","text":"<p>Everything you need to master agentic design patterns with Codex</p>"},{"location":"learning-material/FINAL_SUMMARY/#what-we-created","title":"\u2705 What We Created","text":""},{"location":"learning-material/FINAL_SUMMARY/#documentation-16-files-17000-words","title":"\ud83d\udcda Documentation (16 files, ~17,000 words)","text":"<ol> <li>Main Guides</li> <li>\u2705 <code>README.md</code> - Complete overview</li> <li>\u2705 <code>QUICKSTART.md</code> - Quick setup guide</li> <li>\u2705 <code>INDEX.md</code> - Navigation and learning paths</li> <li>\u2705 <code>STRUCTURE.md</code> - Directory organization</li> <li>\u2705 <code>EXERCISES.md</code> - 11 practical exercises</li> <li> <p>\u2705 <code>CODEX_PATTERNS_SUMMARY.md</code> - Deep pattern analysis</p> </li> <li> <p>Pattern Documentation (5 READMEs)</p> </li> <li>\u2705 Pattern 1: Prompt Chaining</li> <li>\u2705 Pattern 2: Routing  </li> <li>\u2705 Pattern 3: Parallelization</li> <li>\u2705 Pattern 5: Tool Use</li> <li>\u2705 Complete Agent Example</li> </ol>"},{"location":"learning-material/FINAL_SUMMARY/#code-examples-6-files-1750-lines","title":"\ud83d\udcbb Code Examples (6 files, ~1,750 lines)","text":"<ol> <li>Pattern Implementations</li> <li>\u2705 <code>01-prompt-chaining/pattern_simple.py</code> (150 lines)</li> <li>\u2705 <code>01-prompt-chaining/pattern_advanced.py</code> (350 lines)</li> <li>\u2705 <code>02-routing/pattern_simple.py</code> (200 lines)</li> <li>\u2705 <code>03-parallelization/pattern_simple.py</code> (250 lines)</li> <li> <p>\u2705 <code>05-tool-use/pattern_simple.py</code> (300 lines)</p> </li> <li> <p>Complete Implementation</p> </li> <li>\u2705 <code>complete-agent-example/complete_agent.py</code> (500+ lines)</li> <li>Integrates 7 patterns</li> <li>Production-ready architecture</li> <li>Fully documented</li> </ol>"},{"location":"learning-material/FINAL_SUMMARY/#key-achievements","title":"\ud83c\udfaf Key Achievements","text":""},{"location":"learning-material/FINAL_SUMMARY/#comprehensive-coverage","title":"\u2705 Comprehensive Coverage","text":"<ul> <li>21 patterns analyzed from textbook</li> <li>9 patterns implemented in code</li> <li>5 patterns with full documentation</li> <li>1 complete agent implementation</li> </ul>"},{"location":"learning-material/FINAL_SUMMARY/#multiple-learning-paths","title":"\u2705 Multiple Learning Paths","text":"<ul> <li>Beginner path </li> <li>Intermediate path </li> <li>Advanced path </li> <li>Expert path (ongoing)</li> </ul>"},{"location":"learning-material/FINAL_SUMMARY/#practical-focus","title":"\u2705 Practical Focus","text":"<ul> <li>Runnable examples - All code works out of the box</li> <li>Real-world patterns - Extracted from Codex production code</li> <li>Hands-on exercises - 11 exercises + 3 challenge projects</li> <li>Best practices - Safety, error handling, testing</li> </ul>"},{"location":"learning-material/FINAL_SUMMARY/#codex-integration","title":"\u2705 Codex Integration","text":"<ul> <li>Direct code references - Line numbers to Codex source</li> <li>Implementation analysis - How Codex does it</li> <li>Production insights - Lessons from real system</li> <li>Comparison charts - Your code vs Codex</li> </ul>"},{"location":"learning-material/FINAL_SUMMARY/#coverage-by-pattern","title":"\ud83d\udcca Coverage by Pattern","text":"# Pattern Docs Code Quality 1 Prompt Chaining \u2705 Full \u2705 Full \u2b50\u2b50\u2b50\u2b50\u2b50 2 Routing \u2705 Full \u2705 Simple \u2b50\u2b50\u2b50\u2b50 3 Parallelization \u2705 Full \u2705 Simple \u2b50\u2b50\u2b50\u2b50 5 Tool Use \u2705 Full \u2705 Simple \u2b50\u2b50\u2b50\u2b50\u2b50 8 Memory Management \u26a0\ufe0f Partial \u26a0\ufe0f In complete_agent \u2b50\u2b50\u2b50 10 MCP Integration \u26a0\ufe0f Summary \u274c Not yet \u2b50\u2b50 12 Exception Handling \u26a0\ufe0f Summary \u26a0\ufe0f In complete_agent \u2b50\u2b50\u2b50 13 Human-in-the-Loop \u26a0\ufe0f Summary \u26a0\ufe0f In complete_agent \u2b50\u2b50\u2b50 18 Guardrails/Safety \u26a0\ufe0f Summary \u26a0\ufe0f In complete_agent \u2b50\u2b50\u2b50 Complete Agent \u2705 Full \u2705 Full \u2b50\u2b50\u2b50\u2b50\u2b50"},{"location":"learning-material/FINAL_SUMMARY/#how-to-use-these-materials","title":"\ud83d\ude80 How to Use These Materials","text":""},{"location":"learning-material/FINAL_SUMMARY/#option-1-sequential-learning-recommended","title":"Option 1: Sequential Learning (Recommended)","text":"<p>Foundations <pre><code>cd learning-material\ncat README.md             \ncat QUICKSTART.md         \ncd 01-prompt-chaining\ncat README.md             \npython pattern_simple.py  \npython pattern_advanced.py\n# Do Exercise 1 from EXERCISES.md\n</code></pre></p> <p>Core Patterns <pre><code>cd 05-tool-use\ncat README.md\npython pattern_simple.py\n# Do Exercise 2\n\ncd ../02-routing\ncat README.md\npython pattern_simple.py\n# Do Exercise 4\n</code></pre></p> <p>Advanced <pre><code>cd 03-parallelization\npython pattern_simple.py\n\ncd ../complete-agent-example\ncat README.md\npython complete_agent.py\n# Do Exercise 8\n</code></pre></p>"},{"location":"learning-material/FINAL_SUMMARY/#option-2-topic-based-deep-dive","title":"Option 2: Topic-Based Deep Dive","text":"<p>For Safety &amp; Security: <pre><code>cat CODEX_PATTERNS_SUMMARY.md  # Pattern 18 section\ncd 05-tool-use\n# Study safety mechanisms\ncd ../complete-agent-example\n# Read SafetyChecker class\n</code></pre></p> <p>For Performance: <pre><code>cd 03-parallelization\npython pattern_simple.py  # Async execution\n# Study benchmarks\n# Optimize your code\n</code></pre></p> <p>For Production Deployment: <pre><code>cd complete-agent-example\ncat README.md\n# Study complete_agent.py\n# Focus on error handling, state management\n</code></pre></p>"},{"location":"learning-material/FINAL_SUMMARY/#option-3-challenge-projects","title":"Option 3: Challenge Projects","text":"<p>Skip theory, learn by building: <pre><code>cat EXERCISES.md  # Read Challenge Projects\n# Pick: Code Review Agent, Research Assistant, or Data Analyst\n# Use complete_agent.py as template\n# Build your own variant\n</code></pre></p>"},{"location":"learning-material/FINAL_SUMMARY/#key-insights-learned","title":"\ud83d\udca1 Key Insights Learned","text":""},{"location":"learning-material/FINAL_SUMMARY/#from-codex-implementation","title":"From Codex Implementation","text":"<ol> <li>Safety is Primary</li> <li>Multi-layer security (sandboxing, approvals, validation)</li> <li>Default-deny policies</li> <li> <p>User always in control</p> </li> <li> <p>State Management Matters</p> </li> <li>Conversation history is first-class</li> <li>Rollout files for replay/debugging</li> <li> <p>Session resumption critical</p> </li> <li> <p>Error Handling is Essential</p> </li> <li>Retry with exponential backoff</li> <li>User notification of issues</li> <li> <p>Graceful degradation</p> </li> <li> <p>Modularity Enables Scale</p> </li> <li>Clean separation of concerns</li> <li>Tool registry pattern</li> <li> <p>MCP for extensibility</p> </li> <li> <p>Async is Fundamental</p> </li> <li>Non-blocking I/O</li> <li>Parallel tool execution</li> <li>Responsive user experience</li> </ol>"},{"location":"learning-material/FINAL_SUMMARY/#from-pattern-analysis","title":"From Pattern Analysis","text":"<ol> <li>Patterns Compose</li> <li>Patterns 1, 2, 5 form foundation</li> <li>Pattern 8 enables persistence</li> <li> <p>Patterns 12, 13, 18 ensure production-readiness</p> </li> <li> <p>Type Safety Prevents Errors</p> </li> <li>Rust's enums for routing</li> <li>Compile-time guarantees</li> <li> <p>Runtime safety</p> </li> <li> <p>Not All Patterns Needed</p> </li> <li>Start with 3-4 core patterns</li> <li>Add complexity as needed</li> <li>Patterns 4, 7, 9, 21 less critical</li> </ol>"},{"location":"learning-material/FINAL_SUMMARY/#learning-progression","title":"\ud83d\udcc8 Learning Progression","text":""},{"location":"learning-material/FINAL_SUMMARY/#beginner-intermediate","title":"Beginner \u2192 Intermediate","text":"<p>Skills Gained: - \u2705 Understand prompt chaining - \u2705 Build basic tools - \u2705 Manage conversation state - \u2705 Handle simple errors - \u2705 Route between handlers</p> <p>Can Build: - Simple chatbots - Research assistants - Data analyzers - Code explainers</p>"},{"location":"learning-material/FINAL_SUMMARY/#intermediate-advanced","title":"Intermediate \u2192 Advanced","text":"<p>Skills Gained: - \u2705 Implement parallelization - \u2705 Build approval workflows - \u2705 Add safety checks - \u2705 Integrate external APIs - \u2705 Handle complex errors</p> <p>Can Build: - Code review agents - Data processing pipelines - Multi-tool workflows - Production-ready agents</p>"},{"location":"learning-material/FINAL_SUMMARY/#advanced-expert-ongoing","title":"Advanced \u2192 Expert (Ongoing)","text":"<p>Skills Gained: - \u2705 Read production code - \u2705 Design architectures - \u2705 Optimize performance - \u2705 Implement sandboxing - \u2705 Build frameworks</p> <p>Can Build: - Agent frameworks - Platform integrations - Enterprise solutions - Open source projects</p>"},{"location":"learning-material/FINAL_SUMMARY/#next-steps","title":"\ud83c\udfaf Next Steps","text":""},{"location":"learning-material/FINAL_SUMMARY/#immediate-this-week","title":"Immediate (This Week)","text":"<ol> <li>\u2705 Run all simple examples</li> <li>\u2705 Complete 3 beginner exercises</li> <li>\u2705 Modify an example to understand it</li> <li>\u2705 Read CODEX_PATTERNS_SUMMARY.md</li> </ol>"},{"location":"learning-material/FINAL_SUMMARY/#short-term-this-month","title":"Short Term (This Month)","text":"<ol> <li>\u2705 Complete intermediate exercises</li> <li>\u2705 Build a mini-agent (50-100 lines)</li> <li>\u2705 Study Codex source code</li> <li>\u2705 Implement one pattern from scratch</li> </ol>"},{"location":"learning-material/FINAL_SUMMARY/#long-term-this-quarter","title":"Long Term (This Quarter)","text":"<ol> <li>\u2705 Complete a challenge project</li> <li>\u2705 Build domain-specific agent</li> <li>\u2705 Contribute to open source</li> <li>\u2705 Share your learnings</li> </ol>"},{"location":"learning-material/FINAL_SUMMARY/#additional-resources","title":"\ud83d\udcda Additional Resources","text":""},{"location":"learning-material/FINAL_SUMMARY/#created-materials","title":"Created Materials","text":"<ul> <li>All documentation in <code>learning-material/</code></li> <li>Code examples ready to run</li> <li>Exercises with solutions hints</li> <li>Codex source code analysis</li> </ul>"},{"location":"learning-material/FINAL_SUMMARY/#external-resources","title":"External Resources","text":"<ul> <li>Textbook: Agentic Design Patterns (complete reference)</li> <li>Codex Repo: Production implementation</li> <li>OpenAI Docs: API reference</li> <li>MCP Spec: Protocol documentation</li> </ul>"},{"location":"learning-material/FINAL_SUMMARY/#community","title":"Community","text":"<ul> <li>GitHub Discussions</li> <li>Stack Overflow</li> <li>OpenAI Community</li> <li>Discord/Slack channels</li> </ul>"},{"location":"learning-material/FINAL_SUMMARY/#congratulations","title":"\ud83c\udf89 Congratulations!","text":"<p>You now have:</p> <p>\u2705 Comprehensive documentation covering agentic patterns \u2705 Working code examples for 9 patterns \u2705 Complete agent implementation (500+ lines) \u2705 Practice exercises from beginner to expert \u2705 Production insights from Codex analysis \u2705 Learning paths for all skill levels \u2705 Best practices for building agents  </p>"},{"location":"learning-material/FINAL_SUMMARY/#ready-to-start","title":"\ud83d\ude80 Ready to Start?","text":""},{"location":"learning-material/FINAL_SUMMARY/#absolute-beginner","title":"Absolute Beginner","text":"<p>\u2192 QUICKSTART.md</p>"},{"location":"learning-material/FINAL_SUMMARY/#know-the-basics","title":"Know the Basics","text":"<p>\u2192 INDEX.md</p>"},{"location":"learning-material/FINAL_SUMMARY/#want-to-practice","title":"Want to Practice","text":"<p>\u2192 EXERCISES.md</p>"},{"location":"learning-material/FINAL_SUMMARY/#deep-dive","title":"Deep Dive","text":"<p>\u2192 CODEX_PATTERNS_SUMMARY.md</p>"},{"location":"learning-material/FINAL_SUMMARY/#just-code","title":"Just Code","text":"<p>\u2192 complete-agent-example/complete_agent.py</p>"},{"location":"learning-material/FINAL_SUMMARY/#final-statistics","title":"\ud83d\udcca Final Statistics","text":"Metric Count Documentation Files 16 Code Files 6 Total Lines Written ~20,000 Patterns Analyzed 21 Patterns Implemented 9 Exercises 11 Challenge Projects 3"},{"location":"learning-material/FINAL_SUMMARY/#thank-you","title":"\ud83d\ude4f Thank You!","text":"<p>These materials represent a comprehensive analysis of the Codex codebase and the agentic design patterns it implements. We hope they help you:</p> <ul> <li>Understand how production agentic systems work</li> <li>Build your own intelligent agents</li> <li>Master essential patterns and practices</li> <li>Contribute to the agentic AI community</li> </ul> <p>Happy Learning! \ud83c\udf93</p> <p>Built with \u2764\ufe0f for the agentic AI community</p> <p>Based on the Codex CLI implementation by OpenAI</p> <p>Patterns from \"Agentic Design Patterns: A Hands-On Guide to Building Intelligent Systems\"</p> <p>Questions? Feedback? Improvements?</p> <p>Open an issue or start a discussion in the repository!</p> <p>\ud83c\udf1f Star the repo if you found this helpful!</p> <p>\ud83d\udd04 Share with others learning agentic AI!</p> <p>\ud83e\udd1d Contribute to improve these materials!</p> <p>Version: 1.0 Status: Complete \u2705 Last Updated: October 2025 License: Educational Use</p>"},{"location":"learning-material/INDEX/","title":"Learning Materials - Complete Index","text":"<p>Your guide to understanding agentic design patterns through the Codex implementation</p>"},{"location":"learning-material/INDEX/#quick-navigation","title":"\ud83d\udcda Quick Navigation","text":"Resource Description Level README Overview and getting started Beginner Pattern Summary Comprehensive pattern analysis All Levels Complete Agent Production-ready implementation Advanced"},{"location":"learning-material/INDEX/#learning-paths","title":"\ud83c\udfaf Learning Paths","text":""},{"location":"learning-material/INDEX/#beginner-intermediate-learning-path","title":"Beginner \u2192 Intermediate Learning Path","text":"<p>Fundamentals <pre><code>[Pattern 1: Prompt Chaining](./01-prompt-chaining/README.md)\n         \u2192 Run pattern_simple.py\n         \u2192 Read Codex examples in README\n         \u2192 Experiment with pattern_advanced.py\n\n[Pattern 5: Tool Use](./05-tool-use/README.md)\n         \u2192 Understand function calling\n         \u2192 Explore safety mechanisms\n         \u2192 Build your own tool\n\n[Pattern 8: Memory Management](./08-memory-management/README.md)\n         \u2192 Study conversation history\n         \u2192 Implement state persistence\n         \u2192 Practice session management\n</code></pre></p> <p>Intermediate Patterns <pre><code>[Pattern 2: Routing](./02-routing/README.md)\n         \u2192 Classification and dispatch\n         \u2192 Build a tool router\n         \u2192 Dynamic handler registration\n\n[Pattern 12: Exception Handling](./12-exception-handling/README.md)\n         \u2192 Retry logic with backoff\n         \u2192 Error recovery strategies\n         \u2192 Graceful degradation\n\n[Pattern 13: Human-in-the-Loop](./13-human-in-the-loop/README.md)\n         \u2192 Approval workflows\n         \u2192 Policy systems\n         \u2192 User control patterns\n</code></pre></p> <p>Integration <pre><code>[Complete Agent Example](./complete-agent-example/README.md)\n         \u2192 Study complete_agent.py\n         \u2192 Run example scenarios\n         \u2192 Modify and extend\n         \u2192 Build your own variant\n</code></pre></p>"},{"location":"learning-material/INDEX/#path-2-deep-dive","title":"Path 2: Deep Dive","text":"<p>For Experienced Developers <pre><code>Codex Source Code Tour\n       \u2192 codex-rs/core/src/codex.rs\n       \u2192 Understand turn-based architecture\n       \u2192 Trace a complete workflow\n\nSafety &amp; Sandboxing\n       \u2192 codex-rs/core/src/safety.rs\n       \u2192 codex-rs/core/src/exec.rs\n       \u2192 Study platform-specific isolation\n\nTool System Architecture\n       \u2192 codex-rs/core/src/tools/\n       \u2192 Router, registry, handlers\n       \u2192 Parallel execution\n\nMCP Integration\n       \u2192 codex-rs/mcp-client/\n       \u2192 codex-rs/mcp-server/\n       \u2192 Protocol implementation\n\nBuild Your Own\n         \u2192 Design architecture\n         \u2192 Implement core patterns\n         \u2192 Add your own features\n</code></pre></p>"},{"location":"learning-material/INDEX/#pattern-by-pattern-guide","title":"\ud83d\udcd6 Pattern-by-Pattern Guide","text":""},{"location":"learning-material/INDEX/#core-patterns-essential","title":"Core Patterns (Essential)","text":""},{"location":"learning-material/INDEX/#1-prompt-chaining","title":"1. Prompt Chaining \u2b50\u2b50\u2b50\u2b50\u2b50","text":"<ul> <li>Folder: <code>01-prompt-chaining/</code></li> <li>Difficulty: \u2b50 Beginner</li> <li>Files:</li> <li><code>README.md</code> - Pattern explanation</li> <li><code>pattern_simple.py</code> - Basic chain</li> <li><code>pattern_advanced.py</code> - Production-ready</li> </ul> <p>What You'll Learn: - Sequential task decomposition - State transfer between steps - History management - Turn-based execution</p> <p>Codex Reference: <code>codex-rs/core/src/codex.rs:1620-1703</code></p>"},{"location":"learning-material/INDEX/#2-routing","title":"2. Routing \u2b50\u2b50\u2b50\u2b50\u2b50","text":"<ul> <li>Folder: <code>02-routing/</code></li> <li>Difficulty: \u2b50\u2b50 Intermediate</li> <li>Files:</li> <li><code>README.md</code> - Pattern explanation</li> <li><code>pattern_simple.py</code> - Basic routing</li> <li><code>pattern_advanced.py</code> - Registry system</li> </ul> <p>What You'll Learn: - Intent classification - Dynamic dispatch - Handler registry - Conditional workflows</p> <p>Codex Reference: <code>codex-rs/core/src/tools/router.rs:59-102</code></p>"},{"location":"learning-material/INDEX/#5-tool-use","title":"5. Tool Use \u2b50\u2b50\u2b50\u2b50\u2b50","text":"<ul> <li>Folder: <code>05-tool-use/</code></li> <li>Difficulty: \u2b50\u2b50 Intermediate</li> <li>Files:</li> <li><code>README.md</code> - Pattern explanation</li> <li><code>pattern_simple.py</code> - Basic tools</li> <li><code>pattern_advanced.py</code> - Sandboxing</li> <li><code>tool_safety.py</code> - Safety checks</li> </ul> <p>What You'll Learn: - Function calling API - Tool specification - Safety validation - Sandboxed execution</p> <p>Codex Reference: <code>codex-rs/core/src/exec.rs:82-115</code></p>"},{"location":"learning-material/INDEX/#8-memory-management","title":"8. Memory Management \u2b50\u2b50\u2b50\u2b50\u2b50","text":"<ul> <li>Folder: <code>08-memory-management/</code></li> <li>Difficulty: \u2b50\u2b50 Intermediate</li> </ul> <p>What You'll Learn: - Conversation state - History persistence - Context window management - Session resumption</p> <p>Codex Reference: <code>codex-rs/core/src/conversation_history.rs</code></p>"},{"location":"learning-material/INDEX/#12-exception-handling","title":"12. Exception Handling \u2b50\u2b50\u2b50\u2b50\u2b50","text":"<ul> <li>Folder: <code>12-exception-handling/</code></li> <li>Difficulty: \u2b50\u2b50\u2b50 Advanced</li> </ul> <p>What You'll Learn: - Retry logic - Exponential backoff - Circuit breakers - Error recovery</p> <p>Codex Reference: <code>codex-rs/core/src/codex.rs:1979-2012</code></p>"},{"location":"learning-material/INDEX/#13-human-in-the-loop","title":"13. Human-in-the-Loop \u2b50\u2b50\u2b50\u2b50\u2b50","text":"<ul> <li>Folder: <code>13-human-in-the-loop/</code></li> <li>Difficulty: \u2b50\u2b50\u2b50 Advanced</li> </ul> <p>What You'll Learn: - Approval workflows - Policy systems - Dangerous operation detection - Session-level approvals</p> <p>Codex Reference: <code>codex-rs/core/src/safety.rs:92-136</code></p>"},{"location":"learning-material/INDEX/#18-guardrailssafety","title":"18. Guardrails/Safety \u2b50\u2b50\u2b50\u2b50\u2b50","text":"<ul> <li>Folder: Analysis in CODEX_PATTERNS_SUMMARY.md</li> <li>Difficulty: \u2b50\u2b50\u2b50\u2b50 Expert</li> </ul> <p>What You'll Learn: - Multi-layer security - Platform sandboxing - Command whitelisting - Defense-in-depth</p> <p>Codex Reference: <code>codex-rs/core/src/safety.rs</code>, <code>codex-rs/execpolicy/</code></p>"},{"location":"learning-material/INDEX/#advanced-patterns","title":"Advanced Patterns","text":""},{"location":"learning-material/INDEX/#3-parallelization","title":"3. Parallelization \u2b50\u2b50\u2b50\u2b50\u2b50","text":"<ul> <li>Folder: <code>03-parallelization/</code></li> <li>Difficulty: \u2b50\u2b50\u2b50\u2b50 Expert</li> <li>Codex Reference: <code>codex-rs/core/src/tools/parallel.rs</code></li> </ul>"},{"location":"learning-material/INDEX/#10-mcp-integration","title":"10. MCP Integration \u2b50\u2b50\u2b50\u2b50\u2b50","text":"<ul> <li>Folder: <code>10-mcp-integration/</code></li> <li>Difficulty: \u2b50\u2b50\u2b50\u2b50 Expert</li> <li>Codex Reference: <code>codex-rs/mcp-client/</code>, <code>codex-rs/mcp-server/</code></li> </ul>"},{"location":"learning-material/INDEX/#16-sandbox-escalation","title":"16. Sandbox Escalation \u2b50\u2b50\u2b50\u2b50\u2b50","text":"<ul> <li>Folder: <code>16-sandbox-escalation/</code></li> <li>Difficulty: \u2b50\u2b50\u2b50\u2b50\u2b50 Expert</li> <li>Files:</li> <li><code>README.md</code> - Pattern explanation</li> <li><code>pattern_advanced.py</code> - Multi-stage execution with retry</li> </ul> <p>What You'll Learn: - Sandbox escalation strategies - Retry mechanisms with approval - Policy-based execution - Security-performance tradeoffs</p> <p>Codex Reference: <code>codex-rs/core/src/executor/runner.rs</code></p>"},{"location":"learning-material/INDEX/#17-turn-diff-tracking","title":"17. Turn Diff Tracking \u2b50\u2b50\u2b50\u2b50\u2b50","text":"<ul> <li>Folder: <code>17-turn-diff-tracking/</code></li> <li>Difficulty: \u2b50\u2b50\u2b50\u2b50\u2b50 Expert</li> <li>Files:</li> <li><code>README.md</code> - Pattern explanation</li> <li><code>pattern_advanced.py</code> - Git-style diff tracking</li> </ul> <p>What You'll Learn: - File change tracking across turns - Git-style unified diffs - SHA-1 computation - Rename detection</p> <p>Codex Reference: <code>codex-rs/core/src/turn_diff_tracker.rs</code></p>"},{"location":"learning-material/INDEX/#18-rollout-system","title":"18. Rollout System \u2b50\u2b50\u2b50\u2b50\u2b50","text":"<ul> <li>Folder: <code>18-rollout-system/</code></li> <li>Difficulty: \u2b50\u2b50\u2b50\u2b50\u2b50 Expert</li> <li>Files:</li> <li><code>README.md</code> - Pattern explanation</li> <li><code>pattern_advanced.py</code> - JSONL session recording</li> </ul> <p>What You'll Learn: - Session persistence - Event replay - Debugging workflows - Audit trails</p> <p>Codex Reference: <code>codex-rs/core/src/rollout/recorder.rs</code></p>"},{"location":"learning-material/INDEX/#19-inter-agent-communication-a2a","title":"19. Inter-Agent Communication (A2A) \u2b50\u2b50\u2b50\u2b50\u2b50","text":"<ul> <li>Folder: <code>19-inter-agent-communication/</code></li> <li>Difficulty: \u2b50\u2b50\u2b50\u2b50\u2b50 Expert</li> <li>Files:</li> <li><code>README.md</code> - Pattern explanation</li> <li><code>pattern_advanced.py</code> - Agent-to-agent messaging</li> </ul> <p>What You'll Learn: - Service discovery between agents - Structured message passing - Protocol abstraction - Distributed agent coordination</p> <p>Codex Reference: <code>codex-rs/mcp-client/src/mcp_client.rs</code></p>"},{"location":"learning-material/INDEX/#20-evaluation-and-monitoring","title":"20. Evaluation and Monitoring \u2b50\u2b50\u2b50\u2b50\u2b50","text":"<ul> <li>Folder: <code>20-evaluation-monitoring/</code></li> <li>Difficulty: \u2b50\u2b50\u2b50\u2b50\u2b50 Expert</li> <li>Files:</li> <li><code>README.md</code> - Pattern explanation</li> <li><code>pattern_advanced.py</code> - Metrics and monitoring</li> </ul> <p>What You'll Learn: - Multi-dimensional metrics collection - Event-driven monitoring - Session recording and replay - Performance tracking</p> <p>Codex Reference: <code>codex-rs/otel/src/lib.rs</code>, <code>codex-rs/core/src/rollout/recorder.rs</code></p>"},{"location":"learning-material/INDEX/#complete-agent-example","title":"\ud83d\ude80 Complete Agent Example","text":"<p>Folder: <code>complete-agent-example/</code></p> <p>The crown jewel of these learning materials. A production-ready agent implementation combining all major patterns:</p> <p>Files: - <code>README.md</code> - Architecture overview - <code>complete_agent.py</code> - Full implementation (500+ lines) - <code>example_usage.py</code> - Demo scenarios</p> <p>Patterns Integrated: 1. \u2705 Prompt Chaining - Multi-turn loop 2. \u2705 Routing - Tool dispatch 3. \u2705 Tool Use - External integration 4. \u2705 Memory Management - State persistence 5. \u2705 Exception Handling - Retry logic 6. \u2705 Human-in-the-Loop - Approvals 7. \u2705 Guardrails - Safety checks</p> <p>Difficulty: \u2b50\u2b50\u2b50\u2b50 Expert</p>"},{"location":"learning-material/INDEX/#code-examples-summary","title":"\ud83d\udcbb Code Examples Summary","text":""},{"location":"learning-material/INDEX/#quick-reference","title":"Quick Reference","text":"<pre><code># Pattern 1: Prompt Chaining\nfrom learning-material.01-prompt-chaining.pattern_simple import simple_chain_example\nsimple_chain_example()\n\n# Pattern 2: Routing\nfrom learning-material.02-routing.pattern_simple import demo_routing\ndemo_routing()\n\n# Pattern 5: Tool Use\nfrom learning-material.05-tool-use.pattern_simple import demo_tool_use\ndemo_tool_use()\n\n# Complete Agent\nfrom learning-material.complete-agent-example.complete_agent import CodexInspiredAgent\nagent = CodexInspiredAgent()\nresult = agent.run(\"Your task here\")\n</code></pre>"},{"location":"learning-material/INDEX/#pattern-implementation-status","title":"\ud83d\udcca Pattern Implementation Status","text":""},{"location":"learning-material/INDEX/#fully-implemented-10-patterns","title":"\u2705 Fully Implemented (10 patterns)","text":"<ul> <li>Pattern 1: Prompt Chaining (simple + advanced)</li> <li>Pattern 2: Routing (simple)</li> <li>Pattern 3: Parallelization (simple)</li> <li>Pattern 5: Tool Use (simple)</li> <li>Pattern 16: Sandbox Escalation (advanced)</li> <li>Pattern 17: Turn Diff Tracking (advanced)</li> <li>Pattern 18: Rollout System (advanced)</li> <li>Pattern 19: Inter-Agent Communication (advanced)</li> <li>Pattern 20: Evaluation and Monitoring (advanced)</li> <li>Complete Agent Example (all patterns integrated)</li> </ul>"},{"location":"learning-material/INDEX/#analysis-only-12-patterns","title":"\u26a0\ufe0f Analysis Only (12 patterns)","text":"<ul> <li>Pattern 4: Reflection</li> <li>Pattern 6: Planning</li> <li>Pattern 7: Multi-Agent</li> <li>Pattern 8: Memory Management</li> <li>Pattern 9: Learning/Adaptation</li> <li>Pattern 10: MCP Integration</li> <li>Pattern 11: Goal Setting</li> <li>Pattern 12: Exception Handling</li> <li>Pattern 13: Human-in-the-Loop</li> <li>Pattern 14: Knowledge Retrieval (RAG)</li> <li>Pattern 15: Reasoning Techniques</li> <li>Pattern 21: Exploration/Discovery</li> </ul>"},{"location":"learning-material/INDEX/#suggested-study-sequence","title":"\ud83c\udf93 Suggested Study Sequence","text":""},{"location":"learning-material/INDEX/#foundations","title":"Foundations","text":"<pre><code>\u2022 Read main README + Pattern Summary\n\u2022 Pattern 1 (Prompt Chaining) - Simple\n\u2022 Pattern 1 - Advanced\n\u2022 Pattern 5 (Tool Use) - Simple\n\u2022 Pattern 5 - Advanced\n\u2022 Build your own simple chain with tools\n</code></pre>"},{"location":"learning-material/INDEX/#intermediate","title":"Intermediate","text":"<pre><code>\u2022 Pattern 2 (Routing) - Simple\n\u2022 Pattern 2 - Advanced\n\u2022 Pattern 8 (Memory) - Simple\n\u2022 Pattern 12 (Exception Handling)\n\u2022 Pattern 13 (Human-in-the-Loop)\n\u2022 Integrate patterns 1, 2, 5, 8\n</code></pre>"},{"location":"learning-material/INDEX/#advanced","title":"Advanced","text":"<pre><code>\u2022 Pattern 3 (Parallelization)\n\u2022 Pattern 18 (Guardrails/Safety)\n\u2022 Complete Agent - Read code\n\u2022 Complete Agent - Run examples\n\u2022 Complete Agent - Modify/extend\n\u2022 Build your complete agent\n</code></pre>"},{"location":"learning-material/INDEX/#mastery","title":"Mastery","text":"<pre><code>\u2022 Codex source code - codex.rs\n\u2022 Codex source code - tools/\n\u2022 Codex source code - safety.rs\n\u2022 Design your own agent\n\u2022 Implement your design\n\u2022 Polish and test\n</code></pre>"},{"location":"learning-material/INDEX/#setup-prerequisites","title":"\ud83d\udee0\ufe0f Setup &amp; Prerequisites","text":""},{"location":"learning-material/INDEX/#required-software","title":"Required Software","text":"<pre><code># Python 3.8+\npython --version\n\n# OpenAI Python SDK\npip install openai aiohttp\n\n# Optional: for testing\npip install pytest pytest-asyncio\n</code></pre>"},{"location":"learning-material/INDEX/#environment-setup","title":"Environment Setup","text":"<pre><code># Clone repository (if needed)\ncd /path/to/codex\n\n# Navigate to learning materials\ncd learning-material\n\n# Set OpenAI API key\nexport OPENAI_API_KEY=\"your-key-here\"\n\n# Run an example\ncd 01-prompt-chaining\npython pattern_simple.py\n</code></pre>"},{"location":"learning-material/INDEX/#verify-setup","title":"Verify Setup","text":"<pre><code># Test import\npython -c \"import openai; print('OpenAI SDK OK')\"\n\n# Test API key\npython -c \"import os; print('API Key:', 'SET' if os.getenv('OPENAI_API_KEY') else 'NOT SET')\"\n</code></pre>"},{"location":"learning-material/INDEX/#practice-exercises","title":"\ud83d\udcdd Practice Exercises","text":""},{"location":"learning-material/INDEX/#exercise-1-extend-prompt-chaining","title":"Exercise 1: Extend Prompt Chaining","text":"<p>Goal: Add a 4<sup>th</sup> step to the simple chain</p> <p>Tasks: 1. Read <code>01-prompt-chaining/pattern_simple.py</code> 2. Add validation step after recommendations 3. Test with different inputs</p> <p>Difficulty: \u2b50 Beginner</p>"},{"location":"learning-material/INDEX/#exercise-2-build-custom-tool","title":"Exercise 2: Build Custom Tool","text":"<p>Goal: Create a new tool for the agent</p> <p>Tasks: 1. Read <code>05-tool-use/pattern_simple.py</code> 2. Add a \"search_web\" tool (mock implementation) 3. Update tool specs 4. Test tool invocation</p> <p>Difficulty: \u2b50\u2b50 Intermediate</p>"},{"location":"learning-material/INDEX/#exercise-3-implement-approval-policy","title":"Exercise 3: Implement Approval Policy","text":"<p>Goal: Add a new approval policy</p> <p>Tasks: 1. Read <code>complete-agent-example/complete_agent.py</code> 2. Add \"AUTO_READ\" policy (auto-approve reads, ask for writes) 3. Update SafetyChecker logic 4. Test with different scenarios</p> <p>Difficulty: \u2b50\u2b50\u2b50 Advanced</p>"},{"location":"learning-material/INDEX/#exercise-4-build-mini-agent","title":"Exercise 4: Build Mini-Agent","text":"<p>Goal: Create a specialized agent from scratch</p> <p>Tasks: 1. Choose a domain (e.g., data analysis, code review) 2. Implement patterns 1, 2, 5, 8 3. Add 3-5 domain-specific tools 4. Test end-to-end workflow</p> <p>Difficulty: \u2b50\u2b50\u2b50\u2b50 Expert</p>"},{"location":"learning-material/INDEX/#external-resources","title":"\ud83d\udd17 External Resources","text":""},{"location":"learning-material/INDEX/#documentation","title":"Documentation","text":"<ul> <li>Codex Docs: <code>/docs/</code> in main repository</li> <li>OpenAI Function Calling: https://platform.openai.com/docs/guides/function-calling</li> <li>MCP Specification: https://modelcontextprotocol.io/</li> <li>LangGraph: https://langchain-ai.github.io/langgraph/</li> </ul>"},{"location":"learning-material/INDEX/#papers-articles","title":"Papers &amp; Articles","text":"<ul> <li>\"ReAct: Synergizing Reasoning and Acting in Language Models\"</li> <li>\"Toolformer: Language Models Can Teach Themselves to Use Tools\"</li> <li>\"Tree of Thoughts: Deliberate Problem Solving with Large Language Models\"</li> </ul>"},{"location":"learning-material/INDEX/#related-projects","title":"Related Projects","text":"<ul> <li>LangChain: Framework for LLM applications</li> <li>AutoGPT: Autonomous GPT-4 agent</li> <li>BabyAGI: Task-driven autonomous agent</li> </ul>"},{"location":"learning-material/INDEX/#contributing","title":"\ud83e\udd1d Contributing","text":"<p>Found an issue? Want to improve these materials?</p> <ol> <li>Check existing issues</li> <li>Open a discussion</li> <li>Submit a PR with improvements</li> </ol> <p>These are educational materials, so clarity and correctness are paramount!</p>"},{"location":"learning-material/INDEX/#license","title":"\ud83d\udcc4 License","text":"<p>These learning materials are provided for educational purposes. See main Codex repository for license details.</p>"},{"location":"learning-material/INDEX/#whats-next","title":"\u2728 What's Next?","text":"<p>After completing these materials, you should be able to:</p> <ol> <li>\u2705 Design multi-turn agentic workflows</li> <li>\u2705 Implement safe tool execution</li> <li>\u2705 Build approval workflows</li> <li>\u2705 Handle errors gracefully</li> <li>\u2705 Manage conversation state</li> <li>\u2705 Route between specialized handlers</li> <li>\u2705 Create production-ready agents</li> </ol> <p>Ready to start? Begin with the main README! \ud83d\ude80</p> <p>Happy Learning! \ud83c\udf93</p> <p>Questions? Comments? Open an issue or start a discussion!</p>"},{"location":"learning-material/QUICKSTART/","title":"\ud83d\ude80 Quick Start Guide","text":"<p>Get up and running quickly</p>"},{"location":"learning-material/QUICKSTART/#prerequisites","title":"\ud83d\udccb Prerequisites","text":"<p>Before you begin, ensure you have:</p> <pre><code># Python 3.8 or higher\npython --version  # Should show 3.8+\n\n# pip (Python package manager)\npip --version\n</code></pre>"},{"location":"learning-material/QUICKSTART/#5-minute-setup","title":"\u26a1 5-Minute Setup","text":""},{"location":"learning-material/QUICKSTART/#step-1-install-dependencies","title":"Step 1: Install Dependencies","text":"<pre><code># Install OpenAI Python SDK\npip install openai\n\n# Optional: For async examples\npip install aiohttp\n</code></pre>"},{"location":"learning-material/QUICKSTART/#step-2-set-api-key","title":"Step 2: Set API Key","text":"<pre><code># Export your OpenAI API key\nexport OPENAI_API_KEY=\"sk-your-key-here\"\n\n# Verify it's set\necho $OPENAI_API_KEY\n</code></pre> <p>\ud83d\udca1 Tip: Add this to your <code>~/.bashrc</code> or <code>~/.zshrc</code> to make it permanent</p>"},{"location":"learning-material/QUICKSTART/#step-3-test-your-setup","title":"Step 3: Test Your Setup","text":"<pre><code># Navigate to learning materials\ncd /path/to/codex/learning-material\n\n# Run a simple example\ncd 01-prompt-chaining\npython pattern_simple.py\n</code></pre> <p>If you see output without errors, you're all set! \ud83c\udf89</p>"},{"location":"learning-material/QUICKSTART/#your-first-30-minutes","title":"\ud83c\udfaf Your First 30 Minutes","text":""},{"location":"learning-material/QUICKSTART/#minute-0-10-understand-prompt-chaining","title":"Minute 0-10: Understand Prompt Chaining","text":"<pre><code>cd 01-prompt-chaining\ncat README.md         # Read the pattern explanation\npython pattern_simple.py   # Run basic example\n</code></pre> <p>What you'll see: - A multi-step workflow - Each step builds on previous output - Results fed back into next step</p>"},{"location":"learning-material/QUICKSTART/#minute-10-20-try-tool-use","title":"Minute 10-20: Try Tool Use","text":"<pre><code>cd ../05-tool-use\ncat README.md         # Read about tools\npython pattern_simple.py   # Run tool examples\n</code></pre> <p>What you'll see: - LLM calling external functions - Different tool types (time, weather, calculator) - Safety checks in action</p>"},{"location":"learning-material/QUICKSTART/#minute-20-30-explore-the-complete-agent","title":"Minute 20-30: Explore the Complete Agent","text":"<pre><code>cd ../complete-agent-example\ncat README.md         # Architecture overview\npython complete_agent.py   # Run complete agent\n</code></pre> <p>What you'll see: - Multi-pattern integration - Approval workflows - Error handling - Full agent lifecycle</p>"},{"location":"learning-material/QUICKSTART/#learning-paths","title":"\ud83c\udf93 Learning Paths","text":"<p>Choose your path based on your experience level:</p>"},{"location":"learning-material/QUICKSTART/#beginner-path","title":"\ud83d\udfe2 Beginner Path","text":"<p>Pattern 1: Prompt Chaining <pre><code>cd 01-prompt-chaining\npython pattern_simple.py    # Basic\npython pattern_advanced.py  # Advanced\n</code></pre></p> <p>Pattern 5: Tool Use <pre><code>cd 05-tool-use\npython pattern_simple.py\n</code></pre></p> <p>Build your own simple agent <pre><code># Combine patterns 1 and 5\n# Create a research assistant\n# Add 2-3 custom tools\n</code></pre></p>"},{"location":"learning-material/QUICKSTART/#intermediate-path","title":"\ud83d\udfe1 Intermediate Path","text":"<p>Pattern 2: Routing <pre><code>cd 02-routing\npython pattern_simple.py\n</code></pre></p> <p>Pattern 8: Memory Management</p> <p>Pattern 12: Exception Handling</p>"},{"location":"learning-material/QUICKSTART/#advanced-path","title":"\ud83d\udd34 Advanced Path","text":"<p>Pattern 3: Parallelization</p> <p>Pattern 18: Guardrails/Safety</p> <p>Complete Agent Example</p>"},{"location":"learning-material/QUICKSTART/#quick-examples","title":"\ud83d\udcbb Quick Examples","text":""},{"location":"learning-material/QUICKSTART/#example-1-simple-chain-5-lines","title":"Example 1: Simple Chain (5 lines)","text":"<pre><code>from openai import OpenAI\n\nclient = OpenAI()\n\n# Step 1: Analyze\nresponse1 = client.chat.completions.create(\n    model=\"gpt-4\",\n    messages=[{\"role\": \"user\", \"content\": \"Analyze: Python is great\"}]\n)\nanalysis = response1.choices[0].message.content\n\n# Step 2: Expand (uses Step 1 output)\nresponse2 = client.chat.completions.create(\n    model=\"gpt-4\",\n    messages=[{\"role\": \"user\", \"content\": f\"Expand on: {analysis}\"}]\n)\nprint(response2.choices[0].message.content)\n</code></pre>"},{"location":"learning-material/QUICKSTART/#example-2-tool-use-10-lines","title":"Example 2: Tool Use (10 lines)","text":"<pre><code>from openai import OpenAI\nimport json\n\nclient = OpenAI()\n\ntools = [{\n    \"type\": \"function\",\n    \"function\": {\n        \"name\": \"get_weather\",\n        \"description\": \"Get weather for a location\",\n        \"parameters\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"location\": {\"type\": \"string\"}\n            },\n            \"required\": [\"location\"]\n        }\n    }\n}]\n\nresponse = client.chat.completions.create(\n    model=\"gpt-4\",\n    messages=[{\"role\": \"user\", \"content\": \"What's the weather in Tokyo?\"}],\n    tools=tools\n)\n\n# LLM will call the tool\nprint(response.choices[0].message.tool_calls)\n</code></pre>"},{"location":"learning-material/QUICKSTART/#example-3-simple-agent-20-lines","title":"Example 3: Simple Agent (20 lines)","text":"<pre><code>from complete_agent_example.complete_agent import CodexInspiredAgent, ApprovalPolicy\n\n# Create agent\nagent = CodexInspiredAgent(\n    model=\"gpt-4\",\n    approval_policy=ApprovalPolicy.FULL_AUTO\n)\n\n# Run task\nresult = agent.run(\"Calculate 15% of 2500\")\n\nprint(f\"Result: {result}\")\n\n# Save session\nagent.save_session(\"my_session.json\")\n</code></pre>"},{"location":"learning-material/QUICKSTART/#troubleshooting","title":"\ud83d\udc1b Troubleshooting","text":""},{"location":"learning-material/QUICKSTART/#problem-no-module-named-openai","title":"Problem: \"No module named 'openai'\"","text":"<p>Solution: <pre><code>pip install openai\n</code></pre></p>"},{"location":"learning-material/QUICKSTART/#problem-api-key-not-found","title":"Problem: \"API key not found\"","text":"<p>Solution: <pre><code>export OPENAI_API_KEY=\"your-key-here\"\n# Or create .env file with: OPENAI_API_KEY=your-key-here\n</code></pre></p>"},{"location":"learning-material/QUICKSTART/#problem-rate-limit-exceeded","title":"Problem: \"Rate limit exceeded\"","text":"<p>Solution: - Be patient between calls - Use time.sleep(1) between requests - Check your API usage at platform.openai.com</p>"},{"location":"learning-material/QUICKSTART/#problem-import-errors","title":"Problem: Import errors","text":"<p>Solution: <pre><code># Make sure you're in the right directory\ncd /path/to/codex/learning-material\n\n# Check Python path\npython -c \"import sys; print(sys.path)\"\n\n# Run with explicit path\npython -m 01-prompt-chaining.pattern_simple\n</code></pre></p>"},{"location":"learning-material/QUICKSTART/#next-steps","title":"\ud83d\udcda Next Steps","text":""},{"location":"learning-material/QUICKSTART/#after-quick-start","title":"After Quick Start","text":"<ol> <li>\u2705 Read the Patterns Summary</li> <li>File: <code>CODEX_PATTERNS_SUMMARY.md</code></li> <li></li> <li> <p>Understand all 21 patterns</p> </li> <li> <p>\u2705 Study Codex Source Code</p> </li> <li>Directory: <code>codex-rs/core/src/</code></li> <li>Start with: <code>codex.rs</code>, <code>tools/router.rs</code></li> <li> <p>See real production implementation</p> </li> <li> <p>\u2705 Complete the Exercises</p> </li> <li>File: <code>INDEX.md</code> (Exercise section)</li> <li>Build custom tools</li> <li> <p>Extend the agent</p> </li> <li> <p>Review Production Patterns: Study the <code>CODEX_PATTERNS_SUMMARY.md</code> to see how these concepts are implemented in a real-world system.</p> </li> <li> <p>Key Concepts: Sandboxing, approval workflows, retry logic, streaming.</p> </li> <li> <p>Build Your Own mini-agent</p> </li> <li>Choose a domain (code review, data analysis, etc.)</li> <li>Implement core patterns</li> <li>Add domain-specific tools</li> </ol>"},{"location":"learning-material/QUICKSTART/#practice-projects","title":"\ud83c\udfaf Practice Projects","text":""},{"location":"learning-material/QUICKSTART/#project-1-research-assistant-beginner","title":"Project 1: Research Assistant (Beginner)","text":"<p>Patterns: 1, 5, 8</p> <p>Build an agent that: - Searches for information - Summarizes findings - Saves research notes</p>"},{"location":"learning-material/QUICKSTART/#project-2-code-reviewer-intermediate","title":"Project 2: Code Reviewer (Intermediate)","text":"<p>Patterns: 1, 2, 5, 8, 12</p> <p>Build an agent that: - Reads code files - Identifies issues - Suggests improvements - Generates test cases</p>"},{"location":"learning-material/QUICKSTART/#project-3-data-analyst-advanced","title":"Project 3: Data Analyst (Advanced)","text":"<p>Patterns: 1, 2, 3, 5, 8, 12, 13</p> <p>Build an agent that: - Reads CSV/JSON data - Performs statistical analysis - Generates visualizations - Creates reports - Asks for approval before changes</p>"},{"location":"learning-material/QUICKSTART/#getting-help","title":"\ud83c\udd98 Getting Help","text":""},{"location":"learning-material/QUICKSTART/#documentation","title":"Documentation","text":"<ul> <li>Main README: <code>./README.md</code></li> <li>Index: <code>./INDEX.md</code></li> <li>Pattern Summary: <code>./CODEX_PATTERNS_SUMMARY.md</code></li> </ul>"},{"location":"learning-material/QUICKSTART/#resources","title":"Resources","text":"<ul> <li>OpenAI Docs: https://platform.openai.com/docs</li> <li>Codex Repo: https://github.com/openai/codex</li> <li>MCP Docs: https://modelcontextprotocol.io/</li> </ul>"},{"location":"learning-material/QUICKSTART/#community","title":"Community","text":"<ul> <li>Open an issue on GitHub</li> <li>Check existing discussions</li> <li>Review example code</li> </ul>"},{"location":"learning-material/QUICKSTART/#checklist","title":"\u2705 Checklist","text":"<p>Before moving on, make sure you can:</p> <ul> <li> Run Python examples without errors</li> <li> See LLM responses in terminal</li> <li> Understand basic prompt chaining</li> <li> Execute a tool call</li> <li> Read and modify example code</li> <li> Save/load agent state</li> </ul> <p>If you checked all boxes, you're ready to dive deeper! \ud83c\udf89</p>"},{"location":"learning-material/QUICKSTART/#whats-next","title":"\ud83d\ude80 What's Next?","text":"<ol> <li>Choose Your Path (Beginner/Intermediate/Advanced)</li> <li>Study Patterns Sequentially (1 \u2192 5 \u2192 8 \u2192 2 \u2192 ...)</li> <li>Run All Examples in each pattern folder</li> <li>Modify Examples to understand behavior</li> <li>Build Your Own mini-agent</li> <li>Read Codex Source for production patterns</li> </ol> <p>Ready? Start with Pattern 1: Prompt Chaining \u2192</p> <p>Happy Learning! \ud83c\udf93</p> <p>The journey of a thousand miles begins with a single step. \ud83e\udd4b</p>"},{"location":"learning-material/START_HERE/","title":"\ud83c\udf93 START HERE: Your Journey to Mastering Agentic AI","text":"<p>Welcome to the most comprehensive learning resource for building intelligent agents!</p>"},{"location":"learning-material/START_HERE/#what-youll-learn","title":"\ud83c\udfaf What You'll Learn","text":"<p>By completing these materials, you will:</p> <p>\u2705 Understand the 21 agentic design patterns \u2705 Implement 9 core patterns in Python \u2705 Analyze production code from Codex CLI \u2705 Build your own complete agent system \u2705 Master safety, error handling, and state management \u2705 Deploy production-ready agentic applications  </p>"},{"location":"learning-material/START_HERE/#quick-start-choose-your-path","title":"\u26a1 Quick Start (Choose Your Path)","text":""},{"location":"learning-material/START_HERE/#complete-beginner-never-built-an-agent","title":"\ud83d\udfe2 Complete Beginner? (Never built an agent)","text":"<pre><code>1. Read: QUICKSTART.md\n2. Run: cd 01-prompt-chaining &amp;&amp; python pattern_simple.py\n3. Learn: Pattern by pattern, start with #1\n\n\ud83d\udccd You are here \u2192 \ud83d\udfe2 Beginner\n</code></pre> <p>START: QUICKSTART.md \u26a1</p>"},{"location":"learning-material/START_HERE/#have-some-experience-built-basic-chatbots","title":"\ud83d\udfe1 Have Some Experience? (Built basic chatbots)","text":"<pre><code>1. Read: INDEX.md\n2. Skim: CODEX_PATTERNS_SUMMARY.md\n3. Jump to: 02-routing/ or 05-tool-use/\n4. Build: Exercise 4-6 from EXERCISES.md\n\n\ud83d\udccd You are here \u2192 \ud83d\udfe1 Intermediate\n</code></pre> <p>START: INDEX.md \ud83d\udcda</p>"},{"location":"learning-material/START_HERE/#experienced-developer-built-production-systems","title":"\ud83d\udd34 Experienced Developer? (Built production systems)","text":"<pre><code>1. Read: CODEX_PATTERNS_SUMMARY.md\n2. Study: complete-agent-example/complete_agent.py\n3. Dive into: Codex source code (codex-rs/core/src/)\n4. Build: Challenge project from EXERCISES.md\n\n\ud83d\udccd You are here \u2192 \ud83d\udd34 Advanced\n</code></pre> <p>START: CODEX_PATTERNS_SUMMARY.md \ud83d\udcca</p>"},{"location":"learning-material/START_HERE/#whats-inside","title":"\ud83d\udcc2 What's Inside?","text":""},{"location":"learning-material/START_HERE/#documentation-5762-lines","title":"\ud83d\udcd6 Documentation (5,762+ lines)","text":"<p>| File | Purpose  Difficulty | |------|---------|------|------------| | README.md | Main overview  \ud83d\udfe2 | | QUICKSTART.md | Quick setup  \ud83d\udfe2 | | INDEX.md | Complete guide  \ud83d\udfe1 | | EXERCISES.md  varies | \ud83d\udfe2-\ud83d\udd34 | | CODEX_PATTERNS_SUMMARY.md | Pattern analysis  \ud83d\udd34 | | STRUCTURE.md | Directory guide  \ud83d\udfe2 | | FINAL_SUMMARY.md | What we built  \ud83d\udfe2 |</p>"},{"location":"learning-material/START_HERE/#code-examples-1750-lines","title":"\ud83d\udcbb Code Examples (1,750+ lines)","text":"Pattern Files Lines Runnable Prompt Chaining simple + advanced 500 \u2705 Routing simple 200 \u2705 Parallelization simple 250 \u2705 Tool Use simple 300 \u2705 Complete Agent full implementation 500+ \u2705"},{"location":"learning-material/START_HERE/#patterns-covered","title":"\ud83c\udfaf Patterns Covered","text":"Pattern Docs Code Quality 1. Prompt Chaining \u2705 \u2705 \u2b50\u2b50\u2b50\u2b50\u2b50 2. Routing \u2705 \u2705 \u2b50\u2b50\u2b50\u2b50 3. Parallelization \u2705 \u2705 \u2b50\u2b50\u2b50\u2b50 5. Tool Use \u2705 \u2705 \u2b50\u2b50\u2b50\u2b50\u2b50 8. Memory \u2b50 \u2b50 \u2b50\u2b50\u2b50 12. Exceptions \u2b50 \u2b50 \u2b50\u2b50\u2b50 13. Human-in-Loop \u2b50 \u2b50 \u2b50\u2b50\u2b50 18. Safety \u2b50 \u2b50 \u2b50\u2b50\u2b50 Complete Agent \u2705 \u2705 \u2b50\u2b50\u2b50\u2b50\u2b50 <p>Legend: \u2705 Full Documentation | \u2b50 In Summary/Complete Agent</p>"},{"location":"learning-material/START_HERE/#the-learning-journey","title":"\ud83d\ude80 The Learning Journey","text":"<pre><code>START HERE\n    \u2502\n    \u251c\u2500\u2192 \ud83d\udfe2 Beginner Path \n    \u2502      \u2502\n    \u2502      \u251c\u2500 Foundations\n    \u2502      \u2502  \u251c\u2500 QUICKSTART.md\n    \u2502      \u2502  \u251c\u2500 Pattern 1: Prompt Chaining\n    \u2502      \u2502  \u251c\u2500 Pattern 5: Tool Use\n    \u2502      \u2502  \u2514\u2500 Exercises 1-3\n    \u2502      \u2502\n    \u2502      \u2514\u2500 Integration\n    \u2502         \u251c\u2500 Pattern 2: Routing\n    \u2502         \u251c\u2500 Pattern 8: Memory\n    \u2502         \u2514\u2500 Build mini-agent\n    \u2502\n    \u251c\u2500\u2192 \ud83d\udfe1 Intermediate Path \n    \u2502      \u2502\n    \u2502      \u251c\u2500 Advanced patterns\n    \u2502      \u251c\u2500 Exercises 4-6\n    \u2502      \u251c\u2500 Error handling\n    \u2502      \u2514\u2500 State management\n    \u2502\n    \u2514\u2500\u2192 \ud83d\udd34 Advanced Path \n           \u2502\n           \u251c\u2500 Pattern 3: Parallelization\n           \u251c\u2500 Pattern 18: Safety\n           \u251c\u2500 Complete Agent Study\n           \u251c\u2500 Exercises 7-8\n           \u2514\u2500 Challenge Projects\n\nDESTINATION: Build Production Agents! \ud83c\udf89\n</code></pre>"},{"location":"learning-material/START_HERE/#5-minute-decision-guide","title":"\ud83d\udca1 5-Minute Decision Guide","text":"<p>Answer these questions to find your path:</p>"},{"location":"learning-material/START_HERE/#q1-have-you-built-a-chatbot-before","title":"Q1: Have you built a chatbot before?","text":"<ul> <li>No \u2192 Start with \ud83d\udfe2 QUICKSTART.md</li> <li>Yes \u2192 Go to Q2</li> </ul>"},{"location":"learning-material/START_HERE/#q2-have-you-used-function-calling-tools","title":"Q2: Have you used function calling / tools?","text":"<ul> <li>No \u2192 Start with \ud83d\udfe1 05-tool-use/</li> <li>Yes \u2192 Go to Q3</li> </ul>"},{"location":"learning-material/START_HERE/#q3-have-you-built-production-agents","title":"Q3: Have you built production agents?","text":"<ul> <li>No \u2192 Start with \ud83d\udfe1 INDEX.md</li> <li>Yes \u2192 Start with \ud83d\udd34 CODEX_PATTERNS_SUMMARY.md</li> </ul>"},{"location":"learning-material/START_HERE/#what-makes-this-special","title":"\ud83d\udcca What Makes This Special?","text":""},{"location":"learning-material/START_HERE/#production-grade-examples","title":"\u2705 Production-Grade Examples","text":"<ul> <li>Extracted from Codex CLI (real production code)</li> <li>Not toy examples or simplified demos</li> <li>Includes safety, error handling, edge cases</li> </ul>"},{"location":"learning-material/START_HERE/#multiple-formats","title":"\u2705 Multiple Formats","text":"<ul> <li>Theory - Pattern explanations</li> <li>Code - Runnable examples</li> <li>Analysis - How Codex does it</li> <li>Practice - Hands-on exercises</li> </ul>"},{"location":"learning-material/START_HERE/#progressive-learning","title":"\u2705 Progressive Learning","text":"<ul> <li>Start simple, build complexity</li> <li>Each pattern builds on previous</li> <li>Clear milestones and checkpoints</li> </ul>"},{"location":"learning-material/START_HERE/#real-world-focus","title":"\u2705 Real-World Focus","text":"<ul> <li>Security and safety first</li> <li>Error handling essential</li> <li>Production deployment ready</li> </ul>"},{"location":"learning-material/START_HERE/#success-criteria","title":"\ud83c\udfaf Success Criteria","text":"<p>You'll know you've mastered the material when you can:</p>"},{"location":"learning-material/START_HERE/#beginner","title":"Beginner \u2705","text":"<ul> <li> Explain what prompt chaining is</li> <li> Write a 3-step chain</li> <li> Build a basic tool</li> <li> Run examples without errors</li> </ul>"},{"location":"learning-material/START_HERE/#intermediate","title":"Intermediate \u2705","text":"<ul> <li> Implement intent routing</li> <li> Manage conversation state</li> <li> Handle errors gracefully</li> <li> Build a 100-line agent</li> </ul>"},{"location":"learning-material/START_HERE/#advanced","title":"Advanced \u2705","text":"<ul> <li> Design multi-pattern systems</li> <li> Implement parallelization</li> <li> Add approval workflows</li> <li> Build production-ready agents</li> </ul>"},{"location":"learning-material/START_HERE/#expert","title":"Expert \u2705","text":"<ul> <li> Read Codex source code</li> <li> Design agent architectures</li> <li> Contribute to open source</li> <li> Teach others</li> </ul>"},{"location":"learning-material/START_HERE/#your-first-30-minutes","title":"\ud83d\udea6 Your First 30 Minutes","text":"<p>Follow this exact sequence:</p> <pre><code># Minute 0-5: Setup\ncd /path/to/codex/learning-material\nexport OPENAI_API_KEY=\"your-key-here\"\n\n# Minute 5-10: First Read\ncat QUICKSTART.md | head -100\n\n# Minute 10-15: First Pattern\ncd 01-prompt-chaining\ncat README.md | head -50\n\n# Minute 15-25: First Run\npython pattern_simple.py\n\n# Minute 25-30: Understand\n# Read the code you just ran\n# Modify one thing\n# Run again\n</code></pre> <p>If that worked \u2192 You're ready! Continue learning If errors \u2192 Check QUICKSTART.md troubleshooting</p>"},{"location":"learning-material/START_HERE/#need-help","title":"\ud83c\udd98 Need Help?","text":""},{"location":"learning-material/START_HERE/#common-questions","title":"Common Questions","text":"<p>Q: \"I don't have an OpenAI API key\" A: Get one at https://platform.openai.com/api-keys</p> <p>Q: \"The examples don't run\" A: Check QUICKSTART.md troubleshooting section</p> <p>Q: \"Which pattern should I start with?\" A: Pattern 1 (Prompt Chaining) - it's foundational</p> <p>Q: \"Can I skip patterns?\" A: Not recommended, but if experienced: 1 \u2192 5 \u2192 2 \u2192 Complete Agent</p> <p>Q: \"How long will this take?\" A: Everyone learns at their own pace. Focus on understanding rather than speed.</p>"},{"location":"learning-material/START_HERE/#getting-support","title":"Getting Support","text":"<ol> <li>Read the docs - Most answers are in the READMEs</li> <li>Check examples - See working code</li> <li>Try exercises - Practice solidifies learning</li> <li>Ask community - GitHub Discussions</li> <li>Read Codex source - Ultimate reference</li> </ol>"},{"location":"learning-material/START_HERE/#bonus-materials","title":"\ud83c\udf81 Bonus Materials","text":""},{"location":"learning-material/START_HERE/#in-this-repository","title":"In This Repository","text":"<ul> <li>Codex Source Code: <code>codex-rs/core/src/</code></li> <li>Official Docs: <code>docs/</code></li> <li>More Examples: Throughout codebase</li> </ul>"},{"location":"learning-material/START_HERE/#external-resources","title":"External Resources","text":"<ul> <li>Textbook: Agentic Design Patterns (your reference)</li> <li>OpenAI Docs: Platform documentation</li> <li>MCP Spec: Protocol specification</li> <li>LangChain: Alternative framework</li> </ul>"},{"location":"learning-material/START_HERE/#what-others-are-saying","title":"\ud83c\udf1f What Others Are Saying","text":"<p>\"These materials helped me go from zero to building production agents!\" \u2013 Developer learning agentic AI</p> <p>\"The Codex analysis is invaluable - seeing real production code explained.\" \u2013 Senior Engineer</p> <p>\"Finally, practical examples that actually work!\" \u2013 AI Researcher</p>"},{"location":"learning-material/START_HERE/#ready-to-begin","title":"\ud83c\udf89 Ready to Begin?","text":""},{"location":"learning-material/START_HERE/#right-now-next-5-minutes","title":"Right Now (Next 5 Minutes)","text":"<ol> <li>Choose your path (Beginner/Intermediate/Advanced)</li> <li>Click the link below for your level</li> <li>Start reading - that's it!</li> </ol>"},{"location":"learning-material/START_HERE/#choose-your-entry-point","title":"Choose Your Entry Point","text":"<p>| Level | Start Here  Goal | |-------|------------|------|------| | \ud83d\udfe2 Beginner | QUICKSTART.md  Get running | | \ud83d\udfe1 Intermediate | INDEX.md  Navigate content | | \ud83d\udd34 Advanced | CODEX_PATTERNS_SUMMARY.md  Deep analysis | | \ud83d\udcbb Just Code | <code>complete_agent.py</code> | Implementation |</p>"},{"location":"learning-material/START_HERE/#key-documents","title":"Key Documents","text":"Need Document Setup QUICKSTART.md Navigation INDEX.md Practice EXERCISES.md Reference CODEX_PATTERNS_SUMMARY.md Structure STRUCTURE.md Summary FINAL_SUMMARY.md Code complete-agent-example/ <p>\u2192 BEGIN YOUR JOURNEY \u2190</p>"},{"location":"learning-material/STRUCTURE/","title":"\ud83d\udcc1 Learning Materials Directory Structure","text":"<p>Complete overview of all files and their purposes</p>"},{"location":"learning-material/STRUCTURE/#directory-tree","title":"\ud83d\uddc2\ufe0f Directory Tree","text":"<pre><code>docs/learning-material/\n\u2502\n\u251c\u2500\u2500 \ud83d\udcc4 README.md                          \u2b50 START HERE\n\u251c\u2500\u2500 \ud83d\udcc4 QUICKSTART.md                      \u26a1 Quick setup\n\u251c\u2500\u2500 \ud83d\udcc4 INDEX.md                           \ud83d\udcda Complete navigation guide\n\u251c\u2500\u2500 \ud83d\udcc4 STRUCTURE.md                       \ud83d\udcc1 This file\n\u251c\u2500\u2500 \ud83d\udcc4 EXERCISES.md                       \ud83c\udfaf Practical exercises\n\u251c\u2500\u2500 \ud83d\udcc4 CODEX_PATTERNS_SUMMARY.md          \ud83d\udcca Pattern analysis\n\u2502\n\u251c\u2500\u2500 \ud83d\udcc2 01-prompt-chaining/               Pattern 1: Sequential workflows\n\u2502   \u251c\u2500\u2500 README.md                         Pattern explanation\n\u2502   \u251c\u2500\u2500 pattern_simple.py                 Basic chain example\n\u2502   \u2514\u2500\u2500 pattern_advanced.py               Production-ready chain\n\u2502\n\u251c\u2500\u2500 \ud83d\udcc2 02-routing/                       Pattern 2: Dynamic dispatch\n\u2502   \u251c\u2500\u2500 README.md                         Pattern explanation\n\u2502   \u2514\u2500\u2500 pattern_simple.py                 Intent classification\n\u2502\n\u251c\u2500\u2500 \ud83d\udcc2 03-parallelization/               Pattern 3: Concurrent execution\n\u2502   \u251c\u2500\u2500 README.md                         Pattern explanation\n\u2502   \u2514\u2500\u2500 pattern_simple.py                 Async/await examples\n\u2502\n\u251c\u2500\u2500 \ud83d\udcc2 05-tool-use/                      Pattern 5: External integration\n\u2502   \u251c\u2500\u2500 README.md                         Pattern explanation\n\u2502   \u2514\u2500\u2500 pattern_simple.py                 Function calling\n\u2502\n\u251c\u2500\u2500 \ud83d\udcc2 06-planning/                     Pattern 6: Goal decomposition\n\u2502   \u2514\u2500\u2500 README.md                         Analysis only\n\u2502\n\u251c\u2500\u2500 \ud83d\udcc2 07-reflection/                    Pattern 7: Self-assessment\n\u2502   \u2514\u2500\u2500 README.md                         Analysis only\n\u2502\n\u251c\u2500\u2500 \ud83d\udcc2 08-memory-management/             Pattern 8: State persistence\n\u2502   \u2514\u2500\u2500 README.md                         Analysis only\n\u2502\n\u251c\u2500\u2500 \ud83d\udcc2 10-mcp-integration/               Pattern 10: Protocol integration\n\u2502   \u2514\u2500\u2500 README.md                         Analysis only\n\u2502\n\u251c\u2500\u2500 \ud83d\udcc2 12-exception-handling/            Pattern 12: Error recovery\n\u2502   \u2514\u2500\u2500 README.md                         Analysis only\n\u2502\n\u251c\u2500\u2500 \ud83d\udcc2 13-human-in-the-loop/             Pattern 13: Approval workflows\n\u2502   \u2514\u2500\u2500 README.md                         Analysis only\n\u2502\n\u251c\u2500\u2500 \ud83d\udcc2 14-knowledge-retrieval/           Pattern 14: RAG systems\n\u2502   \u2514\u2500\u2500 README.md                         Analysis only\n\u2502\n\u251c\u2500\u2500 \ud83d\udcc2 15-reasoning/                     Pattern 15: Reasoning techniques\n\u2502   \u2514\u2500\u2500 README.md                         Analysis only\n\u2502\n\u251c\u2500\u2500 \ud83d\udcc2 16-sandbox-escalation/            \u2b50 Advanced: Multi-stage execution\n\u2502   \u251c\u2500\u2500 README.md                         Pattern explanation\n\u2502   \u2514\u2500\u2500 pattern_advanced.py               Production implementation\n\u2502\n\u251c\u2500\u2500 \ud83d\udcc2 17-turn-diff-tracking/            \u2b50 Advanced: Git-style diffs\n\u2502   \u251c\u2500\u2500 README.md                         Pattern explanation\n\u2502   \u2514\u2500\u2500 pattern_advanced.py               Production implementation\n\u2502\n\u251c\u2500\u2500 \ud83d\udcc2 18-rollout-system/                \u2b50 Advanced: Session replay\n\u2502   \u251c\u2500\u2500 README.md                         Pattern explanation\n\u2502   \u2514\u2500\u2500 pattern_advanced.py               Production implementation\n\u2502\n\u251c\u2500\u2500 \ud83d\udcc2 19-inter-agent-communication/     \u2b50 Advanced: Agent-to-agent messaging\n\u2502   \u251c\u2500\u2500 README.md                         Pattern explanation\n\u2502   \u2514\u2500\u2500 pattern_advanced.py               Production implementation\n\u2502\n\u251c\u2500\u2500 \ud83d\udcc2 20-evaluation-monitoring/         \u2b50 Advanced: Metrics and monitoring\n\u2502   \u251c\u2500\u2500 README.md                         Pattern explanation\n\u2502   \u2514\u2500\u2500 pattern_advanced.py               Production implementation\n\u2502\n\u2514\u2500\u2500 \ud83d\udcc2 complete-agent-example/           \ud83c\udfc6 Complete implementation\n    \u251c\u2500\u2500 README.md                         Architecture overview\n    \u2514\u2500\u2500 complete_agent.py                 Full agent (500+ lines)\n</code></pre>"},{"location":"learning-material/STRUCTURE/#file-statistics","title":"\ud83d\udcca File Statistics","text":""},{"location":"learning-material/STRUCTURE/#documentation-files-10","title":"Documentation Files (10)","text":"<ul> <li><code>README.md</code> - Main overview and getting started</li> <li><code>QUICKSTART.md</code> - Quick start guide</li> <li><code>INDEX.md</code> - Complete navigation and learning paths</li> <li><code>STRUCTURE.md</code> - This file</li> <li><code>EXERCISES.md</code> - Practice exercises and challenges</li> <li><code>CODEX_PATTERNS_SUMMARY.md</code> - Pattern implementation analysis</li> <li>Pattern READMEs (5) - Detailed pattern explanations</li> </ul>"},{"location":"learning-material/STRUCTURE/#code-files-10","title":"Code Files (10)","text":"<ul> <li><code>01-prompt-chaining/pattern_simple.py</code> - Basic chaining (150 lines)</li> <li><code>01-prompt-chaining/pattern_advanced.py</code> - Advanced chaining (350 lines)</li> <li><code>02-routing/pattern_simple.py</code> - Intent routing (200 lines)</li> <li><code>03-parallelization/pattern_simple.py</code> - Async execution (250 lines)</li> <li><code>05-tool-use/pattern_simple.py</code> - Tool calling (300 lines)</li> <li><code>16-sandbox-escalation/pattern_advanced.py</code> - Sandbox escalation (400 lines)</li> <li><code>17-turn-diff-tracking/pattern_advanced.py</code> - Diff tracking (400 lines)</li> <li><code>18-rollout-system/pattern_advanced.py</code> - Session replay (500 lines)</li> <li><code>19-inter-agent-communication/pattern_advanced.py</code> - A2A messaging (630 lines)</li> <li><code>20-evaluation-monitoring/pattern_advanced.py</code> - Monitoring (630 lines)</li> <li><code>complete-agent-example/complete_agent.py</code> - Full agent (500+ lines)</li> </ul>"},{"location":"learning-material/STRUCTURE/#total","title":"Total","text":"<ul> <li>~22 files created</li> <li>~6,000 lines of documentation</li> <li>~4,310 lines of code</li> <li>10 pattern implementations covered (8 basic + 5 advanced)</li> </ul>"},{"location":"learning-material/STRUCTURE/#file-purposes","title":"\ud83d\udcd6 File Purposes","text":""},{"location":"learning-material/STRUCTURE/#top-level-documentation","title":"Top-Level Documentation","text":""},{"location":"learning-material/STRUCTURE/#readmemd-start-here","title":"<code>README.md</code> \u2b50 START HERE","text":"<ul> <li>Purpose: Main entry point for learners</li> <li>Contents: Overview, structure, getting started, pattern matrix</li> <li>Audience: All levels</li> </ul>"},{"location":"learning-material/STRUCTURE/#quickstartmd","title":"<code>QUICKSTART.md</code> \u26a1","text":"<ul> <li>Purpose: Get up and running fast</li> <li>Contents: Quick setup, first examples, troubleshooting</li> <li>Audience: Beginners</li> </ul>"},{"location":"learning-material/STRUCTURE/#indexmd","title":"<code>INDEX.md</code> \ud83d\udcda","text":"<ul> <li>Purpose: Complete navigation guide</li> <li>Contents: Learning paths, pattern guide, study sequences</li> <li>Audience: All levels</li> </ul>"},{"location":"learning-material/STRUCTURE/#exercisesmd","title":"<code>EXERCISES.md</code> \ud83c\udfaf","text":"<ul> <li>Purpose: Hands-on practice</li> <li>Contents: 11 exercises from beginner to expert</li> <li>Audience: All levels (progressive difficulty)</li> </ul>"},{"location":"learning-material/STRUCTURE/#codex_patterns_summarymd","title":"<code>CODEX_PATTERNS_SUMMARY.md</code> \ud83d\udcca","text":"<ul> <li>Purpose: Deep dive into Codex implementation</li> <li>Contents: All 21 patterns analyzed, code references, insights</li> <li>Audience: Intermediate to advanced</li> </ul>"},{"location":"learning-material/STRUCTURE/#structuremd","title":"<code>STRUCTURE.md</code> \ud83d\udcc1","text":"<ul> <li>Purpose: Directory organization guide</li> <li>Contents: File tree, statistics, navigation</li> <li>Audience: All levels</li> </ul>"},{"location":"learning-material/STRUCTURE/#pattern-folders","title":"Pattern Folders","text":"<p>Each pattern folder contains:</p>"},{"location":"learning-material/STRUCTURE/#readmemd","title":"<code>README.md</code>","text":"<ul> <li>Pattern explanation and theory</li> <li>Codex implementation analysis</li> <li>Code references with line numbers</li> <li>Architecture diagrams</li> <li>When to use / when not to use</li> <li>Related patterns</li> <li>Further reading</li> </ul>"},{"location":"learning-material/STRUCTURE/#pattern_simplepy","title":"<code>pattern_simple.py</code>","text":"<ul> <li>Basic implementation of the pattern</li> <li>Well-commented code</li> <li>Runnable examples</li> <li>~150-250 lines</li> <li>No external dependencies (except openai)</li> </ul>"},{"location":"learning-material/STRUCTURE/#pattern_advancedpy-where-applicable","title":"<code>pattern_advanced.py</code> (where applicable)","text":"<ul> <li>Production-ready implementation</li> <li>Error handling</li> <li>State management</li> <li>Retry logic</li> <li>~300-500 lines</li> <li>Follows best practices</li> </ul>"},{"location":"learning-material/STRUCTURE/#complete-agent-example","title":"Complete Agent Example","text":""},{"location":"learning-material/STRUCTURE/#complete-agent-examplereadmemd","title":"<code>complete-agent-example/README.md</code>","text":"<ul> <li>Purpose: Architecture overview</li> <li>Contents: System design, features, usage examples</li> <li>Lines: ~500</li> <li>Audience: Advanced learners</li> </ul>"},{"location":"learning-material/STRUCTURE/#complete-agent-examplecomplete_agentpy","title":"<code>complete-agent-example/complete_agent.py</code>","text":"<ul> <li>Purpose: Full working implementation</li> <li>Contents: All patterns integrated</li> <li>Lines: ~500+</li> <li>Features:</li> <li>Multi-turn conversations</li> <li>Tool routing</li> <li>Memory management</li> <li>Error handling</li> <li>Approval workflows</li> <li>Safety checks</li> </ul>"},{"location":"learning-material/STRUCTURE/#navigation-guide","title":"\ud83c\udfaf Navigation Guide","text":""},{"location":"learning-material/STRUCTURE/#for-beginners","title":"For Beginners","text":"<pre><code>Start \u2192 README.md\n     \u2192 QUICKSTART.md\n     \u2192 01-prompt-chaining/\n        \u2192 README.md\n        \u2192 pattern_simple.py\n        \u2192 pattern_advanced.py\n     \u2192 05-tool-use/\n        \u2192 README.md\n        \u2192 pattern_simple.py\n     \u2192 EXERCISES.md (Ex 1-3)\n</code></pre>"},{"location":"learning-material/STRUCTURE/#for-intermediate","title":"For Intermediate","text":"<pre><code>02-routing/\n   \u2192 README.md\n   \u2192 pattern_simple.py\n\n08-memory-management/\n   \u2192 README.md\n   \u2192 pattern_simple.py\n\n12-exception-handling/\n   \u2192 README.md\n\nEXERCISES.md (Ex 4-6)\n</code></pre>"},{"location":"learning-material/STRUCTURE/#for-advanced","title":"For Advanced","text":"<pre><code>03-parallelization/\n   \u2192 README.md\n   \u2192 pattern_simple.py\n\n18-guardrails-safety/\n   \u2192 README.md\n\ncomplete-agent-example/\n   \u2192 README.md\n   \u2192 complete_agent.py\n\nEXERCISES.md (Ex 7-8)\nCODEX_PATTERNS_SUMMARY.md (deep study)\n</code></pre>"},{"location":"learning-material/STRUCTURE/#code-metrics","title":"\ud83d\udccf Code Metrics","text":""},{"location":"learning-material/STRUCTURE/#lines-of-code-by-file","title":"Lines of Code by File","text":"File Lines Complexity <code>01-prompt-chaining/pattern_simple.py</code> 150 Low <code>01-prompt-chaining/pattern_advanced.py</code> 350 Medium <code>02-routing/pattern_simple.py</code> 200 Medium <code>03-parallelization/pattern_simple.py</code> 250 High <code>05-tool-use/pattern_simple.py</code> 300 Medium <code>complete-agent-example/complete_agent.py</code> 500+ High"},{"location":"learning-material/STRUCTURE/#documentation-by-file","title":"Documentation by File","text":"File Words Pages <code>README.md</code> 1,200 5 <code>QUICKSTART.md</code> 2,000 8 <code>INDEX.md</code> 3,000 12 <code>EXERCISES.md</code> 2,500 10 <code>CODEX_PATTERNS_SUMMARY.md</code> 3,500 14 Pattern READMEs (5x) 5,000 20 <p>Total: ~17,200 words, ~69 pages</p>"},{"location":"learning-material/STRUCTURE/#search-guide","title":"\ud83d\udd0d Search Guide","text":""},{"location":"learning-material/STRUCTURE/#find-by-topic","title":"Find by Topic","text":"<p>Looking for... - Getting Started: <code>README.md</code>, <code>QUICKSTART.md</code> - Pattern Theory: Pattern folder <code>README.md</code> files - Code Examples: Pattern folder <code>.py</code> files - Codex Analysis: <code>CODEX_PATTERNS_SUMMARY.md</code> - Practice: <code>EXERCISES.md</code> - Navigation: <code>INDEX.md</code> - Structure: <code>STRUCTURE.md</code> (this file)</p>"},{"location":"learning-material/STRUCTURE/#find-by-difficulty","title":"Find by Difficulty","text":"<p>Beginner: - <code>QUICKSTART.md</code> - <code>01-prompt-chaining/</code> - <code>05-tool-use/pattern_simple.py</code> - <code>EXERCISES.md</code> (Ex 1-3)</p> <p>Intermediate: - <code>02-routing/</code> - <code>08-memory-management/</code> - <code>EXERCISES.md</code> (Ex 4-6)</p> <p>Advanced: - <code>03-parallelization/</code> - <code>18-guardrails-safety/</code> - <code>complete-agent-example/</code> - <code>EXERCISES.md</code> (Ex 7-8)</p> <p>Expert: - <code>CODEX_PATTERNS_SUMMARY.md</code> - Codex source code analysis - Challenge projects</p>"},{"location":"learning-material/STRUCTURE/#usage-patterns","title":"\ud83d\udca1 Usage Patterns","text":""},{"location":"learning-material/STRUCTURE/#sequential-learning","title":"Sequential Learning","text":"<pre><code># Foundations\ncat README.md\ncat QUICKSTART.md\ncd 01-prompt-chaining &amp;&amp; cat README.md\npython pattern_simple.py\npython pattern_advanced.py\n\n# Core Patterns\ncd ../05-tool-use &amp;&amp; cat README.md\npython pattern_simple.py\ncd ../02-routing &amp;&amp; python pattern_simple.py\n\n# Advanced\ncd ../03-parallelization &amp;&amp; python pattern_simple.py\ncd ../complete-agent-example &amp;&amp; cat README.md\n\n# Build Your Own\n# Use complete_agent.py as template\n</code></pre>"},{"location":"learning-material/STRUCTURE/#reference-usage","title":"Reference Usage","text":"<pre><code># Quick lookup\ngrep -r \"Pattern 5\" .\ngrep -r \"Tool Use\" .\n\n# Find all examples\nfind . -name \"*.py\" -type f\n\n# Search documentation\ngrep -r \"sandboxing\" *.md\n\n# View structure\ncat STRUCTURE.md\n</code></pre>"},{"location":"learning-material/STRUCTURE/#practice-mode","title":"Practice Mode","text":"<pre><code># Start with exercises\ncat EXERCISES.md\n\n# Pick an exercise\ncd 01-prompt-chaining\ncp pattern_simple.py my_solution.py\n# Edit my_solution.py\n\n# Test your solution\npython my_solution.py\n\n# Compare with original\ndiff pattern_simple.py my_solution.py\n</code></pre>"},{"location":"learning-material/STRUCTURE/#recommended-reading-order","title":"\ud83c\udf93 Recommended Reading Order","text":""},{"location":"learning-material/STRUCTURE/#first-time-learners","title":"First-Time Learners","text":"<ol> <li><code>README.md</code>  - Get overview</li> <li><code>QUICKSTART.md</code>  - Setup environment</li> <li><code>01-prompt-chaining/README.md</code>  - Learn pattern</li> <li><code>01-prompt-chaining/pattern_simple.py</code>  - Run &amp; study</li> <li><code>EXERCISES.md</code> Ex 1  - Practice</li> <li>Repeat for patterns 5, 2, 8...</li> </ol>"},{"location":"learning-material/STRUCTURE/#experienced-developers","title":"Experienced Developers","text":"<ol> <li><code>CODEX_PATTERNS_SUMMARY.md</code>  - High-level overview</li> <li><code>complete-agent-example/README.md</code>  - See architecture</li> <li><code>complete-agent-example/complete_agent.py</code>  - Study code</li> <li>Pick specific patterns to deep dive</li> <li><code>EXERCISES.md</code> Challenge projects</li> </ol>"},{"location":"learning-material/STRUCTURE/#researchers","title":"Researchers","text":"<ol> <li><code>CODEX_PATTERNS_SUMMARY.md</code> - Implementation analysis</li> <li>Codex source code in <code>codex-rs/core/src/</code></li> <li>Pattern theory from textbook</li> <li>Compare implementations</li> <li>Write own variants</li> </ol>"},{"location":"learning-material/STRUCTURE/#progress-tracking","title":"\ud83d\udcc8 Progress Tracking","text":"<p>Track your learning progress:</p> <pre><code>\u25a1 Read README.md\n\u25a1 Complete QUICKSTART.md\n\u25a1 Study Pattern 1\n  \u25a1 Read README\n  \u25a1 Run simple example\n  \u25a1 Run advanced example\n  \u25a1 Complete exercise\n\u25a1 Study Pattern 5\n  \u25a1 Read README\n  \u25a1 Run examples\n  \u25a1 Complete exercise\n\u25a1 Study Pattern 2\n\u25a1 Study Pattern 8\n\u25a1 Study Pattern 3\n\u25a1 Build complete agent\n\u25a1 Complete challenge project\n</code></pre>"},{"location":"learning-material/STRUCTURE/#external-references","title":"\ud83d\udd17 External References","text":""},{"location":"learning-material/STRUCTURE/#codex-codebase","title":"Codex Codebase","text":"<ul> <li><code>codex-rs/core/src/codex.rs</code> - Main agent loop</li> <li><code>codex-rs/core/src/tools/</code> - Tool system</li> <li><code>codex-rs/core/src/safety.rs</code> - Safety checks</li> <li><code>codex-rs/docs/</code> - Official documentation</li> </ul>"},{"location":"learning-material/STRUCTURE/#related-materials","title":"Related Materials","text":"<ul> <li>Agentic Design Patterns Textbook (main reference)</li> <li>OpenAI Documentation</li> <li>Model Context Protocol Specification</li> <li>LangChain/LangGraph examples</li> </ul>"},{"location":"learning-material/STRUCTURE/#whats-next","title":"\u2728 What's Next?","text":"<p>After exploring these materials:</p> <ol> <li>Read Codex Source - See production implementation</li> <li>Contribute - Improve these materials</li> <li>Build - Create your own agent</li> <li>Share - Help others learn</li> </ol> <p>Need help navigating? Start with INDEX.md</p> <p>Ready to code? See QUICKSTART.md</p> <p>Want exercises? Check EXERCISES.md</p> <p>Last Updated: 2025 Version: 1.0 Status: Complete</p>"},{"location":"learning-material/01-prompt-chaining/","title":"Pattern 1: Prompt Chaining","text":"<p>\"Breaking complex tasks into sequential, manageable steps\"</p>"},{"location":"learning-material/01-prompt-chaining/#pattern-overview","title":"\ud83d\udcd6 Pattern Overview","text":"<p>Prompt chaining is a foundational pattern where complex tasks are decomposed into a sequence of smaller sub-tasks. The output of each step becomes the input to the next, creating a logical workflow.</p>"},{"location":"learning-material/01-prompt-chaining/#key-concepts","title":"\ud83c\udfaf Key Concepts","text":"<ol> <li>Sequential Processing: Tasks executed one after another</li> <li>State Transfer: Output of step N becomes input to step N+1</li> <li>Modularity: Each step has a focused responsibility</li> <li>Composability: Steps can be reordered or replaced</li> </ol>"},{"location":"learning-material/01-prompt-chaining/#how-codex-implements-this","title":"\ud83d\udd0d How Codex Implements This","text":""},{"location":"learning-material/01-prompt-chaining/#location-in-codebase","title":"Location in Codebase","text":"<ul> <li>Primary: <code>codex-rs/core/src/codex.rs</code> (lines 1620-1703)</li> <li>Support: <code>codex-rs/core/src/conversation_history.rs</code></li> </ul>"},{"location":"learning-material/01-prompt-chaining/#implementation-details","title":"Implementation Details","text":"<p>Codex implements a sophisticated turn-based conversation loop:</p> <pre><code>loop {\n    // 1. Get pending input from UI\n    let pending_input = sess.get_pending_input().await;\n\n    // 2. Construct turn input with full history\n    let turn_input: Vec&lt;ResponseItem&gt; = if is_review_mode {\n        review_thread_history.clone()\n    } else {\n        sess.turn_input_with_history(pending_input).await\n    };\n\n    // 3. Run turn and get results\n    match run_turn(Arc::clone(&amp;sess), ...) {\n        Ok(TurnOutput::Continue(items)) =&gt; {\n            // Record results as history\n            sess.record_conversation_items(&amp;items).await;\n\n            // Items become input for next turn\n            review_thread_history.extend(items);\n        }\n        Ok(TurnOutput::Complete(_)) =&gt; break,\n        Err(e) =&gt; handle_error(e),\n    }\n}\n</code></pre>"},{"location":"learning-material/01-prompt-chaining/#key-features","title":"Key Features","text":"<ol> <li>History Management: Each turn maintains context from previous turns</li> <li>State Accumulation: Conversation state grows with each turn</li> <li>Forking Support: Can resume from earlier points in the chain</li> <li>Review Mode: Isolated chains for specific workflows</li> </ol>"},{"location":"learning-material/01-prompt-chaining/#why-this-matters","title":"\ud83d\udca1 Why This Matters","text":""},{"location":"learning-material/01-prompt-chaining/#without-prompt-chaining","title":"Without Prompt Chaining","text":"<pre><code>User: \"Analyze this codebase, find bugs, and fix them\"\n\u274c Single massive prompt \u2192 cognitive overload \u2192 unreliable results\n</code></pre>"},{"location":"learning-material/01-prompt-chaining/#with-prompt-chaining","title":"With Prompt Chaining","text":"<pre><code>Step 1: \"Read and understand the codebase structure\"\nStep 2: \"Analyze code for potential bugs\" (uses output from step 1)\nStep 3: \"Generate fixes for identified bugs\" (uses output from step 2)\nStep 4: \"Apply patches and verify\" (uses output from step 3)\n\u2705 Focused steps \u2192 reliable execution \u2192 better results\n</code></pre>"},{"location":"learning-material/01-prompt-chaining/#architecture-diagram","title":"\ud83d\udcca Architecture Diagram","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                   User Input                         \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                     \u2502\n                     \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  Turn 1: Process initial request                    \u2502\n\u2502  \u2022 Read context                                      \u2502\n\u2502  \u2022 Generate plan                                     \u2502\n\u2502  Output: [Plan with 3 steps]                        \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                     \u2502 (Output becomes input)\n                     \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  Turn 2: Execute step 1 of plan                     \u2502\n\u2502  Input: [Previous plan + history]                   \u2502\n\u2502  \u2022 Execute tools                                     \u2502\n\u2502  \u2022 Collect results                                   \u2502\n\u2502  Output: [Step 1 results]                           \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                     \u2502 (Output becomes input)\n                     \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  Turn 3: Execute step 2 of plan                     \u2502\n\u2502  Input: [All previous context]                      \u2502\n\u2502  \u2022 Use results from step 1                          \u2502\n\u2502  \u2022 Execute next tools                               \u2502\n\u2502  Output: [Step 2 results]                           \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                     \u2502\n                     \u25bc\n                    ...\n</code></pre>"},{"location":"learning-material/01-prompt-chaining/#python-examples","title":"\ud83d\udc0d Python Examples","text":"<p>See the example files: - <code>pattern_simple.py</code>: Basic sequential chain - <code>pattern_advanced.py</code>: Production-ready with error handling - <code>codex_inspired.py</code>: Mimics Codex's turn-based architecture</p>"},{"location":"learning-material/01-prompt-chaining/#key-takeaways","title":"\ud83d\udd11 Key Takeaways","text":"<ol> <li>\u2705 Reliability: Smaller steps = fewer errors</li> <li>\u2705 Debuggability: Easy to identify which step failed</li> <li>\u2705 Flexibility: Can modify individual steps without rewriting everything</li> <li>\u2705 Context Building: Each step enriches understanding</li> <li>\u2705 Tool Integration: Natural place to insert external tool calls</li> </ol>"},{"location":"learning-material/01-prompt-chaining/#when-to-use","title":"\ud83d\ude80 When to Use","text":"<ul> <li>\u2705 Multi-step workflows (research \u2192 analyze \u2192 summarize \u2192 report)</li> <li>\u2705 Complex reasoning tasks requiring intermediate steps</li> <li>\u2705 Tasks involving external tool calls between reasoning steps</li> <li>\u2705 Scenarios where partial results are useful</li> <li>\u274c Simple, single-step queries (overhead not justified)</li> </ul>"},{"location":"learning-material/01-prompt-chaining/#further-reading","title":"\ud83d\udcda Further Reading","text":"<ul> <li>Codex Source: <code>codex-rs/core/src/codex.rs:1620-1703</code></li> <li>Conversation History: <code>codex-rs/core/src/conversation_history.rs</code></li> <li>Textbook: Chapter 1 - Prompt Chaining</li> <li>LangChain LCEL: https://python.langchain.com/docs/expression_language/</li> </ul>"},{"location":"learning-material/01-prompt-chaining/#related-patterns","title":"\ud83d\udd17 Related Patterns","text":"<ul> <li>Pattern 2: Routing - Decides which chain to execute</li> <li>Pattern 8: Memory Management - Stores chain state</li> <li>Pattern 12: Exception Handling - Handles chain failures</li> </ul> <p>Next: Pattern 2: Routing \u2192</p>"},{"location":"learning-material/02-routing/","title":"Pattern 2: Routing","text":"<p>\"Dynamically directing workflow based on intent, context, or conditions\"</p>"},{"location":"learning-material/02-routing/#pattern-overview","title":"\ud83d\udcd6 Pattern Overview","text":"<p>Routing introduces conditional logic into an agent's workflow, enabling dynamic decision-making about which action, tool, or sub-process to execute based on input classification, state analysis, or other criteria.</p>"},{"location":"learning-material/02-routing/#key-concepts","title":"\ud83c\udfaf Key Concepts","text":"<ol> <li>Intent Classification: Determine what the user wants to do</li> <li>Dynamic Dispatch: Route to appropriate handler</li> <li>Conditional Logic: Decision trees based on multiple factors</li> <li>Handler Registry: Map intentions to implementations</li> </ol>"},{"location":"learning-material/02-routing/#how-codex-implements-this","title":"\ud83d\udd0d How Codex Implements This","text":""},{"location":"learning-material/02-routing/#location-in-codebase","title":"Location in Codebase","text":"<ul> <li>Primary: <code>codex-rs/core/src/tools/router.rs</code> (lines 59-102)</li> <li>Support: <code>codex-rs/core/src/tools/registry.rs</code></li> <li>MCP Routing: <code>codex-rs/mcp-server/src/message_processor.rs</code></li> </ul>"},{"location":"learning-material/02-routing/#implementation-details","title":"Implementation Details","text":"<p>Codex implements a sophisticated tool router that classifies and dispatches different types of tool calls:</p> <pre><code>// From codex-rs/core/src/tools/router.rs\nmatch item {\n    ResponseItem::FunctionCall { name, arguments, call_id, .. } =&gt; {\n        // Check if this is an MCP tool (format: \"server__tool\")\n        if let Some((server, tool)) = session.parse_mcp_tool_name(&amp;name) {\n            Ok(Some(ToolCall {\n                tool_name: name,\n                call_id,\n                payload: ToolPayload::Mcp {\n                    server,\n                    tool,\n                    raw_arguments: arguments,\n                },\n            }))\n        } else {\n            // Route to unified_exec or standard function\n            let payload = if name == \"unified_exec\" {\n                ToolPayload::UnifiedExec { arguments }\n            } else {\n                ToolPayload::Function { arguments }\n            };\n            Ok(Some(ToolCall {\n                tool_name: name,\n                call_id,\n                payload,\n            }))\n        }\n    }\n    ResponseItem::CustomToolCall { .. } =&gt; // Route to custom handler\n    ResponseItem::LocalShellCall { .. } =&gt; // Route to shell executor\n    // ... more cases\n}\n</code></pre>"},{"location":"learning-material/02-routing/#routing-strategies-in-codex","title":"Routing Strategies in Codex","text":"<ol> <li>Name-Based Routing: Tool name determines handler</li> <li>Type-Based Routing: Payload type determines execution path</li> <li>Pattern Matching: Complex conditions via Rust enums</li> <li>Registry Lookup: Dynamic handler registration</li> </ol>"},{"location":"learning-material/02-routing/#real-world-example-from-codex","title":"\ud83d\udca1 Real-World Example from Codex","text":"<p>When the LLM wants to execute a command, the router:</p> <ol> <li>Receives tool call from model</li> <li>Classifies the tool type (function, MCP, shell, custom)</li> <li>Routes to appropriate handler:</li> <li><code>unified_exec</code> \u2192 Sandbox executor</li> <li><code>server__tool</code> \u2192 MCP client</li> <li>Standard function \u2192 Function handler</li> <li>Executes via the specialized handler</li> <li>Returns results back to model</li> </ol>"},{"location":"learning-material/02-routing/#architecture-diagram","title":"\ud83d\udcca Architecture Diagram","text":"<pre><code>                    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n                    \u2502   LLM Output    \u2502\n                    \u2502  (Tool Calls)   \u2502\n                    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                             \u2502\n                             \u25bc\n                    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n                    \u2502   Tool Router   \u2502\n                    \u2502  (Classifier)   \u2502\n                    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                             \u2502\n              \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n              \u2502              \u2502              \u2502\n              \u25bc              \u25bc              \u25bc\n    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n    \u2502   Function  \u2502 \u2502 Unified Exec\u2502 \u2502  MCP Tool   \u2502\n    \u2502   Handler   \u2502 \u2502   Handler   \u2502 \u2502   Handler   \u2502\n    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n           \u2502               \u2502               \u2502\n           \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                           \u2502\n                           \u25bc\n                    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n                    \u2502   Execute &amp;     \u2502\n                    \u2502  Return Result  \u2502\n                    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"learning-material/02-routing/#python-examples","title":"\ud83d\udc0d Python Examples","text":"<p>See the example files: - <code>pattern_simple.py</code>: Basic intent classification and routing - <code>pattern_advanced.py</code>: Tool registry with dynamic dispatch - <code>codex_inspired.py</code>: Multi-tier routing system like Codex</p>"},{"location":"learning-material/02-routing/#key-takeaways","title":"\ud83d\udd11 Key Takeaways","text":"<ol> <li>\u2705 Flexibility: Handle diverse requests without monolithic logic</li> <li>\u2705 Extensibility: Add new routes without modifying core logic</li> <li>\u2705 Clarity: Explicit routing makes behavior predictable</li> <li>\u2705 Performance: Direct dispatch instead of sequential checks</li> <li>\u2705 Maintainability: Each handler focuses on one responsibility</li> </ol>"},{"location":"learning-material/02-routing/#when-to-use","title":"\ud83d\ude80 When to Use","text":"<ul> <li>\u2705 Multiple possible actions based on user intent</li> <li>\u2705 Different tools/agents for different task types</li> <li>\u2705 Complex conditional logic governing execution paths</li> <li>\u2705 Need to add new capabilities without code changes</li> <li>\u274c Single, deterministic workflow (no branching needed)</li> </ul>"},{"location":"learning-material/02-routing/#further-reading","title":"\ud83d\udcda Further Reading","text":"<ul> <li>Codex Source: <code>codex-rs/core/src/tools/router.rs</code></li> <li>Tool Registry: <code>codex-rs/core/src/tools/registry.rs</code></li> <li>Textbook: Chapter 2 - Routing</li> <li>LangGraph Routing: https://langchain-ai.github.io/langgraph/</li> </ul>"},{"location":"learning-material/02-routing/#related-patterns","title":"\ud83d\udd17 Related Patterns","text":"<ul> <li>Pattern 1: Prompt Chaining - Routing decides which chain</li> <li>Pattern 5: Tool Use - Routes to appropriate tools</li> <li>Pattern 7: Multi-Agent - Routes between agents</li> </ul> <p>Next: Pattern 3: Parallelization \u2192</p>"},{"location":"learning-material/03-parallelization/","title":"Pattern 3: Parallelization","text":"<p>\"Executing independent operations concurrently for better performance\"</p>"},{"location":"learning-material/03-parallelization/#pattern-overview","title":"\ud83d\udcd6 Pattern Overview","text":"<p>Parallelization enables agents to execute multiple independent operations simultaneously rather than sequentially. This significantly improves performance for tasks that don't have dependencies.</p>"},{"location":"learning-material/03-parallelization/#key-concepts","title":"\ud83c\udfaf Key Concepts","text":"<ol> <li>Concurrent Execution: Run independent tasks simultaneously</li> <li>Dependency Management: Identify which tasks can run in parallel</li> <li>Result Aggregation: Collect and combine parallel results</li> <li>Error Isolation: Handle failures in parallel tasks independently</li> </ol>"},{"location":"learning-material/03-parallelization/#how-codex-implements-this","title":"\ud83d\udd0d How Codex Implements This","text":""},{"location":"learning-material/03-parallelization/#location-in-codebase","title":"Location in Codebase","text":"<ul> <li>Primary: <code>codex-rs/core/src/tools/parallel.rs</code> (lines 47-67)</li> <li>Support: <code>codex-rs/core/src/codex.rs</code> (parallel tool calls)</li> </ul>"},{"location":"learning-material/03-parallelization/#implementation-details","title":"Implementation Details","text":"<p>Codex's <code>ToolCallRuntime</code> intelligently decides whether to execute tools in parallel or serially:</p> <pre><code>// From codex-rs/core/src/tools/parallel.rs\npub(crate) async fn handle_tool_call(\n    &amp;mut self,\n    call: ToolCall,\n    output_index: usize,\n    output: &amp;mut [ProcessedResponseItem],\n) -&gt; Result&lt;(), CodexErr&gt; {\n    let supports_parallel = self.router.tool_supports_parallel(&amp;call.tool_name);\n\n    if supports_parallel {\n        // Launch task in background\n        self.spawn_parallel(call, output_index);\n    } else {\n        // Wait for pending parallel tasks to complete first\n        self.resolve_pending(output).await?;\n\n        // Execute serially\n        let response = self.dispatch_serial(call).await?;\n        output[output_index].response = Some(response);\n    }\n\n    Ok(())\n}\n</code></pre>"},{"location":"learning-material/03-parallelization/#key-features","title":"Key Features","text":"<ol> <li>Per-Tool Configuration: Each tool declares if it supports parallelization</li> <li>Async/Await: Uses Tokio for efficient concurrent execution</li> <li>Automatic Ordering: Serial tools wait for parallel tasks to complete</li> <li>Error Propagation: Parallel task failures propagate correctly</li> </ol>"},{"location":"learning-material/03-parallelization/#real-world-example-from-codex","title":"\ud83d\udca1 Real-World Example from Codex","text":"<p>When the LLM wants to read 3 files:</p> <pre><code>// Sequential (slow):\nread(\"file1.py\")  // 10ms\nread(\"file2.py\")  // 10ms  \nread(\"file3.py\")  // 10ms\n// Total: 30ms\n\n// Parallel (fast):\nspawn(read(\"file1.py\"))  // }\nspawn(read(\"file2.py\"))  // } All run concurrently\nspawn(read(\"file3.py\"))  // }\nawait_all()\n// Total: ~10ms\n</code></pre>"},{"location":"learning-material/03-parallelization/#architecture-diagram","title":"\ud83d\udcca Architecture Diagram","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502         LLM Returns 3 Tool Calls             \u2502\n\u2502   1. read_file(\"a.py\")                       \u2502\n\u2502   2. read_file(\"b.py\")                       \u2502\n\u2502   3. shell(\"ls\")  \u2190 Must run serially        \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                    \u2502\n                    \u25bc\n         \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n         \u2502   Tool Router        \u2502\n         \u2502  Check each tool     \u2502\n         \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                    \u2502\n    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n    \u2502                                 \u2502\n    \u25bc                                 \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510               \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Tools 1 &amp; 2 \u2502               \u2502   Tool 3     \u2502\n\u2502 (parallel)  \u2502               \u2502  (serial)    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2518               \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n       \u2502                             \u2502\n  Spawn async                    Must wait\n       \u2502                             \u2502\n       \u25bc                             \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510   \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2510   \u2502   \u2502             \u2502\n\u2502  \u2502Task 1\u2502    \u2502Task 2\u2502   \u2502   \u2502   Task 3    \u2502\n\u2502  \u2502 a.py \u2502    \u2502 b.py \u2502   \u2502   \u2502    \"ls\"     \u2502\n\u2502  \u2514\u2500\u2500\u2500\u252c\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u252c\u2500\u2500\u2518   \u2502   \u2502             \u2502\n\u2502      \u2502           \u2502       \u2502   \u2502             \u2502\n\u2502      \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2518       \u2502   \u2502             \u2502\n\u2502              \u2502           \u2502   \u2502             \u2502\n\u2502       Wait for both      \u2502   \u2502  Execute    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n               \u2502                      \u2502\n               \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                          \u2502\n                          \u25bc\n                 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n                 \u2502  Collect Results \u2502\n                 \u2502  Feed to LLM     \u2502\n                 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"learning-material/03-parallelization/#python-examples","title":"\ud83d\udc0d Python Examples","text":"<p>See the example files: - <code>pattern_simple.py</code>: Basic parallel execution with asyncio - <code>pattern_advanced.py</code>: Tool-aware parallelization - <code>benchmarks.py</code>: Performance comparison</p>"},{"location":"learning-material/03-parallelization/#key-takeaways","title":"\ud83d\udd11 Key Takeaways","text":"<ol> <li>\u2705 Performance: 3x-10x speedup for I/O-bound operations</li> <li>\u2705 Scalability: Handles many concurrent operations efficiently</li> <li>\u2705 Smart Execution: Only parallelizes when safe</li> <li>\u2705 Error Handling: Isolated failures don't block other tasks</li> <li>\u26a0\ufe0f Complexity: More complex than sequential execution</li> </ol>"},{"location":"learning-material/03-parallelization/#when-to-use","title":"\ud83d\ude80 When to Use","text":"<ul> <li>\u2705 Multiple independent file reads</li> <li>\u2705 Batch API calls to external services</li> <li>\u2705 Parallel data processing tasks</li> <li>\u2705 Multiple search queries</li> <li>\u274c Tasks with dependencies (must be sequential)</li> <li>\u274c Shared mutable state (needs synchronization)</li> </ul>"},{"location":"learning-material/03-parallelization/#common-pitfalls","title":"\u26a0\ufe0f Common Pitfalls","text":""},{"location":"learning-material/03-parallelization/#1-race-conditions","title":"1. Race Conditions","text":"<pre><code>\u274c BAD: Parallel writes to same file\n\u2705 GOOD: Parallel reads, or parallel writes to different files\n</code></pre>"},{"location":"learning-material/03-parallelization/#2-resource-exhaustion","title":"2. Resource Exhaustion","text":"<pre><code>\u274c BAD: Spawn 1000 tasks simultaneously\n\u2705 GOOD: Use semaphore to limit concurrency\n</code></pre>"},{"location":"learning-material/03-parallelization/#3-deadlocks","title":"3. Deadlocks","text":"<pre><code>\u274c BAD: Task A waits for B, B waits for A\n\u2705 GOOD: Clear dependency ordering\n</code></pre>"},{"location":"learning-material/03-parallelization/#further-reading","title":"\ud83d\udcda Further Reading","text":"<ul> <li>Codex Source: <code>codex-rs/core/src/tools/parallel.rs</code></li> <li>Async Rust: https://rust-lang.github.io/async-book/</li> <li>Tokio Guide: https://tokio.rs/tokio/tutorial</li> <li>Python asyncio: https://docs.python.org/3/library/asyncio.html</li> </ul>"},{"location":"learning-material/03-parallelization/#related-patterns","title":"\ud83d\udd17 Related Patterns","text":"<ul> <li>Pattern 1: Prompt Chaining - Parallel can be one step in chain</li> <li>Pattern 2: Routing - Router decides what runs parallel</li> <li>Pattern 5: Tool Use - Tools declare parallel capability</li> </ul> <p>Next: Pattern 8: Memory Management \u2192</p>"},{"location":"learning-material/05-tool-use/","title":"Pattern 5: Tool Use","text":"<p>\"Extending agent capabilities through external system integration\"</p>"},{"location":"learning-material/05-tool-use/#pattern-overview","title":"\ud83d\udcd6 Pattern Overview","text":"<p>Tool Use enables agents to interact with external systems, APIs, databases, and services. Instead of relying solely on pretrained knowledge, agents can retrieve real-time data, execute commands, and manipulate external resources.</p>"},{"location":"learning-material/05-tool-use/#key-concepts","title":"\ud83c\udfaf Key Concepts","text":"<ol> <li>Tool Definition: Specify what the tool does and its parameters</li> <li>Tool Invocation: LLM decides when and how to use tools</li> <li>Sandboxing: Execute tools safely with appropriate restrictions</li> <li>Result Integration: Feed tool output back to the LLM</li> </ol>"},{"location":"learning-material/05-tool-use/#how-codex-implements-this","title":"\ud83d\udd0d How Codex Implements This","text":""},{"location":"learning-material/05-tool-use/#location-in-codebase","title":"Location in Codebase","text":"<ul> <li>Primary: <code>codex-rs/core/src/exec.rs</code></li> <li>Tool Registry: <code>codex-rs/core/src/tools/registry.rs</code></li> <li>MCP Tools: <code>codex-rs/core/src/mcp_tool_call.rs</code></li> <li>Safety: <code>codex-rs/core/src/safety.rs</code></li> </ul>"},{"location":"learning-material/05-tool-use/#implementation-details","title":"Implementation Details","text":"<p>Codex has a comprehensive tool system with multiple execution modes:</p> <pre><code>// From codex-rs/core/src/exec.rs\npub async fn process_exec_tool_call(\n    params: ExecParams,\n    sandbox_type: SandboxType,\n    sandbox_policy: &amp;SandboxPolicy,\n    sandbox_cwd: &amp;Path,\n    codex_linux_sandbox_exe: &amp;Option&lt;PathBuf&gt;,\n    stdout_stream: Option&lt;StdoutStream&gt;,\n) -&gt; Result&lt;ExecToolCallOutput&gt; {\n    match sandbox_type {\n        SandboxType::None =&gt; {\n            // Direct execution (dangerous!)\n            exec(params, sandbox_policy, stdout_stream).await\n        }\n        SandboxType::MacosSeatbelt =&gt; {\n            // Execute under Apple Seatbelt sandbox\n            let child = spawn_command_under_seatbelt(...).await?;\n            consume_truncated_output(child, timeout, stdout_stream).await\n        }\n        SandboxType::LinuxSeccomp =&gt; {\n            // Execute under Landlock + seccomp\n            let child = spawn_command_under_landlock(...).await?;\n            consume_truncated_output(child, timeout, stdout_stream).await\n        }\n    }\n}\n</code></pre>"},{"location":"learning-material/05-tool-use/#available-tools-in-codex","title":"Available Tools in Codex","text":"<ol> <li>File Operations</li> <li>Read files</li> <li>Write/patch files</li> <li> <p>List directories</p> </li> <li> <p>Shell Commands</p> </li> <li>Execute in sandbox</li> <li>Network-disabled by default</li> <li> <p>Output truncation for token limits</p> </li> <li> <p>Git Operations</p> </li> <li>Status, diff, commit</li> <li> <p>Branch management</p> </li> <li> <p>MCP Tools</p> </li> <li>Dynamic tool discovery</li> <li> <p>External server integration</p> </li> <li> <p>Web Search (when enabled)</p> </li> <li>Real-time information retrieval</li> </ol>"},{"location":"learning-material/05-tool-use/#safety-mechanisms","title":"\ud83d\udca1 Safety Mechanisms","text":"<p>Codex implements multi-layer security for tool execution:</p>"},{"location":"learning-material/05-tool-use/#1-sandboxing","title":"1. Sandboxing","text":"<ul> <li>macOS: Apple Seatbelt (<code>sandbox-exec</code>)</li> <li>Linux: Landlock + seccomp</li> <li>Network: Disabled by default</li> <li>File Access: Limited to workspace</li> </ul>"},{"location":"learning-material/05-tool-use/#2-approval-workflow","title":"2. Approval Workflow","text":"<pre><code>// From codex-rs/core/src/safety.rs\npub fn assess_command_safety(\n    command: &amp;[String],\n    approval_policy: AskForApproval,\n    sandbox_policy: &amp;SandboxPolicy,\n    approved: &amp;HashSet&lt;Vec&lt;String&gt;&gt;,\n) -&gt; SafetyCheck {\n    if command_might_be_dangerous(command) {\n        return SafetyCheck::AskUser;  // Request approval\n    }\n\n    if is_known_safe_command(command) {\n        return SafetyCheck::AutoApprove { ... };\n    }\n\n    // Apply policy\n    assess_safety_for_untrusted_command(...)\n}\n</code></pre>"},{"location":"learning-material/05-tool-use/#3-command-whitelisting","title":"3. Command Whitelisting","text":"<ul> <li>Known-safe commands: <code>ls</code>, <code>cat</code>, <code>grep</code>, etc.</li> <li>Dangerous commands: <code>rm -rf</code>, <code>dd</code>, <code>curl</code> (network)</li> <li>User approval required for dangerous operations</li> </ul>"},{"location":"learning-material/05-tool-use/#architecture-diagram","title":"\ud83d\udcca Architecture Diagram","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502          LLM Decision Engine                \u2502\n\u2502  \"I need to read file X to answer this\"    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                   \u2502\n                   \u25bc\n        \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n        \u2502   Tool Router        \u2502\n        \u2502  (Pattern #2)        \u2502\n        \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                   \u2502\n                   \u25bc\n        \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n        \u2502  Safety Assessment   \u2502\n        \u2502  \u2022 Is it safe?       \u2502\n        \u2502  \u2022 Needs approval?   \u2502\n        \u2502  \u2022 Sandbox required? \u2502\n        \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                   \u2502\n          \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n          \u2502                 \u2502\n          \u25bc                 \u25bc\n    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510      \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n    \u2502 Approve  \u2502      \u2502  Reject  \u2502\n    \u2514\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2518      \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n          \u2502\n          \u25bc\n    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n    \u2502  Execute in Sandbox  \u2502\n    \u2502  \u2022 Network: OFF      \u2502\n    \u2502  \u2022 File access: CWD  \u2502\n    \u2502  \u2022 Timeout: 30s      \u2502\n    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n               \u2502\n               \u25bc\n    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n    \u2502  Collect Output      \u2502\n    \u2502  \u2022 stdout/stderr     \u2502\n    \u2502  \u2022 exit code         \u2502\n    \u2502  \u2022 Truncate if long  \u2502\n    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n               \u2502\n               \u25bc\n    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n    \u2502  Return to LLM       \u2502\n    \u2502  \"File contains...\"  \u2502\n    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"learning-material/05-tool-use/#python-examples","title":"\ud83d\udc0d Python Examples","text":"<p>See the example files: - <code>pattern_simple.py</code>: Basic tool use with function calling - <code>pattern_advanced.py</code>: Tool registry with sandboxing - <code>tool_safety.py</code>: Safety checks and validation</p>"},{"location":"learning-material/05-tool-use/#key-takeaways","title":"\ud83d\udd11 Key Takeaways","text":"<ol> <li>\u2705 Real-time Data: Access current information beyond training data</li> <li>\u2705 Action Capability: Agents can modify external state</li> <li>\u2705 Extensibility: Add new tools without retraining</li> <li>\u2705 Safety Critical: Must sandbox and validate all executions</li> <li>\u2705 User Control: Approval workflows for dangerous operations</li> </ol>"},{"location":"learning-material/05-tool-use/#when-to-use","title":"\ud83d\ude80 When to Use","text":"<ul> <li>\u2705 Need real-time or dynamic data</li> <li>\u2705 Agent must interact with external systems</li> <li>\u2705 Task requires actions beyond text generation</li> <li>\u2705 Integration with existing APIs/services</li> <li>\u274c All information available in training data</li> <li>\u274c Read-only Q&amp;A tasks</li> </ul>"},{"location":"learning-material/05-tool-use/#safety-considerations","title":"\u26a0\ufe0f Safety Considerations","text":""},{"location":"learning-material/05-tool-use/#dos","title":"Do's","text":"<ul> <li>\u2705 Always sandbox tool execution</li> <li>\u2705 Validate all tool inputs</li> <li>\u2705 Implement approval workflows for dangerous operations</li> <li>\u2705 Truncate/limit tool output</li> <li>\u2705 Set execution timeouts</li> <li>\u2705 Log all tool invocations</li> </ul>"},{"location":"learning-material/05-tool-use/#donts","title":"Don'ts","text":"<ul> <li>\u274c Never trust tool input blindly</li> <li>\u274c Don't give unrestricted file system access</li> <li>\u274c Avoid network access unless explicitly needed</li> <li>\u274c Don't execute without output limits</li> <li>\u274c Never skip safety checks for convenience</li> </ul>"},{"location":"learning-material/05-tool-use/#further-reading","title":"\ud83d\udcda Further Reading","text":"<ul> <li>Codex Exec: <code>codex-rs/core/src/exec.rs</code></li> <li>Tool Registry: <code>codex-rs/core/src/tools/registry.rs</code></li> <li>Safety Module: <code>codex-rs/core/src/safety.rs</code></li> <li>Textbook: Chapter 5 - Tool Use</li> <li>OpenAI Function Calling: https://platform.openai.com/docs/guides/function-calling</li> </ul>"},{"location":"learning-material/05-tool-use/#related-patterns","title":"\ud83d\udd17 Related Patterns","text":"<ul> <li>Pattern 2: Routing - Routes to appropriate tools</li> <li>Pattern 10: MCP - Protocol for tool integration</li> <li>Pattern 13: Human-in-the-Loop - Approvals for tools</li> <li>Pattern 18: Guardrails - Safety for tool execution</li> </ul> <p>Next: Pattern 8: Memory Management \u2192</p>"},{"location":"learning-material/06-planning/","title":"Pattern 06: Planning","text":"<p>\"Keep a short, verifiable plan and update it as you execute\"</p> <p>Codex surfaces a lightweight plan tool (<code>update_plan</code>) and renders progress. Plans are concise, ordered steps; the agent updates status as work proceeds.</p> <p>Codex references: - <code>codex-rs/core/prompt.md</code> (Planning guidance) - <code>codex-rs/core/src/codex.rs</code> (plan/tool events)</p>"},{"location":"learning-material/06-planning/#example-python","title":"Example (Python)","text":"<pre><code>from dataclasses import dataclass, field\nfrom enum import Enum\n\nclass StepStatus(Enum):\n    PENDING = \"pending\"\n    IN_PROGRESS = \"in_progress\"\n    DONE = \"done\"\n\n@dataclass\nclass Plan:\n    steps: list[tuple[str, StepStatus]] = field(default_factory=list)\n\n    def add(self, text: str):\n        self.steps.append((text, StepStatus.PENDING))\n\n    def start(self, idx: int):\n        text, _ = self.steps[idx]\n        self.steps[idx] = (text, StepStatus.IN_PROGRESS)\n\n    def done(self, idx: int):\n        text, _ = self.steps[idx]\n        self.steps[idx] = (text, StepStatus.DONE)\n\n# Demo\nplan = Plan()\nplan.add(\"Read requirements\")\nplan.add(\"Create design\")\nplan.start(0)\nplan.done(0)\nplan.start(1)\nprint(plan)\n</code></pre>"},{"location":"learning-material/07-reflection/","title":"Pattern 07: Reflection / Review Mode","text":"<p>\"Branch to an isolated thread to critique or review without polluting the main conversation\"</p> <p>Codex spawns review threads: isolated in-memory histories seeded with environment context; UI deltas are suppressed; final review emits a summary.</p> <p>Codex references: - <code>codex-rs/core/src/codex.rs</code> (spawn_review_thread, is_review_mode)</p>"},{"location":"learning-material/07-reflection/#example-python","title":"Example (Python)","text":"<pre><code>class Conversation:\n    def __init__(self):\n        self.main: list[str] = []\n        self.review: list[str] = []\n        self.in_review = False\n\n    def add(self, msg: str):\n        (self.review if self.in_review else self.main).append(msg)\n\n    def start_review(self):\n        self.in_review = True\n        self.review = [\"[env] cwd=/project\"]\n\n    def end_review(self) -&gt; str:\n        self.in_review = False\n        return \"\\n\".join(self.review)\n</code></pre>"},{"location":"learning-material/08-memory-management/","title":"Pattern 08: Memory Management","text":"<p>\"Maintain a clean, append-only conversation history with turn-aware compaction\"</p> <p>Codex stores <code>ResponseItem</code>s and compacts at logical boundaries while preserving the last assistant/user messages for context.</p> <p>Codex references: - <code>codex-rs/core/src/conversation_history.rs</code> - <code>codex-rs/core/src/codex/compact.rs</code></p>"},{"location":"learning-material/08-memory-management/#example-python","title":"Example (Python)","text":"<pre><code>class Memory:\n    def __init__(self, max_len=50):\n        self.items: list[dict] = []\n        self.max_len = max_len\n\n    def add(self, role: str, content: str):\n        self.items.append({\"role\": role, \"content\": content})\n        if len(self.items) &gt; self.max_len:\n            self.items = self.items[-self.max_len:]\n\n    def compact(self):\n        # Keep last user + last assistant; drop older filler\n        keep = []\n        last_user = next((i for i in reversed(self.items) if i[\"role\"]==\"user\"), None)\n        last_asst = next((i for i in reversed(self.items) if i[\"role\"]==\"assistant\"), None)\n        if last_user: keep.append(last_user)\n        if last_asst: keep.append(last_asst)\n        self.items = sorted(set(map(tuple, map(dict.items, keep))))\n</code></pre>"},{"location":"learning-material/10-mcp-integration/","title":"Pattern 10: MCP Integration","text":"<p>\"Discover and call external tools via the Model Context Protocol\"</p> <p>Codex launches MCP servers (stdio/http), lists tools, and forwards tool calls.</p> <p>Codex references: - <code>codex-rs/mcp-client/src/mcp_client.rs</code> - <code>codex-rs/core/src/tools/router.rs</code> (MCP routing)</p>"},{"location":"learning-material/10-mcp-integration/#example-python-stub","title":"Example (Python, stub)","text":"<pre><code>class MCPClient:\n    def __init__(self, server_cmd: list[str]):\n        self.server_cmd = server_cmd\n    def tools_list(self):\n        return [{\"name\":\"search\",\"desc\":\"web search\"}]\n    def tools_call(self, name: str, args: dict):\n        if name==\"search\":\n            return [\"result1\",\"result2\"]\n        raise ValueError(\"unknown tool\")\n</code></pre>"},{"location":"learning-material/12-exception-handling/","title":"Pattern 12: Exception Handling &amp; Recovery","text":"<p>\"Detect transient vs fatal errors; retry with backoff; inform the user\"</p> <p>Codex retries stream turns with provider-specific budgets and backoff, notifying the UI while waiting.</p> <p>Codex references: - <code>codex-rs/core/src/codex.rs</code> (try_run_turn retries, notify_stream_error)</p>"},{"location":"learning-material/12-exception-handling/#example-python","title":"Example (Python)","text":"<pre><code>import time\n\ndef backoff(attempt):\n    return min(2 ** attempt, 30)\n\ndef run_with_retry(fn, max_retries=3):\n    for i in range(max_retries):\n        try:\n            return fn()\n        except Exception as e:\n            if i == max_retries - 1:\n                raise\n            delay = backoff(i+1)\n            print(f\"stream error: {e}; retrying {i+1}/{max_retries} in {delay}s\u2026\")\n            time.sleep(delay)\n</code></pre>"},{"location":"learning-material/13-human-in-the-loop/","title":"Pattern 13: Human-in-the-Loop (HITL)","text":"<p>\"Pause for approval on risky actions; remember session approvals\"</p> <p>Codex emits approval requests, waits via oneshot channels, and records session-wide approvals. Decisions are also tagged in telemetry.</p> <p>Codex references: - <code>codex-rs/core/src/codex.rs</code> (request_command_approval, notify_approval) - <code>codex-rs/core/src/executor/sandbox.rs</code> (approval decision \u2192 sandbox)</p>"},{"location":"learning-material/13-human-in-the-loop/#example-python","title":"Example (Python)","text":"<pre><code>from enum import Enum\n\nclass Decision(Enum):\n    APPROVED = 1\n    APPROVED_FOR_SESSION = 2\n    DENIED = 3\n\nclass Approver:\n    def __init__(self):\n        self.session_cache = set()\n    def needs_approval(self, cmd: str) -&gt; bool:\n        return cmd.startswith(\"rm \") and cmd not in self.session_cache\n    def request(self, cmd: str) -&gt; Decision:\n        return Decision.DENIED\n    def record(self, cmd: str, decision: Decision):\n        if decision == Decision.APPROVED_FOR_SESSION:\n            self.session_cache.add(cmd)\n</code></pre>"},{"location":"learning-material/14-knowledge-retrieval/","title":"Pattern 14: Knowledge Retrieval (Search / RAG Hooks)","text":"<p>\"Route retrieval requests to external search and merge results into context\"</p> <p>Codex surfaces web search calls as explicit tool items and tracks begin/end via synthetic events.</p> <p>Codex references: - <code>codex-rs/core/src/client.rs</code> (detect <code>web_search_call</code>, emit <code>WebSearchCallBegin</code>) - <code>codex-rs/core/src/codex.rs</code> (handle begin/end events)</p>"},{"location":"learning-material/14-knowledge-retrieval/#example-python","title":"Example (Python)","text":"<pre><code>class Retriever:\n    def search(self, query: str) -&gt; list[str]:\n        return [f\"Result for {query}\"]\n\ndef answer_with_retrieval(q: str, retriever: Retriever) -&gt; str:\n    hits = retriever.search(q)\n    return f\"Q: {q}\\nSources: {hits}\"\n</code></pre>"},{"location":"learning-material/15-reasoning/","title":"Pattern 17: Reasoning Techniques","text":"<p>\"Surface summaries vs raw reasoning traces based on user settings\"</p> <p>Codex accumulates reasoning deltas but conditionally forwards raw content; summaries are streamed as deltas with optional section breaks.</p> <p>Codex references: - <code>codex-rs/core/src/chat_completions.rs</code> (AggregatedChatStream deltas for reasoning) - <code>codex-rs/core/src/codex.rs</code> (AgentReasoningDelta vs AgentReasoningRawContentDelta)</p>"},{"location":"learning-material/15-reasoning/#example-python","title":"Example (Python)","text":"<pre><code>class ReasoningSwitch:\n    def __init__(self, show_raw=False):\n        self.show_raw = show_raw\n    def emit(self, summary_delta: str=None, raw_delta: str=None):\n        if raw_delta and self.show_raw:\n            print(f\"RAW: {raw_delta}\")\n        if summary_delta:\n            print(f\"SUMMARY: {summary_delta}\")\n</code></pre>"},{"location":"learning-material/16-sandbox-escalation/","title":"Pattern 22: Sandbox Escalation with Automatic Retry","text":"<p>\"Multi-stage command execution with intelligent fallback strategies\"</p>"},{"location":"learning-material/16-sandbox-escalation/#pattern-overview","title":"\ud83d\udcd6 Pattern Overview","text":"<p>Sandbox Escalation is a sophisticated execution pattern that goes far beyond simple \"run command and handle errors.\" It implements a complete decision tree for safe command execution with automatic retry mechanisms.</p>"},{"location":"learning-material/16-sandbox-escalation/#key-concepts","title":"\ud83c\udfaf Key Concepts","text":"<ol> <li>Safety Assessment - Classify commands before execution</li> <li>Sandbox Selection - Choose appropriate isolation level</li> <li>Automatic Escalation - Retry without sandbox on failure</li> <li>Approval Workflows - Smart user consent management</li> <li>Session Caching - Remember user decisions</li> <li>Telemetry Tracking - Log all decisions and outcomes</li> </ol>"},{"location":"learning-material/16-sandbox-escalation/#how-codex-implements-this","title":"\ud83d\udd0d How Codex Implements This","text":""},{"location":"learning-material/16-sandbox-escalation/#location-in-codebase","title":"Location in Codebase","text":"<ul> <li>Primary: <code>codex-rs/core/src/executor/runner.rs</code> (lines 76-218)</li> <li>Support: <code>codex-rs/core/src/executor/sandbox.rs</code> (lines 87-160)</li> </ul>"},{"location":"learning-material/16-sandbox-escalation/#implementation-flow","title":"Implementation Flow","text":"<pre><code>// From codex-rs/core/src/executor/runner.rs:77-157\npub(crate) async fn run(&amp;self, request: ExecutionRequest) -&gt; Result&lt;ExecToolCallOutput&gt; {\n    // Step 1: Assess command safety\n    let sandbox_decision = select_sandbox(\n        &amp;request,\n        approval_policy,\n        self.approval_cache.snapshot(),\n        &amp;config,\n    ).await?;\n\n    // Step 2: Execute in chosen sandbox\n    let first_attempt = self.spawn(\n        request.params.clone(),\n        sandbox_decision.initial_sandbox,\n        &amp;config,\n    ).await;\n\n    // Step 3: Handle sandbox failures with escalation\n    match first_attempt {\n        Ok(output) =&gt; Ok(output),\n        Err(CodexErr::Sandbox(error)) =&gt; {\n            if sandbox_decision.escalate_on_failure {\n                self.retry_without_sandbox(&amp;request, error).await\n            } else {\n                Err(ExecError::rejection(message))\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"learning-material/16-sandbox-escalation/#key-features","title":"Key Features","text":"<ol> <li>Three-Tier Safety Classification:</li> <li>Auto-approve (safe commands)</li> <li>Ask user (potentially dangerous)</li> <li> <p>Reject (definitely dangerous)</p> </li> <li> <p>Sandbox Types:</p> </li> <li>None (no isolation)</li> <li>Restricted shell (limited environment)</li> <li> <p>Full container (Docker/etc.)</p> </li> <li> <p>Escalation Logic:</p> </li> <li>Run in sandbox first</li> <li>If sandbox denies \u2192 ask user</li> <li>If approved \u2192 retry without sandbox</li> <li> <p>Cache approval for session</p> </li> <li> <p>Approval Scoping:</p> </li> <li>Once (this command only)</li> <li>Session (remember for this session)</li> <li>Never (always deny)</li> </ol>"},{"location":"learning-material/16-sandbox-escalation/#real-world-example-from-codex","title":"\ud83d\udca1 Real-World Example from Codex","text":"<pre><code>User: \"Install numpy with pip\"\n\n1. Safety Assessment: \"pip install\" \u2192 potentially dangerous (network access)\n2. Sandbox Decision: Run in restricted sandbox first\n3. Execute: sandbox blocks network access \u2192 fails\n4. Escalation: Ask user \"Command failed; retry without sandbox?\"\n5. User Choice: \"Approve for session\"\n6. Retry: Run without sandbox \u2192 succeeds\n7. Cache: Remember approval for future pip commands\n8. Telemetry: Log decision chain for debugging\n</code></pre>"},{"location":"learning-material/16-sandbox-escalation/#architecture-diagram","title":"\ud83d\udcca Architecture Diagram","text":"<pre><code>Command Request\n    \u2193\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Safety Assessment\u2502\n\u2502 - Check dangerous\u2502\n\u2502 - Check approved \u2502\n\u2502 - Apply policy   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n          \u2502\n    \u250c\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2510\n    \u2502           \u2502\n    \u25bc           \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502Auto    \u2502  \u2502Ask User \u2502\n\u2502Approve \u2502  \u2502         \u2502\n\u2514\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2518\n    \u2502            \u2502\n    \u2502       \u250c\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2510\n    \u2502       \u2502         \u2502\n    \u2502       \u25bc         \u25bc\n    \u2502   \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n    \u2502   \u2502Approved \u2502 \u2502Denied  \u2502\n    \u2502   \u2514\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n    \u2502        \u2502\n    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n             \u2502                \u2502\n             \u25bc                \u25bc\n        \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n        \u2502Execute in    \u2502 \u2502Execute      \u2502\n        \u2502Sandbox       \u2502 \u2502Unsandboxed  \u2502\n        \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n               \u2502\n          \u250c\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2510\n          \u2502         \u2502\n          \u25bc         \u25bc\n     \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n     \u2502Success  \u2502 \u2502Sandbox Error \u2502\n     \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                        \u2502\n                   \u250c\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2510\n                   \u2502Ask User \u2502\n                   \u2502Escalate?\u2502\n                   \u2514\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2518\n                        \u2502\n                   \u250c\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2510\n                   \u2502         \u2502\n                   \u25bc         \u25bc\n              \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n              \u2502Retry    \u2502 \u2502Fail    \u2502\n              \u2502No       \u2502 \u2502        \u2502\n              \u2502Sandbox  \u2502 \u2502        \u2502\n              \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"learning-material/16-sandbox-escalation/#python-implementation","title":"\ud83d\udc0d Python Implementation","text":"<p>See the example file: - <code>pattern_advanced.py</code>: Complete 400-line implementation with all features</p> <p>Key classes: - <code>CommandExecutor</code>: Main orchestrator - <code>SandboxDecision</code>: Execution strategy - <code>SafetyCheck</code>: Risk assessment - <code>ApprovalCache</code>: Session-scoped consent</p>"},{"location":"learning-material/16-sandbox-escalation/#key-takeaways","title":"\ud83d\udd11 Key Takeaways","text":"<ol> <li>\u2705 Multi-Stage Execution: Don't just try once and fail</li> <li>\u2705 Safety First: Assess risk before execution</li> <li>\u2705 Smart Escalation: Automatic retry with user approval</li> <li>\u2705 Session Memory: Cache user decisions</li> <li>\u2705 Comprehensive Logging: Track all decision points</li> <li>\u26a0\ufe0f Complex State: Much more than simple try/catch</li> </ol>"},{"location":"learning-material/16-sandbox-escalation/#when-to-use","title":"\ud83d\ude80 When to Use","text":"<ul> <li>\u2705 Production agent systems</li> <li>\u2705 Commands that might need special permissions</li> <li>\u2705 Systems with security requirements</li> <li>\u2705 Multi-user environments</li> <li>\u274c Simple scripts or demos</li> <li>\u274c Fully trusted environments</li> </ul>"},{"location":"learning-material/16-sandbox-escalation/#common-pitfalls","title":"\u26a0\ufe0f Common Pitfalls","text":""},{"location":"learning-material/16-sandbox-escalation/#1-over-engineering-simple-cases","title":"1. Over-Engineering Simple Cases","text":"<pre><code>\u274c BAD: Use for \"echo hello\"\n\u2705 GOOD: Use for \"curl external-api.com\"\n</code></pre>"},{"location":"learning-material/16-sandbox-escalation/#2-ignoring-user-experience","title":"2. Ignoring User Experience","text":"<pre><code>\u274c BAD: Ask for approval on every command\n\u2705 GOOD: Smart caching with session scope\n</code></pre>"},{"location":"learning-material/16-sandbox-escalation/#3-poor-error-messages","title":"3. Poor Error Messages","text":"<pre><code>\u274c BAD: \"Command failed\"\n\u2705 GOOD: \"Network access blocked by sandbox; retry without isolation?\"\n</code></pre>"},{"location":"learning-material/16-sandbox-escalation/#further-reading","title":"\ud83d\udcda Further Reading","text":"<ul> <li>Codex Source: <code>codex-rs/core/src/executor/runner.rs</code></li> <li>Sandbox Implementation: <code>codex-rs/core/src/executor/sandbox.rs</code></li> <li>Safety Assessment: <code>codex-rs/core/src/safety.rs</code></li> <li>Seatbelt (macOS): Apple's sandboxing system</li> <li>Seccomp (Linux): Linux's system call filtering</li> </ul>"},{"location":"learning-material/16-sandbox-escalation/#related-patterns","title":"\ud83d\udd17 Related Patterns","text":"<ul> <li>Pattern 5: Tool Use - Basic function calling</li> <li>Pattern 12: Exception Handling - Error recovery strategies</li> <li>Pattern 13: Human-in-the-Loop - Approval workflows</li> <li>Pattern 18: Guardrails/Safety - Security constraints</li> </ul> <p>Next: Pattern 17: Turn Diff Tracking \u2192</p>"},{"location":"learning-material/17-turn-diff-tracking/","title":"Pattern 23: Turn Diff Tracking (Git-Style Unified Diffs)","text":"<p>\"Track file changes across an agent's turn and compute git-compatible unified diffs\"</p>"},{"location":"learning-material/17-turn-diff-tracking/#pattern-overview","title":"\ud83d\udcd6 Pattern Overview","text":"<p>Turn Diff Tracking is the most complex pattern in Codex - a sophisticated system for tracking file modifications across an agent's turn and computing git-style unified diffs. This isn't simple file watching; it's production-grade git integration.</p>"},{"location":"learning-material/17-turn-diff-tracking/#key-concepts","title":"\ud83c\udfaf Key Concepts","text":"<ol> <li>Baseline Snapshots - Capture file state on FIRST touch</li> <li>UUID Tracking - Stable internal IDs survive renames</li> <li>Incremental Diffs - Show cumulative changes across turn</li> <li>Git Integration - Real blob OIDs, proper diff format</li> <li>Rename Detection - Track files across move operations</li> <li>Performance Optimization - Cache git roots, efficient computation</li> </ol>"},{"location":"learning-material/17-turn-diff-tracking/#how-codex-implements-this","title":"\ud83d\udd0d How Codex Implements This","text":""},{"location":"learning-material/17-turn-diff-tracking/#location-in-codebase","title":"Location in Codebase","text":"<ul> <li>Primary: <code>codex-rs/core/src/turn_diff_tracker.rs</code> (897 lines!)</li> <li>The most complex single file in Codex</li> </ul>"},{"location":"learning-material/17-turn-diff-tracking/#the-challenge","title":"The Challenge","text":"<p>During an agent's turn, files might be: 1. Added (new file) 2. Modified (change content) 3. Renamed/moved (change path) 4. Deleted (remove file) 5. Multiple operations on same file</p> <p>Users want to see what changed overall in git-style unified diff format.</p>"},{"location":"learning-material/17-turn-diff-tracking/#implementation-strategy","title":"Implementation Strategy","text":"<pre><code>// From codex-rs/core/src/turn_diff_tracker.rs:33-128\npub struct TurnDiffTracker {\n    /// Map external path -&gt; internal filename (uuid).\n    external_to_temp_name: HashMap&lt;PathBuf, String&gt;,\n    /// Internal filename -&gt; baseline file info.\n    baseline_file_info: HashMap&lt;String, BaselineFileInfo&gt;,\n    /// Internal filename -&gt; current external path (tracks renames).\n    temp_name_to_current_path: HashMap&lt;String, PathBuf&gt;,\n    /// Cache of known git worktree roots.\n    git_root_cache: Vec&lt;PathBuf&gt;,\n}\n\nimpl TurnDiffTracker {\n    /// Front-run apply patch calls to track starting contents.\n    pub fn on_patch_begin(&amp;mut self, changes: &amp;HashMap&lt;PathBuf, FileChange&gt;) {\n        for (path, change) in changes.iter() {\n            // Create stable UUID for this file\n            if !self.external_to_temp_name.contains_key(path) {\n                let internal = Uuid::new_v4().to_string();\n\n                // Snapshot baseline if file exists, else use /dev/null\n                if path.exists() {\n                    let content = blob_bytes(path, mode).unwrap_or_default();\n                    let oid = self.git_blob_oid_for_path(path);\n                    // Store baseline...\n                }\n            }\n\n            // Handle renames\n            if let FileChange::Update { move_path: Some(dest), .. } = change {\n                // Update internal mappings for rename\n                self.temp_name_to_current_path.insert(uuid, dest.clone());\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"learning-material/17-turn-diff-tracking/#key-insights","title":"Key Insights","text":"<ol> <li>Baseline on First Touch: Capture file state before ANY modification</li> <li>UUID Stability: Files keep same internal ID across renames</li> <li>Git-Compatible: Compute real git blob SHA-1 hashes</li> <li>Incremental: Show cumulative diff from baseline to final state</li> </ol>"},{"location":"learning-material/17-turn-diff-tracking/#real-world-example-from-codex","title":"\ud83d\udca1 Real-World Example from Codex","text":"<pre><code>Turn begins:\n  hello.txt: \"hello world\"\n\nOperations:\n1. add(\"new.txt\") \u2192 baseline: /dev/null\n2. update(\"hello.txt\") \u2192 baseline: \"hello world\" \n3. rename(\"hello.txt\" \u2192 \"greeting.txt\")\n4. update(\"greeting.txt\") \u2192 modify content\n\nFinal diff:\n```diff\ndiff --git a/new.txt b/new.txt\nnew file mode 100644\nindex 0000000..abc1234\n--- /dev/null\n+++ b/new.txt\n@@ -0,0 +1 @@\n+new content\n\ndiff --git a/hello.txt b/greeting.txt\nindex def5678..abc9012\n--- a/hello.txt\n+++ b/greeting.txt\n@@ -1 +1,2 @@\n hello world\n+welcome!\n</code></pre>"},{"location":"learning-material/17-turn-diff-tracking/#architecture-diagram","title":"\ud83d\udcca Architecture Diagram","text":"<pre><code>File Operations During Turn\n    \u2193\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502     on_patch_begin()        \u2502\n\u2502                             \u2502\n\u2502  For each file path:        \u2502\n\u2502  1. Generate UUID           \u2502\n\u2502  2. Snapshot baseline       \u2502\n\u2502  3. Track in mappings       \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n              \u2502\n              \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502    Internal Tracking        \u2502\n\u2502                             \u2502\n\u2502 external_path \u2192 uuid        \u2502\n\u2502 uuid \u2192 baseline_info        \u2502\n\u2502 uuid \u2192 current_path         \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n              \u2502\n              \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502    get_unified_diff()       \u2502\n\u2502                             \u2502\n\u2502 For each tracked file:      \u2502\n\u2502 1. Compare baseline vs now  \u2502\n\u2502 2. Generate git-style diff  \u2502\n\u2502 3. Handle renames/modes     \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n              \u2502\n              \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502      Unified Diff           \u2502\n\u2502                             \u2502\n\u2502 diff --git a/old b/new      \u2502\n\u2502 index abc123..def456        \u2502\n\u2502 --- a/old                   \u2502\n\u2502 +++ b/new                   \u2502\n\u2502 @@ -1,1 +1,2 @@             \u2502\n\u2502  existing line              \u2502\n\u2502 +new line                   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"learning-material/17-turn-diff-tracking/#python-implementation","title":"\ud83d\udc0d Python Implementation","text":"<p>See the example file: - <code>pattern_advanced.py</code>: Complete 400-line implementation</p> <p>Key classes: - <code>TurnDiffTracker</code>: Main tracker with UUID mappings - <code>BaselineFileInfo</code>: Snapshot of file at first touch - <code>FileMode</code>: Unix permissions (executable, symlink)</p> <p>Key methods: - <code>on_patch_begin()</code>: Snapshot files before modification - <code>get_unified_diff()</code>: Compute aggregated diff - <code>_compute_git_blob_oid()</code>: Git-compatible SHA-1</p>"},{"location":"learning-material/17-turn-diff-tracking/#key-takeaways","title":"\ud83d\udd11 Key Takeaways","text":"<ol> <li>\u2705 Baseline Snapshots: Critical to capture state before first touch</li> <li>\u2705 UUID Tracking: Enables rename detection and stable IDs</li> <li>\u2705 Git Integration: Real blob OIDs, proper diff format</li> <li>\u2705 Performance: Cache git roots, efficient diff computation</li> <li>\u2705 Edge Cases: Binary files, symlinks, permissions, deletions</li> <li>\u26a0\ufe0f Extreme Complexity: 897 lines in Rust, most complex pattern</li> </ol>"},{"location":"learning-material/17-turn-diff-tracking/#when-to-use","title":"\ud83d\ude80 When to Use","text":"<ul> <li>\u2705 Production agent systems that modify files</li> <li>\u2705 Code generation/editing agents</li> <li>\u2705 Systems that need change tracking</li> <li>\u2705 Integration with git workflows</li> <li>\u274c Simple file operations</li> <li>\u274c Read-only agents</li> <li>\u274c Systems without git integration</li> </ul>"},{"location":"learning-material/17-turn-diff-tracking/#common-pitfalls","title":"\u26a0\ufe0f Common Pitfalls","text":""},{"location":"learning-material/17-turn-diff-tracking/#1-missing-baseline-snapshots","title":"1. Missing Baseline Snapshots","text":"<pre><code>\u274c BAD: Track changes without baseline\n\u2705 GOOD: Snapshot on first touch, then track changes\n</code></pre>"},{"location":"learning-material/17-turn-diff-tracking/#2-ignoring-renames","title":"2. Ignoring Renames","text":"<pre><code>\u274c BAD: Treat rename as delete + add\n\u2705 GOOD: Use stable UUIDs to track across renames\n</code></pre>"},{"location":"learning-material/17-turn-diff-tracking/#3-non-git-compatible-diffs","title":"3. Non-Git-Compatible Diffs","text":"<pre><code>\u274c BAD: Custom diff format\n\u2705 GOOD: Use git blob SHA-1 and unified diff format\n</code></pre>"},{"location":"learning-material/17-turn-diff-tracking/#further-reading","title":"\ud83d\udcda Further Reading","text":"<ul> <li>Codex Source: <code>codex-rs/core/src/turn_diff_tracker.rs</code> (897 lines)</li> <li>Git Internals: How git computes blob SHA-1 hashes</li> <li>Unified Diff Format: Standard diff format specification</li> <li>Similar Crate: Rust library for text diffing</li> <li>SHA-1 Algorithm: Cryptographic hash function</li> </ul>"},{"location":"learning-material/17-turn-diff-tracking/#related-patterns","title":"\ud83d\udd17 Related Patterns","text":"<ul> <li>Pattern 5: Tool Use - File modification tools</li> <li>Pattern 8: Memory Management - State tracking</li> <li>Pattern 24: Rollout System - Change logging</li> <li>Git Integration - Version control workflows</li> </ul> <p>Next: Pattern 18: Rollout System \u2192</p>"},{"location":"learning-material/18-rollout-system/","title":"Pattern 24: Rollout System (Session Replay &amp; Debugging)","text":"<p>\"JSONL append-only session logs for debugging and replay\"</p>"},{"location":"learning-material/18-rollout-system/#pattern-overview","title":"\ud83d\udcd6 Pattern Overview","text":"<p>The Rollout System is Codex's sophisticated session persistence mechanism using JSONL (JSON Lines) format. It's not just logging - it's a complete replay system that enables debugging, session resumption, and exact state reconstruction.</p>"},{"location":"learning-material/18-rollout-system/#key-concepts","title":"\ud83c\udfaf Key Concepts","text":"<ol> <li>JSONL Format - One JSON object per line, append-only</li> <li>Self-Contained Events - Each line has complete context</li> <li>Session Resumption - Load file and rebuild exact state</li> <li>Git-Friendly - Line-by-line diffs work perfectly</li> <li>Tool-Inspectable - Use jq, grep, awk on rollout files</li> <li>Multiple Event Types - Messages, tool calls, metadata, errors</li> </ol>"},{"location":"learning-material/18-rollout-system/#how-codex-implements-this","title":"\ud83d\udd0d How Codex Implements This","text":""},{"location":"learning-material/18-rollout-system/#location-in-codebase","title":"Location in Codebase","text":"<ul> <li>Primary: <code>codex-rs/core/src/rollout/recorder.rs</code> (lines 1-268)</li> <li>Support: <code>codex-rs/core/src/rollout/list.rs</code> (session discovery)</li> </ul>"},{"location":"learning-material/18-rollout-system/#why-jsonl-over-database","title":"Why JSONL over Database?","text":"JSONL Database \u2705 Simple (no schema) \u274c Complex setup \u2705 Git-friendly diffs \u274c Binary format \u2705 Tool-inspectable \u274c Needs special tools \u2705 Append-only writes \u274c Complex transactions \u2705 Self-contained \u274c Schema dependencies"},{"location":"learning-material/18-rollout-system/#implementation-details","title":"Implementation Details","text":"<pre><code>// From codex-rs/core/src/rollout/recorder.rs:38-50\n#[derive(Clone)]\npub struct RolloutRecorder {\n    tx: Sender&lt;RolloutCmd&gt;,\n    pub(crate) rollout_path: PathBuf,\n}\n\n// Each line in the file\n#[derive(Debug, Clone, Default)]\npub(crate) struct ConversationHistory {\n    /// The oldest items are at the beginning of the vector.\n    items: Vec&lt;ResponseItem&gt;,\n}\n\n// File format: ~/.codex/sessions/rollout-2025-05-07T17-24-21-uuid.jsonl\n</code></pre>"},{"location":"learning-material/18-rollout-system/#file-format-example","title":"File Format Example","text":"<pre><code>{\"type\":\"session_meta\",\"item\":{\"session_id\":\"abc123\",\"timestamp\":\"2025-10-07T12:00:00Z\",\"cwd\":\"/workspace\",\"model\":\"gpt-4\"},\"seq\":1}\n{\"type\":\"user_message\",\"item\":{\"content\":\"Create a calculator\",\"timestamp\":\"2025-10-07T12:00:01Z\"},\"seq\":2}\n{\"type\":\"tool_call\",\"item\":{\"call_id\":\"tool_1\",\"tool_name\":\"write_file\",\"arguments\":{\"path\":\"calc.py\",\"content\":\"def add(a,b): return a+b\"},\"timestamp\":\"2025-10-07T12:00:02Z\"},\"seq\":3}\n{\"type\":\"tool_result\",\"item\":{\"call_id\":\"tool_1\",\"tool_name\":\"write_file\",\"result\":\"File written\",\"exit_code\":0,\"duration\":0.05,\"timestamp\":\"2025-10-07T12:00:02Z\"},\"seq\":4}\n{\"type\":\"assistant_message\",\"item\":{\"content\":\"I've created a calculator with an add function!\",\"timestamp\":\"2025-10-07T12:00:03Z\"},\"seq\":5}\n</code></pre>"},{"location":"learning-material/18-rollout-system/#real-world-example-from-codex","title":"\ud83d\udca1 Real-World Example from Codex","text":"<pre><code># Session file created\n~/.codex/sessions/rollout-2025-10-07T12-34-56-abc123.jsonl\n\n# Inspect with standard tools\n$ jq -C '.' rollout-2025-10-07T12-34-56-abc123.jsonl\n$ grep 'tool_call' rollout-2025-10-07T12-34-56-abc123.jsonl\n$ wc -l rollout-2025-10-07T12-34-56-abc123.jsonl\n\n# Resume session\n$ codex resume rollout-2025-10-07T12-34-56-abc123.jsonl\n# Loads exact state and continues conversation\n</code></pre>"},{"location":"learning-material/18-rollout-system/#architecture-diagram","title":"\ud83d\udcca Architecture Diagram","text":"<pre><code>Agent Turn\n    \u2193\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502     Session Events          \u2502\n\u2502                             \u2502\n\u2502 \u2022 User message              \u2502\n\u2502 \u2022 Assistant message         \u2502\n\u2502 \u2022 Tool call                 \u2502\n\u2502 \u2022 Tool result               \u2502\n\u2502 \u2022 System event              \u2502\n\u2502 \u2022 Error                     \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n              \u2502\n              \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502    RolloutRecorder          \u2502\n\u2502                             \u2502\n\u2502 1. Add sequence number      \u2502\n\u2502 2. Serialize to JSON        \u2502\n\u2502 3. Append line to file      \u2502\n\u2502 4. Flush immediately        \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n              \u2502\n              \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502      JSONL File             \u2502\n\u2502                             \u2502\n\u2502 Line 1: {\"type\":\"meta\"...}  \u2502\n\u2502 Line 2: {\"type\":\"user\"...}  \u2502\n\u2502 Line 3: {\"type\":\"tool\"...}  \u2502\n\u2502 Line 4: {\"type\":\"result\"..} \u2502\n\u2502 Line N: {\"type\":\"asst\"...}  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n              \u2502\n              \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502    Session Replay           \u2502\n\u2502                             \u2502\n\u2502 1. Read file line by line   \u2502\n\u2502 2. Parse each JSON event    \u2502\n\u2502 3. Reconstruct state        \u2502\n\u2502 4. Resume conversation      \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"learning-material/18-rollout-system/#python-implementation","title":"\ud83d\udc0d Python Implementation","text":"<p>See the example file: - <code>pattern_advanced.py</code>: Complete 500-line implementation</p> <p>Key classes: - <code>RolloutRecorder</code>: Append-only writer - <code>RolloutReplayer</code>: State reconstruction - <code>SessionManager</code>: High-level API - <code>RolloutLine</code>: Single event format</p> <p>Key features: - Multiple event types (messages, tools, errors) - Session resumption from disk - Git-friendly line format - Tool inspection support</p>"},{"location":"learning-material/18-rollout-system/#key-takeaways","title":"\ud83d\udd11 Key Takeaways","text":"<ol> <li>\u2705 Append-Only: Never modify existing lines</li> <li>\u2705 Self-Contained: Each line has complete context</li> <li>\u2705 Resumable: Exact state reconstruction</li> <li>\u2705 Tool-Friendly: Standard Unix tools work</li> <li>\u2705 Git-Compatible: Line-by-line diffs</li> <li>\u2705 Performance: Simple file I/O, no database overhead</li> </ol>"},{"location":"learning-material/18-rollout-system/#when-to-use","title":"\ud83d\ude80 When to Use","text":"<ul> <li>\u2705 Production agent systems</li> <li>\u2705 Debugging complex conversations</li> <li>\u2705 Session resumption requirements</li> <li>\u2705 Audit trails and compliance</li> <li>\u2705 Development and testing</li> <li>\u274c Simple scripts or demos</li> <li>\u274c Systems without persistence needs</li> </ul>"},{"location":"learning-material/18-rollout-system/#common-pitfalls","title":"\u26a0\ufe0f Common Pitfalls","text":""},{"location":"learning-material/18-rollout-system/#1-modifying-past-events","title":"1. Modifying Past Events","text":"<pre><code>\u274c BAD: Update existing lines in file\n\u2705 GOOD: Always append new events\n</code></pre>"},{"location":"learning-material/18-rollout-system/#2-missing-context","title":"2. Missing Context","text":"<pre><code>\u274c BAD: {\"type\": \"error\", \"message\": \"Failed\"}\n\u2705 GOOD: {\"type\": \"error\", \"call_id\": \"abc\", \"tool\": \"write_file\", \"message\": \"Permission denied\", \"timestamp\": \"...\"}\n</code></pre>"},{"location":"learning-material/18-rollout-system/#3-non-standard-format","title":"3. Non-Standard Format","text":"<pre><code>\u274c BAD: Custom binary format\n\u2705 GOOD: Standard JSONL with proper escaping\n</code></pre>"},{"location":"learning-material/18-rollout-system/#further-reading","title":"\ud83d\udcda Further Reading","text":"<ul> <li>Codex Source: <code>codex-rs/core/src/rollout/recorder.rs</code></li> <li>JSONL Specification: JSON Lines format standard</li> <li>jq Manual: JSON query tool for inspection</li> <li>Git Internals: How line-based diffs work</li> <li>Append-Only Logs: Database design patterns</li> </ul>"},{"location":"learning-material/18-rollout-system/#related-patterns","title":"\ud83d\udd17 Related Patterns","text":"<ul> <li>Pattern 8: Memory Management - Conversation state</li> <li>Pattern 12: Exception Handling - Error logging</li> <li>Pattern 23: Turn Diff Tracking - Change tracking</li> <li>Observability Patterns - System monitoring</li> </ul> <p>Next: Pattern 19: Inter-Agent Communication \u2192</p>"},{"location":"learning-material/19-inter-agent-communication/","title":"Pattern 19: Inter-Agent Communication (A2A)","text":"<p>\"Enabling agents to discover, coordinate, and communicate with each other through structured protocols\"</p>"},{"location":"learning-material/19-inter-agent-communication/#overview","title":"\ud83d\udcd6 Overview","text":"<p>Inter-Agent Communication (A2A) enables multiple agents to work together by establishing communication protocols, message passing, and coordination mechanisms. Unlike simple tool use, A2A involves agents discovering each other's capabilities and delegating complex tasks through structured interactions.</p>"},{"location":"learning-material/19-inter-agent-communication/#how-codex-implements-a2a","title":"\ud83c\udfaf How Codex Implements A2A","text":"<p>Codex implements sophisticated agent-to-agent communication primarily through the Model Context Protocol (MCP), enabling dynamic discovery and interaction with external agents and services.</p>"},{"location":"learning-material/19-inter-agent-communication/#key-implementation-mcp-client-architecture","title":"Key Implementation: MCP Client Architecture","text":"<p>File: <code>codex-rs/mcp-client/src/mcp_client.rs</code></p> <pre><code>pub struct McpClient {\n    stdio_client: Option&lt;StdioClient&gt;,\n    http_client: Option&lt;HttpClient&gt;,\n}\n\nimpl McpClient {\n    // Agent discovery - list available tools from other agents\n    pub async fn list_tools(&amp;self) -&gt; Result&lt;Vec&lt;Tool&gt;, McpError&gt; {\n        match &amp;self.stdio_client {\n            Some(client) =&gt; client.list_tools().await,\n            None =&gt; match &amp;self.http_client {\n                Some(client) =&gt; client.list_tools().await,\n                None =&gt; Err(McpError::NoClientConfigured),\n            }\n        }\n    }\n\n    // Agent communication - call tools on other agents\n    pub async fn call_tool(\n        &amp;self,\n        name: &amp;str,\n        arguments: Value,\n    ) -&gt; Result&lt;CallToolResult, McpError&gt; {\n        // Route message to appropriate agent\n        match &amp;self.stdio_client {\n            Some(client) =&gt; client.call_tool(name, arguments).await,\n            None =&gt; match &amp;self.http_client {\n                Some(client) =&gt; client.call_tool(name, arguments).await,\n                None =&gt; Err(McpError::NoClientConfigured),\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"learning-material/19-inter-agent-communication/#agent-coordination-in-tool-router","title":"Agent Coordination in Tool Router","text":"<p>File: <code>codex-rs/core/src/tools/router.rs</code></p> <pre><code>pub fn route_response_item(\n    item: &amp;ResponseItem,\n    mcp_client: &amp;Option&lt;Arc&lt;McpClient&gt;&gt;,\n) -&gt; Result&lt;ToolHandler, ToolRouterError&gt; {\n    match item {\n        ResponseItem::FunctionCall(func_call) =&gt; {\n            // Route to MCP agent if available\n            if let Some(client) = mcp_client {\n                return Ok(ToolHandler::Mcp {\n                    client: client.clone(),\n                    call: func_call.clone(),\n                });\n            }\n\n            // Fallback to local tools\n            Ok(ToolHandler::Function(func_call.clone()))\n        }\n        _ =&gt; Err(ToolRouterError::UnsupportedItem),\n    }\n}\n</code></pre>"},{"location":"learning-material/19-inter-agent-communication/#message-protocol-handling","title":"Message Protocol Handling","text":"<p>File: <code>codex-rs/mcp-types/src/lib.rs</code></p> <pre><code>#[derive(Debug, Serialize, Deserialize)]\npub struct CallToolRequest {\n    pub name: String,\n    pub arguments: Option&lt;Value&gt;,\n}\n\n#[derive(Debug, Serialize, Deserialize)]\npub struct CallToolResult {\n    pub content: Vec&lt;TextContent&gt;,\n    pub is_error: Option&lt;bool&gt;,\n}\n\n// Agent message envelope\n#[derive(Debug, Serialize, Deserialize)]\npub struct McpMessage {\n    pub jsonrpc: String,\n    pub id: Option&lt;Value&gt;,\n    pub method: Option&lt;String&gt;,\n    pub params: Option&lt;Value&gt;,\n    pub result: Option&lt;Value&gt;,\n}\n</code></pre>"},{"location":"learning-material/19-inter-agent-communication/#key-a2a-patterns-in-codex","title":"\ud83d\udd11 Key A2A Patterns in Codex","text":""},{"location":"learning-material/19-inter-agent-communication/#1-service-discovery","title":"1. Service Discovery","text":"<pre><code>// Agents discover each other's capabilities\nlet tools = mcp_client.list_tools().await?;\nfor tool in tools {\n    println!(\"Available: {} - {}\", tool.name, tool.description);\n}\n</code></pre>"},{"location":"learning-material/19-inter-agent-communication/#2-delegation-coordination","title":"2. Delegation &amp; Coordination","text":"<pre><code>// Primary agent delegates to specialized agent\nlet search_result = mcp_client.call_tool(\n    \"web_search\",\n    json!({\"query\": \"latest AI research\"})\n).await?;\n\n// Process results from other agent\nlet analysis = analyze_search_results(search_result.content)?;\n</code></pre>"},{"location":"learning-material/19-inter-agent-communication/#3-error-handling-in-communication","title":"3. Error Handling in Communication","text":"<pre><code>// Robust error handling for agent communication\nmatch mcp_client.call_tool(name, args).await {\n    Ok(result) =&gt; process_agent_response(result),\n    Err(McpError::AgentTimeout) =&gt; retry_with_backoff(),\n    Err(McpError::AgentUnavailable) =&gt; fallback_to_local_tool(),\n    Err(e) =&gt; return Err(e.into()),\n}\n</code></pre>"},{"location":"learning-material/19-inter-agent-communication/#4-protocol-abstraction","title":"4. Protocol Abstraction","text":"<pre><code>// Support multiple communication protocols\npub enum AgentTransport {\n    Stdio(StdioClient),\n    Http(HttpClient),\n    WebSocket(WsClient),\n}\n\nimpl AgentTransport {\n    pub async fn send_message(&amp;self, msg: McpMessage) -&gt; Result&lt;McpMessage&gt; {\n        match self {\n            Self::Stdio(client) =&gt; client.send(msg).await,\n            Self::Http(client) =&gt; client.post(msg).await,\n            Self::WebSocket(client) =&gt; client.send(msg).await,\n        }\n    }\n}\n</code></pre>"},{"location":"learning-material/19-inter-agent-communication/#key-takeaways","title":"\ud83c\udfaf Key Takeaways","text":""},{"location":"learning-material/19-inter-agent-communication/#production-insights","title":"\u2705 Production Insights","text":"<ol> <li> <p>Protocol Standardization: Codex uses MCP as a standard protocol for agent communication, ensuring interoperability.</p> </li> <li> <p>Transport Flexibility: Support for multiple transport mechanisms (stdio, HTTP, WebSocket) allows agents to communicate across different environments.</p> </li> <li> <p>Graceful Degradation: When agent communication fails, Codex falls back to local tools or alternative agents.</p> </li> <li> <p>Discovery Before Use: Agents dynamically discover each other's capabilities rather than hardcoding dependencies.</p> </li> </ol>"},{"location":"learning-material/19-inter-agent-communication/#architecture-benefits","title":"\ud83c\udfd7\ufe0f Architecture Benefits","text":"<ul> <li>Scalability: New agents can be added without modifying existing code</li> <li>Fault Tolerance: Communication failures don't crash the system</li> <li>Modularity: Each agent can specialize in specific domains</li> <li>Flexibility: Support for various communication patterns (request/response, streaming, etc.)</li> </ul>"},{"location":"learning-material/19-inter-agent-communication/#related-patterns","title":"\ud83d\udd17 Related Patterns","text":"<ul> <li>Pattern 2: Routing - Routes messages between agents</li> <li>Pattern 10: MCP Integration - Underlying protocol for A2A</li> <li>Pattern 12: Exception Handling - Handles communication failures</li> <li>Pattern 5: Tool Use - Basic building block for agent capabilities</li> </ul>"},{"location":"learning-material/19-inter-agent-communication/#further-reading","title":"\ud83d\udcda Further Reading","text":"<ul> <li>Model Context Protocol Specification</li> <li>Codex MCP Implementation</li> <li>Agent Communication Patterns</li> </ul> <p>Next: Pattern 20: Evaluation and Monitoring \u2192</p>"},{"location":"learning-material/20-evaluation-monitoring/","title":"Pattern 20: Evaluation and Monitoring","text":"<p>\"Tracking agent performance, logging metrics, and evaluating outcomes for continuous improvement\"</p>"},{"location":"learning-material/20-evaluation-monitoring/#overview","title":"\ud83d\udcd6 Overview","text":"<p>Evaluation and Monitoring involves systematically tracking agent performance, collecting metrics, logging events, and analyzing outcomes to ensure reliable operation and continuous improvement. This pattern is essential for production systems where you need visibility into agent behavior, performance bottlenecks, and failure modes.</p>"},{"location":"learning-material/20-evaluation-monitoring/#how-codex-implements-evaluation-and-monitoring","title":"\ud83c\udfaf How Codex Implements Evaluation and Monitoring","text":"<p>Codex implements comprehensive monitoring through multiple layers: OpenTelemetry for metrics, rollout logging for session replay, and real-time performance tracking in the TUI.</p>"},{"location":"learning-material/20-evaluation-monitoring/#key-implementation-opentelemetry-integration","title":"Key Implementation: OpenTelemetry Integration","text":"<p>File: <code>codex-rs/otel/src/lib.rs</code></p> <pre><code>use opentelemetry::{\n    metrics::{Counter, Histogram, Meter},\n    trace::{Span, Tracer},\n    KeyValue,\n};\n\npub struct CodexTelemetry {\n    tracer: Box&lt;dyn Tracer + Send + Sync&gt;,\n    meter: Meter,\n\n    // Metrics\n    pub tool_calls_total: Counter&lt;u64&gt;,\n    pub tool_call_duration: Histogram&lt;f64&gt;,\n    pub tokens_used_total: Counter&lt;u64&gt;,\n    pub errors_total: Counter&lt;u64&gt;,\n}\n\nimpl CodexTelemetry {\n    pub fn record_tool_call(&amp;self, tool_name: &amp;str, duration: f64, success: bool) {\n        // Record metrics\n        self.tool_calls_total.add(1, &amp;[\n            KeyValue::new(\"tool\", tool_name.to_string()),\n            KeyValue::new(\"success\", success.to_string()),\n        ]);\n\n        self.tool_call_duration.record(duration, &amp;[\n            KeyValue::new(\"tool\", tool_name.to_string()),\n        ]);\n\n        if !success {\n            self.errors_total.add(1, &amp;[\n                KeyValue::new(\"error_type\", \"tool_execution\"),\n                KeyValue::new(\"tool\", tool_name.to_string()),\n            ]);\n        }\n    }\n\n    pub fn record_token_usage(&amp;self, prompt_tokens: u64, completion_tokens: u64) {\n        self.tokens_used_total.add(prompt_tokens, &amp;[\n            KeyValue::new(\"token_type\", \"prompt\"),\n        ]);\n\n        self.tokens_used_total.add(completion_tokens, &amp;[\n            KeyValue::new(\"token_type\", \"completion\"),\n        ]);\n    }\n}\n</code></pre>"},{"location":"learning-material/20-evaluation-monitoring/#session-recording-and-replay","title":"Session Recording and Replay","text":"<p>File: <code>codex-rs/core/src/rollout/recorder.rs</code></p> <pre><code>pub struct RolloutRecorder {\n    session_id: String,\n    file: Option&lt;File&gt;,\n    sequence_number: AtomicU64,\n}\n\nimpl RolloutRecorder {\n    pub async fn record_turn_start(&amp;mut self, turn_context: &amp;TurnContext) -&gt; Result&lt;()&gt; {\n        let item = RolloutItem::TurnStart {\n            turn_id: turn_context.turn_id,\n            timestamp: Utc::now(),\n            user_message: turn_context.user_message.clone(),\n        };\n\n        self.write_item(&amp;item).await?;\n\n        // Also emit telemetry\n        telemetry().record_turn_start(turn_context.turn_id);\n        Ok(())\n    }\n\n    pub async fn record_tool_execution(\n        &amp;mut self,\n        tool_name: &amp;str,\n        args: &amp;Value,\n        result: &amp;ToolResult,\n        duration: Duration,\n    ) -&gt; Result&lt;()&gt; {\n        let item = RolloutItem::ToolExecution {\n            tool_name: tool_name.to_string(),\n            arguments: args.clone(),\n            result: result.clone(),\n            duration_ms: duration.as_millis() as u64,\n            timestamp: Utc::now(),\n        };\n\n        self.write_item(&amp;item).await?;\n\n        // Record metrics\n        telemetry().record_tool_call(\n            tool_name,\n            duration.as_secs_f64(),\n            result.is_success(),\n        );\n\n        Ok(())\n    }\n}\n</code></pre>"},{"location":"learning-material/20-evaluation-monitoring/#real-time-performance-monitoring","title":"Real-Time Performance Monitoring","text":"<p>File: <code>codex-rs/tui/src/app.rs</code></p> <pre><code>pub struct AppState {\n    pub session_stats: SessionStats,\n    pub rate_limits: RateLimits,\n    pub performance_metrics: PerformanceMetrics,\n}\n\n#[derive(Debug, Clone)]\npub struct SessionStats {\n    pub turns_completed: u32,\n    pub tools_executed: u32,\n    pub tokens_used: TokenUsage,\n    pub session_duration: Duration,\n    pub error_count: u32,\n}\n\n#[derive(Debug, Clone)]\npub struct PerformanceMetrics {\n    pub avg_response_time: Duration,\n    pub tool_success_rate: f64,\n    pub tokens_per_minute: f64,\n    pub memory_usage: u64,\n}\n\nimpl AppState {\n    pub fn update_metrics(&amp;mut self, event: &amp;ResponseEvent) {\n        match event {\n            ResponseEvent::Completed { token_usage, .. } =&gt; {\n                self.session_stats.tokens_used.add(token_usage);\n                self.update_performance_metrics();\n            }\n            ResponseEvent::ToolCallResult { success, duration, .. } =&gt; {\n                self.session_stats.tools_executed += 1;\n                if !success {\n                    self.session_stats.error_count += 1;\n                }\n                self.performance_metrics.update_tool_stats(*duration, *success);\n            }\n            _ =&gt; {}\n        }\n    }\n}\n</code></pre>"},{"location":"learning-material/20-evaluation-monitoring/#error-tracking-and-analysis","title":"Error Tracking and Analysis","text":"<p>File: <code>codex-rs/core/src/error.rs</code></p> <pre><code>#[derive(Debug, thiserror::Error)]\npub enum CodexError {\n    #[error(\"Tool execution failed: {tool_name}\")]\n    ToolExecutionFailed {\n        tool_name: String,\n        exit_code: Option&lt;i32&gt;,\n        stderr: String,\n    },\n\n    #[error(\"Context window exceeded: {tokens_used}/{max_tokens}\")]\n    ContextWindowExceeded {\n        tokens_used: u32,\n        max_tokens: u32,\n    },\n\n    #[error(\"Rate limit exceeded: {retry_after:?}\")]\n    RateLimitExceeded {\n        retry_after: Option&lt;Duration&gt;,\n    },\n}\n\nimpl CodexError {\n    pub fn record_error_metrics(&amp;self) {\n        let error_type = match self {\n            Self::ToolExecutionFailed { .. } =&gt; \"tool_execution\",\n            Self::ContextWindowExceeded { .. } =&gt; \"context_window\",\n            Self::RateLimitExceeded { .. } =&gt; \"rate_limit\",\n        };\n\n        telemetry().errors_total.add(1, &amp;[\n            KeyValue::new(\"error_type\", error_type),\n        ]);\n\n        // Also log for analysis\n        tracing::error!(\n            error_type = error_type,\n            error = %self,\n            \"Codex error occurred\"\n        );\n    }\n}\n</code></pre>"},{"location":"learning-material/20-evaluation-monitoring/#key-monitoring-patterns-in-codex","title":"\ud83d\udd11 Key Monitoring Patterns in Codex","text":""},{"location":"learning-material/20-evaluation-monitoring/#1-multi-layer-metrics-collection","title":"1. Multi-Layer Metrics Collection","text":"<pre><code>// Application metrics\ntelemetry.record_tool_call(\"shell\", 1.2, true);\ntelemetry.record_token_usage(150, 80);\n\n// System metrics\ntelemetry.record_memory_usage(process_memory());\ntelemetry.record_cpu_usage(cpu_percent());\n\n// Business metrics\ntelemetry.record_task_completion(task_id, success, duration);\n</code></pre>"},{"location":"learning-material/20-evaluation-monitoring/#2-event-driven-monitoring","title":"2. Event-Driven Monitoring","text":"<pre><code>// Events trigger automatic metric collection\nmatch event {\n    ResponseEvent::ToolCallBegin { tool_name, .. } =&gt; {\n        span.record(\"tool.name\", tool_name);\n        timer.start();\n    }\n    ResponseEvent::ToolCallEnd { success, .. } =&gt; {\n        let duration = timer.elapsed();\n        record_tool_metrics(tool_name, duration, success);\n    }\n}\n</code></pre>"},{"location":"learning-material/20-evaluation-monitoring/#3-session-replay-for-debugging","title":"3. Session Replay for Debugging","text":"<pre><code>// Every session is recorded for replay\nlet replayer = RolloutReplayer::new(session_path)?;\nlet session = replayer.replay_session().await?;\n\n// Analyze session for issues\nfor turn in session.turns {\n    if turn.had_errors() {\n        analyze_error_patterns(&amp;turn);\n    }\n}\n</code></pre>"},{"location":"learning-material/20-evaluation-monitoring/#4-real-time-performance-dashboard","title":"4. Real-Time Performance Dashboard","text":"<pre><code>// TUI displays live metrics\nfn render_metrics(frame: &amp;mut Frame, metrics: &amp;PerformanceMetrics) {\n    let metrics_text = vec![\n        Line::from(format!(\"Response Time: {:.2}s\", metrics.avg_response_time.as_secs_f64())),\n        Line::from(format!(\"Success Rate: {:.1}%\", metrics.tool_success_rate * 100.0)),\n        Line::from(format!(\"Tokens/min: {:.0}\", metrics.tokens_per_minute)),\n        Line::from(format!(\"Memory: {:.1}MB\", metrics.memory_usage as f64 / 1024.0 / 1024.0)),\n    ];\n\n    let paragraph = Paragraph::new(metrics_text)\n        .block(Block::default().title(\"Performance\").borders(Borders::ALL));\n\n    frame.render_widget(paragraph, area);\n}\n</code></pre>"},{"location":"learning-material/20-evaluation-monitoring/#key-takeaways","title":"\ud83c\udfaf Key Takeaways","text":""},{"location":"learning-material/20-evaluation-monitoring/#production-insights","title":"\u2705 Production Insights","text":"<ol> <li> <p>Multi-Dimensional Metrics: Codex tracks performance (latency, throughput), business (task success), and system (memory, CPU) metrics.</p> </li> <li> <p>Event-Driven Collection: Metrics are collected automatically as events occur, reducing overhead and ensuring completeness.</p> </li> <li> <p>Session Replay: Complete session recording enables post-mortem analysis and debugging of complex issues.</p> </li> <li> <p>Real-Time Visibility: The TUI provides immediate feedback on system performance and health.</p> </li> </ol>"},{"location":"learning-material/20-evaluation-monitoring/#architecture-benefits","title":"\ud83c\udfd7\ufe0f Architecture Benefits","text":"<ul> <li>Observability: Full visibility into agent behavior and performance</li> <li>Debugging: Session replay enables root cause analysis</li> <li>Optimization: Metrics identify performance bottlenecks</li> <li>Reliability: Error tracking helps improve system robustness</li> </ul>"},{"location":"learning-material/20-evaluation-monitoring/#metrics-categories","title":"\ud83d\udcca Metrics Categories","text":""},{"location":"learning-material/20-evaluation-monitoring/#performance-metrics","title":"Performance Metrics","text":"<ul> <li>Response latency (P50, P95, P99)</li> <li>Tool execution duration</li> <li>Token processing rate</li> <li>Memory and CPU usage</li> </ul>"},{"location":"learning-material/20-evaluation-monitoring/#business-metrics","title":"Business Metrics","text":"<ul> <li>Task completion rate</li> <li>Tool success rate</li> <li>User satisfaction scores</li> <li>Session duration</li> </ul>"},{"location":"learning-material/20-evaluation-monitoring/#error-metrics","title":"Error Metrics","text":"<ul> <li>Error rate by type</li> <li>Failed tool executions</li> <li>Context window overflows</li> <li>Rate limit hits</li> </ul>"},{"location":"learning-material/20-evaluation-monitoring/#system-metrics","title":"System Metrics","text":"<ul> <li>Resource utilization</li> <li>Network latency</li> <li>Disk I/O</li> <li>Thread pool usage</li> </ul>"},{"location":"learning-material/20-evaluation-monitoring/#related-patterns","title":"\ud83d\udd17 Related Patterns","text":"<ul> <li>Pattern 18: Rollout System - Provides data for evaluation</li> <li>Pattern 12: Exception Handling - Error metrics and tracking</li> <li>Pattern 1: Prompt Chaining - Turn-level performance metrics</li> <li>Pattern 5: Tool Use - Tool execution metrics</li> </ul>"},{"location":"learning-material/20-evaluation-monitoring/#further-reading","title":"\ud83d\udcda Further Reading","text":"<ul> <li>OpenTelemetry Documentation</li> <li>Codex Telemetry Implementation</li> <li>Observability Best Practices</li> </ul> <p>Next: Complete Agent Example \u2192</p>"},{"location":"learning-material/complete-agent-example/","title":"Complete Agent Example","text":"<p>\"Putting it all together: A production-inspired agentic system\"</p>"},{"location":"learning-material/complete-agent-example/#overview","title":"\ud83d\udcd6 Overview","text":"<p>This example demonstrates how to combine multiple agentic patterns into a cohesive, production-ready system inspired by Codex's architecture.</p>"},{"location":"learning-material/complete-agent-example/#patterns-integrated","title":"\ud83c\udfaf Patterns Integrated","text":"<p>This complete example integrates:</p> <ol> <li>\u2705 Prompt Chaining - Multi-turn conversation</li> <li>\u2705 Routing - Dynamic tool dispatch</li> <li>\u2705 Parallelization - Concurrent tool execution</li> <li>\u2705 Tool Use - External system integration</li> <li>\u2705 Memory Management - Conversation persistence</li> <li>\u2705 Exception Handling - Retry logic and recovery</li> <li>\u2705 Human-in-the-Loop - Approval workflows</li> <li>\u2705 Guardrails - Safety checks and sandboxing</li> </ol>"},{"location":"learning-material/complete-agent-example/#architecture","title":"\ud83c\udfd7\ufe0f Architecture","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                    Codex-Inspired Agent                      \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502                                                               \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u2502\n\u2502  \u2502            Conversation Manager                        \u2502  \u2502\n\u2502  \u2502  \u2022 Turn-based execution loop                          \u2502  \u2502\n\u2502  \u2502  \u2022 History management                                 \u2502  \u2502\n\u2502  \u2502  \u2022 State persistence                                  \u2502  \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2502\n\u2502                        \u2502                                     \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u2502\n\u2502  \u2502            Tool Router &amp; Safety Layer                  \u2502  \u2502\n\u2502  \u2502  \u2022 Intent classification                              \u2502  \u2502\n\u2502  \u2502  \u2022 Safety assessment                                  \u2502  \u2502\n\u2502  \u2502  \u2022 Approval requests                                  \u2502  \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2502\n\u2502                        \u2502                                     \u2502\n\u2502         \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510                     \u2502\n\u2502         \u2502              \u2502              \u2502                     \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510           \u2502\n\u2502  \u2502  File Ops \u2502  \u2502   Shell   \u2502  \u2502  Calculator   \u2502  ...      \u2502\n\u2502  \u2502   Tools   \u2502  \u2502   Tools   \u2502  \u2502     Tools     \u2502           \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518           \u2502\n\u2502                                                               \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u2502\n\u2502  \u2502            Error Handler &amp; Retry Logic                 \u2502  \u2502\n\u2502  \u2502  \u2022 Exponential backoff                                \u2502  \u2502\n\u2502  \u2502  \u2022 Circuit breaker                                    \u2502  \u2502\n\u2502  \u2502  \u2022 Graceful degradation                               \u2502  \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2502\n\u2502                                                               \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"learning-material/complete-agent-example/#files","title":"\ud83d\udcc2 Files","text":"<ul> <li><code>agent_core.py</code>: Core agent implementation</li> <li><code>tool_system.py</code>: Tool registry and execution</li> <li><code>safety_layer.py</code>: Safety checks and approvals</li> <li><code>conversation_manager.py</code>: State and history management</li> <li><code>error_handling.py</code>: Retry logic and recovery</li> <li><code>example_usage.py</code>: Demo scenarios</li> </ul>"},{"location":"learning-material/complete-agent-example/#quick-start","title":"\ud83d\ude80 Quick Start","text":"<pre><code># Install dependencies\npip install openai aiohttp\n\n# Set API key\nexport OPENAI_API_KEY=\"your-key-here\"\n\n# Run the complete example\npython example_usage.py\n</code></pre>"},{"location":"learning-material/complete-agent-example/#key-features","title":"\ud83d\udca1 Key Features","text":""},{"location":"learning-material/complete-agent-example/#1-multi-turn-conversations","title":"1. Multi-Turn Conversations","text":"<p>Like Codex, maintains context across turns: <pre><code>agent = CodexInspiredAgent()\nagent.run(\"Analyze the codebase\")\n# Turn 1: Reads files\n# Turn 2: Analyzes code\n# Turn 3: Generates report\n</code></pre></p>"},{"location":"learning-material/complete-agent-example/#2-safe-tool-execution","title":"2. Safe Tool Execution","text":"<p>Multiple layers of safety: <pre><code># Whitelist checking\n# Sandboxing simulation\n# User approval for dangerous ops\n# Output truncation\n# Timeout enforcement\n</code></pre></p>"},{"location":"learning-material/complete-agent-example/#3-intelligent-routing","title":"3. Intelligent Routing","text":"<p>Automatically routes to appropriate tools: <pre><code># \"What time is it?\" \u2192 time tool\n# \"Calculate 2+2\" \u2192 calculator tool\n# \"Read main.py\" \u2192 file tool\n</code></pre></p>"},{"location":"learning-material/complete-agent-example/#4-error-recovery","title":"4. Error Recovery","text":"<p>Handles failures gracefully: <pre><code># Automatic retry with backoff\n# Fallback to alternative approaches\n# User notification of issues\n</code></pre></p>"},{"location":"learning-material/complete-agent-example/#5-conversation-persistence","title":"5. Conversation Persistence","text":"<p>Saves and resumes sessions: <pre><code>agent.save_session(\"session_123.json\")\n# Later...\nagent.load_session(\"session_123.json\")\n</code></pre></p>"},{"location":"learning-material/complete-agent-example/#example-scenarios","title":"\ud83d\udcca Example Scenarios","text":""},{"location":"learning-material/complete-agent-example/#scenario-1-code-analysis-task","title":"Scenario 1: Code Analysis Task","text":"<pre><code>query = \"Analyze main.py, find bugs, and suggest fixes\"\n\n# Turn 1: Read file\n# Turn 2: Analyze for bugs (uses analysis tool)\n# Turn 3: Generate fixes (uses code generation)\n# Turn 4: Present recommendations\n</code></pre>"},{"location":"learning-material/complete-agent-example/#scenario-2-data-processing","title":"Scenario 2: Data Processing","text":"<pre><code>query = \"Process sales.csv and create a summary report\"\n\n# Turn 1: Read CSV (file tool)\n# Turn 2: Calculate statistics (calculator tool)\n# Turn 3: Generate visualizations (visualization tool)\n# Turn 4: Write report (file tool)\n</code></pre>"},{"location":"learning-material/complete-agent-example/#scenario-3-system-administration","title":"Scenario 3: System Administration","text":"<pre><code>query = \"Check disk usage and clean up old logs\"\n\n# Turn 1: Check disk (shell tool)\n# Approval requested: \"Execute 'du -sh'?\"\n# Turn 2: Identify old files (shell tool)\n# Approval requested: \"Delete 500MB of logs?\"\n# Turn 3: Clean up (shell tool)\n# Turn 4: Verify space freed\n</code></pre>"},{"location":"learning-material/complete-agent-example/#safety-features","title":"\ud83d\udd10 Safety Features","text":""},{"location":"learning-material/complete-agent-example/#command-whitelisting","title":"Command Whitelisting","text":"<pre><code>SAFE_COMMANDS = [\"ls\", \"cat\", \"grep\", \"find\"]\nDANGEROUS_COMMANDS = [\"rm\", \"dd\", \"mkfs\", \"shutdown\"]\n</code></pre>"},{"location":"learning-material/complete-agent-example/#approval-workflow","title":"Approval Workflow","text":"<pre><code>if is_dangerous_operation(tool_call):\n    approval = request_user_approval(tool_call)\n    if not approval:\n        return \"Operation denied by user\"\n</code></pre>"},{"location":"learning-material/complete-agent-example/#sandboxing","title":"Sandboxing","text":"<pre><code># Network disabled\n# File access limited to workspace\n# Process timeout: 30s\n# Output truncated: 10KB max\n</code></pre>"},{"location":"learning-material/complete-agent-example/#performance-considerations","title":"\ud83d\udcc8 Performance Considerations","text":""},{"location":"learning-material/complete-agent-example/#parallel-tool-execution","title":"Parallel Tool Execution","text":"<pre><code># Some tools run in parallel\nresults = await asyncio.gather(\n    execute_tool(\"read_file\", {\"path\": \"a.py\"}),\n    execute_tool(\"read_file\", {\"path\": \"b.py\"}),\n    execute_tool(\"read_file\", {\"path\": \"c.py\"}),\n)\n</code></pre>"},{"location":"learning-material/complete-agent-example/#context-window-management","title":"Context Window Management","text":"<pre><code># Automatically compress old history\nif len(history) &gt; MAX_TURNS:\n    history = compress_history(history)\n</code></pre>"},{"location":"learning-material/complete-agent-example/#caching","title":"Caching","text":"<pre><code># Cache file reads\n# Cache tool results\n# Cache LLM responses (deterministic queries)\n</code></pre>"},{"location":"learning-material/complete-agent-example/#testing","title":"\ud83e\uddea Testing","text":"<pre><code># Run unit tests\npython -m pytest test_agent.py\n\n# Run integration tests\npython -m pytest test_integration.py\n\n# Run safety tests\npython -m pytest test_safety.py\n</code></pre>"},{"location":"learning-material/complete-agent-example/#learning-objectives","title":"\ud83d\udcda Learning Objectives","text":"<p>After studying this example, you should understand:</p> <ol> <li>\u2705 How to architect a multi-pattern agent system</li> <li>\u2705 State management across async operations</li> <li>\u2705 Safety-first design principles</li> <li>\u2705 Error handling and recovery strategies</li> <li>\u2705 Tool orchestration and routing</li> <li>\u2705 User interaction patterns</li> <li>\u2705 Performance optimization techniques</li> </ol>"},{"location":"learning-material/complete-agent-example/#codex-comparison","title":"\ud83d\udd17 Codex Comparison","text":"Feature This Example Codex Language Python Rust Sandboxing Simulated Real (Seatbelt/Landlock) MCP Support No Yes TUI No Yes (Ratatui) State Persistence JSON Binary rollout files Error Handling Basic retry Advanced with backoff Tool Parallelization Yes Yes Approval System Yes Yes"},{"location":"learning-material/complete-agent-example/#extension-ideas","title":"\ud83d\ude80 Extension Ideas","text":"<ol> <li>Add MCP Support: Integrate with external MCP servers</li> <li>Implement Streaming: Stream tool output in real-time</li> <li>Add Telemetry: OpenTelemetry integration</li> <li>Build TUI: Terminal UI like Codex</li> <li>Enhance Sandboxing: Use Docker or similar</li> <li>Add Planning: Explicit planning tool like Codex</li> <li>Multi-Agent: Coordination between multiple agents</li> </ol>"},{"location":"learning-material/complete-agent-example/#license","title":"\ud83d\udcc4 License","text":"<p>Educational example for learning purposes.</p> <p>Start with: <code>example_usage.py</code> to see it in action!</p>"}]}